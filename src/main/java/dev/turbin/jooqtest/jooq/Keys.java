/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq;


import dev.turbin.jooqtest.jooq.tables.AsrpFpaChildRestrict;
import dev.turbin.jooqtest.jooq.tables.AsrpFpaChildRestrictAudit;
import dev.turbin.jooqtest.jooq.tables.AsrpFpaExtraInfo;
import dev.turbin.jooqtest.jooq.tables.AsrpFpaExtraInfoAudit;
import dev.turbin.jooqtest.jooq.tables.AsrpFpaKidsInfo;
import dev.turbin.jooqtest.jooq.tables.AsrpFpaKidsInfoAudit;
import dev.turbin.jooqtest.jooq.tables.BackgroundTask;
import dev.turbin.jooqtest.jooq.tables.BatchJobExecution;
import dev.turbin.jooqtest.jooq.tables.BatchJobExecutionContext;
import dev.turbin.jooqtest.jooq.tables.BatchJobExecutionParams;
import dev.turbin.jooqtest.jooq.tables.BatchJobInstance;
import dev.turbin.jooqtest.jooq.tables.BatchStepExecution;
import dev.turbin.jooqtest.jooq.tables.BatchStepExecutionContext;
import dev.turbin.jooqtest.jooq.tables.Charge;
import dev.turbin.jooqtest.jooq.tables.CoreAddress;
import dev.turbin.jooqtest.jooq.tables.CoreCase;
import dev.turbin.jooqtest.jooq.tables.CoreCaseAudit;
import dev.turbin.jooqtest.jooq.tables.CoreCaseTemp;
import dev.turbin.jooqtest.jooq.tables.CoreComment;
import dev.turbin.jooqtest.jooq.tables.CoreCommentAudit;
import dev.turbin.jooqtest.jooq.tables.CoreContactInfo;
import dev.turbin.jooqtest.jooq.tables.CoreContactInfoAudit;
import dev.turbin.jooqtest.jooq.tables.CoreCounter;
import dev.turbin.jooqtest.jooq.tables.CoreDocument;
import dev.turbin.jooqtest.jooq.tables.CoreDocumentAudit;
import dev.turbin.jooqtest.jooq.tables.CoreFileStorage;
import dev.turbin.jooqtest.jooq.tables.CoreFileStorageAudit;
import dev.turbin.jooqtest.jooq.tables.CoreMrcodMessage;
import dev.turbin.jooqtest.jooq.tables.CorePersonAddress;
import dev.turbin.jooqtest.jooq.tables.CorePersonAddressAudit;
import dev.turbin.jooqtest.jooq.tables.CorePersonDocument;
import dev.turbin.jooqtest.jooq.tables.CorePersonDocumentAudit;
import dev.turbin.jooqtest.jooq.tables.CorePersonDocumentExBirthRecord;
import dev.turbin.jooqtest.jooq.tables.CorePersonHiding;
import dev.turbin.jooqtest.jooq.tables.CoreProcedure;
import dev.turbin.jooqtest.jooq.tables.CoreSmevRequest;
import dev.turbin.jooqtest.jooq.tables.CoreSmevResponse;
import dev.turbin.jooqtest.jooq.tables.CoreUploadedApplication;
import dev.turbin.jooqtest.jooq.tables.CorrectionLog;
import dev.turbin.jooqtest.jooq.tables.Databasechangeloglock;
import dev.turbin.jooqtest.jooq.tables.DestructionAct;
import dev.turbin.jooqtest.jooq.tables.DestructionActHistory;
import dev.turbin.jooqtest.jooq.tables.Employment;
import dev.turbin.jooqtest.jooq.tables.EmploymentAudit;
import dev.turbin.jooqtest.jooq.tables.ErnError;
import dev.turbin.jooqtest.jooq.tables.ExportHistorySrc;
import dev.turbin.jooqtest.jooq.tables.ExternalInteraction;
import dev.turbin.jooqtest.jooq.tables.FileCorrectionLog;
import dev.turbin.jooqtest.jooq.tables.FpBaseRestrict;
import dev.turbin.jooqtest.jooq.tables.FpBaseRestrictAudit;
import dev.turbin.jooqtest.jooq.tables.FpCancelRestrictCase;
import dev.turbin.jooqtest.jooq.tables.FpCancelRestrictCaseAudit;
import dev.turbin.jooqtest.jooq.tables.FpCase;
import dev.turbin.jooqtest.jooq.tables.FpCaseAlter;
import dev.turbin.jooqtest.jooq.tables.FpCaseAlterAudit;
import dev.turbin.jooqtest.jooq.tables.FpCaseAudit;
import dev.turbin.jooqtest.jooq.tables.FpCaseInvalidation;
import dev.turbin.jooqtest.jooq.tables.FpCaseInvalidationAudit;
import dev.turbin.jooqtest.jooq.tables.FpCaseIssuance;
import dev.turbin.jooqtest.jooq.tables.FpCaseIssuanceAudit;
import dev.turbin.jooqtest.jooq.tables.FpCaseIssueRecall;
import dev.turbin.jooqtest.jooq.tables.FpCaseIssueRecallAudit;
import dev.turbin.jooqtest.jooq.tables.FpCaseLegalPerson;
import dev.turbin.jooqtest.jooq.tables.FpCaseLegalPersonAudit;
import dev.turbin.jooqtest.jooq.tables.FpCaseLoss;
import dev.turbin.jooqtest.jooq.tables.FpCaseLossAudit;
import dev.turbin.jooqtest.jooq.tables.FpCaseOtherLegalPerson;
import dev.turbin.jooqtest.jooq.tables.FpCaseRecall;
import dev.turbin.jooqtest.jooq.tables.FpCaseRecallAudit;
import dev.turbin.jooqtest.jooq.tables.FpCaseRestrict;
import dev.turbin.jooqtest.jooq.tables.FpCaseRestrictAudit;
import dev.turbin.jooqtest.jooq.tables.FpChildData;
import dev.turbin.jooqtest.jooq.tables.FpChildDataAudit;
import dev.turbin.jooqtest.jooq.tables.FpDecision;
import dev.turbin.jooqtest.jooq.tables.FpDecisionAudit;
import dev.turbin.jooqtest.jooq.tables.FpDeclineGetApplicationCase;
import dev.turbin.jooqtest.jooq.tables.FpDeclineGetApplicationCaseAudit;
import dev.turbin.jooqtest.jooq.tables.FpEmployment;
import dev.turbin.jooqtest.jooq.tables.FpEmploymentAudit;
import dev.turbin.jooqtest.jooq.tables.FpInformalLegalPerson;
import dev.turbin.jooqtest.jooq.tables.FpInformalLegalPersonAudit;
import dev.turbin.jooqtest.jooq.tables.FpPersonAddress;
import dev.turbin.jooqtest.jooq.tables.FpPersonAddressAudit;
import dev.turbin.jooqtest.jooq.tables.FpPersonChangeInfo;
import dev.turbin.jooqtest.jooq.tables.FpPersonChangeInfoAudit;
import dev.turbin.jooqtest.jooq.tables.FpPersonChangeInfoLink;
import dev.turbin.jooqtest.jooq.tables.FpPersonChangeInfoLinkAudit;
import dev.turbin.jooqtest.jooq.tables.FpPersonDocument;
import dev.turbin.jooqtest.jooq.tables.FpPersonDocumentAudit;
import dev.turbin.jooqtest.jooq.tables.FpPrint;
import dev.turbin.jooqtest.jooq.tables.FpRestrictInterval;
import dev.turbin.jooqtest.jooq.tables.FpRestrictIntervalAudit;
import dev.turbin.jooqtest.jooq.tables.FpSignalInformation;
import dev.turbin.jooqtest.jooq.tables.FpTranslateName;
import dev.turbin.jooqtest.jooq.tables.FpTranslateNameAudit;
import dev.turbin.jooqtest.jooq.tables.FpTranslateNameHistory;
import dev.turbin.jooqtest.jooq.tables.FpTranslateNameHistoryAudit;
import dev.turbin.jooqtest.jooq.tables.Measurement;
import dev.turbin.jooqtest.jooq.tables.NewBirthPlace;
import dev.turbin.jooqtest.jooq.tables.OrganizationInfo;
import dev.turbin.jooqtest.jooq.tables.OrganizationInfoAudit;
import dev.turbin.jooqtest.jooq.tables.PassLossInfo;
import dev.turbin.jooqtest.jooq.tables.Payment;
import dev.turbin.jooqtest.jooq.tables.PersonRole;
import dev.turbin.jooqtest.jooq.tables.PersonRoleAudit;
import dev.turbin.jooqtest.jooq.tables.PpotOpenCases;
import dev.turbin.jooqtest.jooq.tables.Shedlock;
import dev.turbin.jooqtest.jooq.tables.SpringSession;
import dev.turbin.jooqtest.jooq.tables.SpringSessionAttributes;
import dev.turbin.jooqtest.jooq.tables.TechnicalDefect;
import dev.turbin.jooqtest.jooq.tables.UploadedApplicationFile;
import dev.turbin.jooqtest.jooq.tables.UserTask;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaChildRestrictAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaChildRestrictRecord;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaExtraInfoAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaExtraInfoRecord;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaKidsInfoAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaKidsInfoRecord;
import dev.turbin.jooqtest.jooq.tables.records.BackgroundTaskRecord;
import dev.turbin.jooqtest.jooq.tables.records.BatchJobExecutionContextRecord;
import dev.turbin.jooqtest.jooq.tables.records.BatchJobExecutionParamsRecord;
import dev.turbin.jooqtest.jooq.tables.records.BatchJobExecutionRecord;
import dev.turbin.jooqtest.jooq.tables.records.BatchJobInstanceRecord;
import dev.turbin.jooqtest.jooq.tables.records.BatchStepExecutionContextRecord;
import dev.turbin.jooqtest.jooq.tables.records.BatchStepExecutionRecord;
import dev.turbin.jooqtest.jooq.tables.records.ChargeRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreAddressRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreCaseAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreCaseRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreCaseTempRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreCommentAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreCommentRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreContactInfoAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreContactInfoRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreCounterRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreDocumentAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreDocumentRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreFileStorageAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreFileStorageRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreMrcodMessageRecord;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonAddressAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonAddressRecord;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonDocumentAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonDocumentExBirthRecordRecord;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonDocumentRecord;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonHidingRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreProcedureRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreSmevRequestRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreSmevResponseRecord;
import dev.turbin.jooqtest.jooq.tables.records.CoreUploadedApplicationRecord;
import dev.turbin.jooqtest.jooq.tables.records.CorrectionLogRecord;
import dev.turbin.jooqtest.jooq.tables.records.DatabasechangeloglockRecord;
import dev.turbin.jooqtest.jooq.tables.records.DestructionActHistoryRecord;
import dev.turbin.jooqtest.jooq.tables.records.DestructionActRecord;
import dev.turbin.jooqtest.jooq.tables.records.EmploymentAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.EmploymentRecord;
import dev.turbin.jooqtest.jooq.tables.records.ErnErrorRecord;
import dev.turbin.jooqtest.jooq.tables.records.ExportHistorySrcRecord;
import dev.turbin.jooqtest.jooq.tables.records.ExternalInteractionRecord;
import dev.turbin.jooqtest.jooq.tables.records.FileCorrectionLogRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpBaseRestrictAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpBaseRestrictRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCancelRestrictCaseAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCancelRestrictCaseRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseAlterAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseAlterRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseInvalidationAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseInvalidationRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseIssuanceAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseIssuanceRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseIssueRecallAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseIssueRecallRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseLegalPersonAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseLegalPersonRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseLossAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseLossRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseOtherLegalPersonRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseRecallAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseRecallRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseRestrictAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseRestrictRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpChildDataAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpChildDataRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpDecisionAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpDecisionRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpDeclineGetApplicationCaseAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpDeclineGetApplicationCaseRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpEmploymentAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpEmploymentRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpInformalLegalPersonAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpInformalLegalPersonRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonAddressAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonAddressRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonChangeInfoAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonChangeInfoLinkAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonChangeInfoLinkRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonChangeInfoRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonDocumentAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonDocumentRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpPrintRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpRestrictIntervalAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpRestrictIntervalRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpSignalInformationRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpTranslateNameAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpTranslateNameHistoryAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpTranslateNameHistoryRecord;
import dev.turbin.jooqtest.jooq.tables.records.FpTranslateNameRecord;
import dev.turbin.jooqtest.jooq.tables.records.MeasurementRecord;
import dev.turbin.jooqtest.jooq.tables.records.NewBirthPlaceRecord;
import dev.turbin.jooqtest.jooq.tables.records.OrganizationInfoAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.OrganizationInfoRecord;
import dev.turbin.jooqtest.jooq.tables.records.PassLossInfoRecord;
import dev.turbin.jooqtest.jooq.tables.records.PaymentRecord;
import dev.turbin.jooqtest.jooq.tables.records.PersonRoleAuditRecord;
import dev.turbin.jooqtest.jooq.tables.records.PersonRoleRecord;
import dev.turbin.jooqtest.jooq.tables.records.PpotOpenCasesRecord;
import dev.turbin.jooqtest.jooq.tables.records.ShedlockRecord;
import dev.turbin.jooqtest.jooq.tables.records.SpringSessionAttributesRecord;
import dev.turbin.jooqtest.jooq.tables.records.SpringSessionRecord;
import dev.turbin.jooqtest.jooq.tables.records.TechnicalDefectRecord;
import dev.turbin.jooqtest.jooq.tables.records.UploadedApplicationFileRecord;
import dev.turbin.jooqtest.jooq.tables.records.UserTaskRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * passport_international.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AsrpFpaChildRestrictRecord> ASRP_FPA_CHILD_RESTRICT_PK = Internal.createUniqueKey(AsrpFpaChildRestrict.ASRP_FPA_CHILD_RESTRICT, DSL.name("asrp_fpa_child_restrict_pk"), new TableField[] { AsrpFpaChildRestrict.ASRP_FPA_CHILD_RESTRICT.ASRP_FPA_CHILD_RESTRICT_ID }, true);
    public static final UniqueKey<AsrpFpaChildRestrictAuditRecord> ASRP_FPA_CHILD_RESTRICT_AUDIT_PK = Internal.createUniqueKey(AsrpFpaChildRestrictAudit.ASRP_FPA_CHILD_RESTRICT_AUDIT, DSL.name("asrp_fpa_child_restrict_audit_pk"), new TableField[] { AsrpFpaChildRestrictAudit.ASRP_FPA_CHILD_RESTRICT_AUDIT.ID }, true);
    public static final UniqueKey<AsrpFpaExtraInfoRecord> ASRP_FPA_EXTRA_INFO_PKEY = Internal.createUniqueKey(AsrpFpaExtraInfo.ASRP_FPA_EXTRA_INFO, DSL.name("asrp_fpa_extra_info_pkey"), new TableField[] { AsrpFpaExtraInfo.ASRP_FPA_EXTRA_INFO.MIGR_ID }, true);
    public static final UniqueKey<AsrpFpaExtraInfoAuditRecord> ASRP_FPA_EXTRA_INFO_AUDIT_PK = Internal.createUniqueKey(AsrpFpaExtraInfoAudit.ASRP_FPA_EXTRA_INFO_AUDIT, DSL.name("asrp_fpa_extra_info_audit_pk"), new TableField[] { AsrpFpaExtraInfoAudit.ASRP_FPA_EXTRA_INFO_AUDIT.ID }, true);
    public static final UniqueKey<AsrpFpaKidsInfoRecord> ASRP_FPA_KIDS_INFO_PKEY = Internal.createUniqueKey(AsrpFpaKidsInfo.ASRP_FPA_KIDS_INFO, DSL.name("asrp_fpa_kids_info_pkey"), new TableField[] { AsrpFpaKidsInfo.ASRP_FPA_KIDS_INFO.MIGR_ID }, true);
    public static final UniqueKey<AsrpFpaKidsInfoAuditRecord> ASRP_FPA_KIDS_INFO_AUDIT_PK = Internal.createUniqueKey(AsrpFpaKidsInfoAudit.ASRP_FPA_KIDS_INFO_AUDIT, DSL.name("asrp_fpa_kids_info_audit_pk"), new TableField[] { AsrpFpaKidsInfoAudit.ASRP_FPA_KIDS_INFO_AUDIT.ID }, true);
    public static final UniqueKey<BackgroundTaskRecord> BACKGROUND_TASK_PK = Internal.createUniqueKey(BackgroundTask.BACKGROUND_TASK, DSL.name("background_task_pk"), new TableField[] { BackgroundTask.BACKGROUND_TASK.BACKGROUND_TASK_ID }, true);
    public static final UniqueKey<BatchJobExecutionRecord> BATCH_JOB_EXECUTION_PKEY = Internal.createUniqueKey(BatchJobExecution.BATCH_JOB_EXECUTION, DSL.name("batch_job_execution_pkey"), new TableField[] { BatchJobExecution.BATCH_JOB_EXECUTION.JOB_EXECUTION_ID }, true);
    public static final UniqueKey<BatchJobExecutionContextRecord> BATCH_JOB_EXECUTION_CONTEXT_PKEY = Internal.createUniqueKey(BatchJobExecutionContext.BATCH_JOB_EXECUTION_CONTEXT, DSL.name("batch_job_execution_context_pkey"), new TableField[] { BatchJobExecutionContext.BATCH_JOB_EXECUTION_CONTEXT.JOB_EXECUTION_ID }, true);
    public static final UniqueKey<BatchJobInstanceRecord> BATCH_JOB_INSTANCE_PKEY = Internal.createUniqueKey(BatchJobInstance.BATCH_JOB_INSTANCE, DSL.name("batch_job_instance_pkey"), new TableField[] { BatchJobInstance.BATCH_JOB_INSTANCE.JOB_INSTANCE_ID }, true);
    public static final UniqueKey<BatchJobInstanceRecord> JOB_INST_UN = Internal.createUniqueKey(BatchJobInstance.BATCH_JOB_INSTANCE, DSL.name("job_inst_un"), new TableField[] { BatchJobInstance.BATCH_JOB_INSTANCE.JOB_NAME, BatchJobInstance.BATCH_JOB_INSTANCE.JOB_KEY }, true);
    public static final UniqueKey<BatchStepExecutionRecord> BATCH_STEP_EXECUTION_PKEY = Internal.createUniqueKey(BatchStepExecution.BATCH_STEP_EXECUTION, DSL.name("batch_step_execution_pkey"), new TableField[] { BatchStepExecution.BATCH_STEP_EXECUTION.STEP_EXECUTION_ID }, true);
    public static final UniqueKey<BatchStepExecutionContextRecord> BATCH_STEP_EXECUTION_CONTEXT_PKEY = Internal.createUniqueKey(BatchStepExecutionContext.BATCH_STEP_EXECUTION_CONTEXT, DSL.name("batch_step_execution_context_pkey"), new TableField[] { BatchStepExecutionContext.BATCH_STEP_EXECUTION_CONTEXT.STEP_EXECUTION_ID }, true);
    public static final UniqueKey<ChargeRecord> CHARGE_PK = Internal.createUniqueKey(Charge.CHARGE, DSL.name("charge_pk"), new TableField[] { Charge.CHARGE.CHARGE_ID }, true);
    public static final UniqueKey<CoreAddressRecord> CORE_ADDRESS_PK = Internal.createUniqueKey(CoreAddress.CORE_ADDRESS, DSL.name("core_address_pk"), new TableField[] { CoreAddress.CORE_ADDRESS.CORE_ADDRESS_ID }, true);
    public static final UniqueKey<CoreCaseRecord> CORE_CASE_PK = Internal.createUniqueKey(CoreCase.CORE_CASE, DSL.name("core_case_pk"), new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final UniqueKey<CoreCaseAuditRecord> CORE_CASE_AUDIT_PK = Internal.createUniqueKey(CoreCaseAudit.CORE_CASE_AUDIT, DSL.name("core_case_audit_pk"), new TableField[] { CoreCaseAudit.CORE_CASE_AUDIT.ID }, true);
    public static final UniqueKey<CoreCaseTempRecord> CORE_CASE_TEMP_PK = Internal.createUniqueKey(CoreCaseTemp.CORE_CASE_TEMP, DSL.name("core_case_temp_pk"), new TableField[] { CoreCaseTemp.CORE_CASE_TEMP.ID }, true);
    public static final UniqueKey<CoreCommentRecord> CORE_COMMENT_PK = Internal.createUniqueKey(CoreComment.CORE_COMMENT, DSL.name("core_comment_pk"), new TableField[] { CoreComment.CORE_COMMENT.CORE_COMMENT_ID }, true);
    public static final UniqueKey<CoreCommentAuditRecord> CORE_COMMENT_AUDIT_PK = Internal.createUniqueKey(CoreCommentAudit.CORE_COMMENT_AUDIT, DSL.name("core_comment_audit_pk"), new TableField[] { CoreCommentAudit.CORE_COMMENT_AUDIT.ID }, true);
    public static final UniqueKey<CoreContactInfoRecord> CORE_CONTACT_INFO_PK = Internal.createUniqueKey(CoreContactInfo.CORE_CONTACT_INFO, DSL.name("core_contact_info_pk"), new TableField[] { CoreContactInfo.CORE_CONTACT_INFO.CONTACT_INFO_ID }, true);
    public static final UniqueKey<CoreContactInfoAuditRecord> CORE_CONTACT_INFO_AUDIT_PK = Internal.createUniqueKey(CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT, DSL.name("core_contact_info_audit_pk"), new TableField[] { CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.ID }, true);
    public static final UniqueKey<CoreCounterRecord> CORE_COUNTER_PK = Internal.createUniqueKey(CoreCounter.CORE_COUNTER, DSL.name("core_counter_pk"), new TableField[] { CoreCounter.CORE_COUNTER.CORE_COUNTER_ID }, true);
    public static final UniqueKey<CoreCounterRecord> CORE_COUNTER_UQ = Internal.createUniqueKey(CoreCounter.CORE_COUNTER, DSL.name("core_counter_uq"), new TableField[] { CoreCounter.CORE_COUNTER.DEPARTMENT_CODE, CoreCounter.CORE_COUNTER.REGION_CODE, CoreCounter.CORE_COUNTER.OPERATION_CODE }, true);
    public static final UniqueKey<CoreDocumentRecord> CORE_DOCUMENT_95_UQ = Internal.createUniqueKey(CoreDocument.CORE_DOCUMENT, DSL.name("core_document_95_uq"), new TableField[] { CoreDocument.CORE_DOCUMENT.PERSON_ID, CoreDocument.CORE_DOCUMENT.TYPE_ID, CoreDocument.CORE_DOCUMENT.DOC_NO, CoreDocument.CORE_DOCUMENT.SERIES_CODE, CoreDocument.CORE_DOCUMENT.ISSUED_DT, CoreDocument.CORE_DOCUMENT.BIRTH_DT }, true);
    public static final UniqueKey<CoreDocumentRecord> CORE_DOCUMENT_PK = Internal.createUniqueKey(CoreDocument.CORE_DOCUMENT, DSL.name("core_document_pk"), new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final UniqueKey<CoreDocumentAuditRecord> CORE_DOCUMENT_AUDIT_PK = Internal.createUniqueKey(CoreDocumentAudit.CORE_DOCUMENT_AUDIT, DSL.name("core_document_audit_pk"), new TableField[] { CoreDocumentAudit.CORE_DOCUMENT_AUDIT.ID }, true);
    public static final UniqueKey<CoreFileStorageRecord> CORE_FILE_STORAGE_PK = Internal.createUniqueKey(CoreFileStorage.CORE_FILE_STORAGE, DSL.name("core_file_storage_pk"), new TableField[] { CoreFileStorage.CORE_FILE_STORAGE.CORE_FILE_STORAGE_ID }, true);
    public static final UniqueKey<CoreFileStorageAuditRecord> CORE_FILE_STORAGE_AUDIT_PK = Internal.createUniqueKey(CoreFileStorageAudit.CORE_FILE_STORAGE_AUDIT, DSL.name("core_file_storage_audit_pk"), new TableField[] { CoreFileStorageAudit.CORE_FILE_STORAGE_AUDIT.ID }, true);
    public static final UniqueKey<CoreMrcodMessageRecord> CORE_MRCOD_MESSAGE_PK = Internal.createUniqueKey(CoreMrcodMessage.CORE_MRCOD_MESSAGE, DSL.name("core_mrcod_message_pk"), new TableField[] { CoreMrcodMessage.CORE_MRCOD_MESSAGE.MRCOD_MESSAGE_ID }, true);
    public static final UniqueKey<CorePersonAddressRecord> CORE_PERSON_ADDRESS_PK = Internal.createUniqueKey(CorePersonAddress.CORE_PERSON_ADDRESS, DSL.name("core_person_address_pk"), new TableField[] { CorePersonAddress.CORE_PERSON_ADDRESS.CORE_PERSON_ADDRESS_ID }, true);
    public static final UniqueKey<CorePersonAddressAuditRecord> CORE_PERSON_ADDRESS_AUDIT_PK = Internal.createUniqueKey(CorePersonAddressAudit.CORE_PERSON_ADDRESS_AUDIT, DSL.name("core_person_address_audit_pk"), new TableField[] { CorePersonAddressAudit.CORE_PERSON_ADDRESS_AUDIT.ID }, true);
    public static final UniqueKey<CorePersonDocumentRecord> CORE_PERSON_DOCUMENT_ID_PK = Internal.createUniqueKey(CorePersonDocument.CORE_PERSON_DOCUMENT, DSL.name("core_person_document_id_pk"), new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final UniqueKey<CorePersonDocumentAuditRecord> CORE_PERSON_DOCUMENT_AUDIT_PK = Internal.createUniqueKey(CorePersonDocumentAudit.CORE_PERSON_DOCUMENT_AUDIT, DSL.name("core_person_document_audit_pk"), new TableField[] { CorePersonDocumentAudit.CORE_PERSON_DOCUMENT_AUDIT.ID }, true);
    public static final UniqueKey<CorePersonDocumentExBirthRecordRecord> CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD_PK = Internal.createUniqueKey(CorePersonDocumentExBirthRecord.CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD, DSL.name("core_person_document_ex_birth_record_pk"), new TableField[] { CorePersonDocumentExBirthRecord.CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD.CORE_PERSON_DOCUMENT_ID }, true);
    public static final UniqueKey<CorePersonHidingRecord> CORE_PERSON_HIDING_PK = Internal.createUniqueKey(CorePersonHiding.CORE_PERSON_HIDING, DSL.name("core_person_hiding_pk"), new TableField[] { CorePersonHiding.CORE_PERSON_HIDING.CORE_PERSON_HIDING_ID }, true);
    public static final UniqueKey<CoreProcedureRecord> CORE_PROCEDURE_PK = Internal.createUniqueKey(CoreProcedure.CORE_PROCEDURE, DSL.name("core_procedure_pk"), new TableField[] { CoreProcedure.CORE_PROCEDURE.CORE_PROCEDURE_ID }, true);
    public static final UniqueKey<CoreSmevRequestRecord> CORE_SMEV_REQUEST_PK = Internal.createUniqueKey(CoreSmevRequest.CORE_SMEV_REQUEST, DSL.name("core_smev_request_pk"), new TableField[] { CoreSmevRequest.CORE_SMEV_REQUEST.SMEV_REQUEST_ID }, true);
    public static final UniqueKey<CoreSmevResponseRecord> CORE_SMEV_RESPONSE_PK = Internal.createUniqueKey(CoreSmevResponse.CORE_SMEV_RESPONSE, DSL.name("core_smev_response_pk"), new TableField[] { CoreSmevResponse.CORE_SMEV_RESPONSE.SMEV_RESPONSE_ID }, true);
    public static final UniqueKey<CoreUploadedApplicationRecord> CORE_UPLOADED_APPLICATION_PK = Internal.createUniqueKey(CoreUploadedApplication.CORE_UPLOADED_APPLICATION, DSL.name("core_uploaded_application_pk"), new TableField[] { CoreUploadedApplication.CORE_UPLOADED_APPLICATION.CORE_UPLOADED_APPLICATION_ID }, true);
    public static final UniqueKey<CorrectionLogRecord> CORRECTION_LOG_PK = Internal.createUniqueKey(CorrectionLog.CORRECTION_LOG, DSL.name("correction_log_pk"), new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<DestructionActRecord> DESTRUCTION_ACT_PK = Internal.createUniqueKey(DestructionAct.DESTRUCTION_ACT, DSL.name("destruction_act_pk"), new TableField[] { DestructionAct.DESTRUCTION_ACT.DESTRUCTION_ACT_ID }, true);
    public static final UniqueKey<DestructionActHistoryRecord> DESTRUCTION_ACT_HISTORY_PK = Internal.createUniqueKey(DestructionActHistory.DESTRUCTION_ACT_HISTORY, DSL.name("destruction_act_history_pk"), new TableField[] { DestructionActHistory.DESTRUCTION_ACT_HISTORY.DESTRUCTION_ACT_ID, DestructionActHistory.DESTRUCTION_ACT_HISTORY.CORE_DOCUMENT_ID }, true);
    public static final UniqueKey<EmploymentRecord> EMPLOYMENT_PK = Internal.createUniqueKey(Employment.EMPLOYMENT, DSL.name("employment_pk"), new TableField[] { Employment.EMPLOYMENT.EMPLOYMENT_ID }, true);
    public static final UniqueKey<EmploymentAuditRecord> EMPLOYMENT_AUDIT_PK = Internal.createUniqueKey(EmploymentAudit.EMPLOYMENT_AUDIT, DSL.name("employment_audit_pk"), new TableField[] { EmploymentAudit.EMPLOYMENT_AUDIT.ID }, true);
    public static final UniqueKey<ExportHistorySrcRecord> EXPORT_HISTORY_SRC_PK = Internal.createUniqueKey(ExportHistorySrc.EXPORT_HISTORY_SRC, DSL.name("export_history_src_pk"), new TableField[] { ExportHistorySrc.EXPORT_HISTORY_SRC.EXPORT_HISTORY_SRC_ID }, true);
    public static final UniqueKey<ExternalInteractionRecord> EXTERNAL_INTERACTION_PK = Internal.createUniqueKey(ExternalInteraction.EXTERNAL_INTERACTION, DSL.name("external_interaction_pk"), new TableField[] { ExternalInteraction.EXTERNAL_INTERACTION.EXTERNAL_INTERACTION_ID }, true);
    public static final UniqueKey<FileCorrectionLogRecord> FILE_CORRECTION_LOG_PK = Internal.createUniqueKey(FileCorrectionLog.FILE_CORRECTION_LOG, DSL.name("file_correction_log_pk"), new TableField[] { FileCorrectionLog.FILE_CORRECTION_LOG.FILE_CORRECTION_LOG_ID }, true);
    public static final UniqueKey<FpBaseRestrictRecord> FP_BASE_RESTRICT_PK = Internal.createUniqueKey(FpBaseRestrict.FP_BASE_RESTRICT, DSL.name("fp_base_restrict_pk"), new TableField[] { FpBaseRestrict.FP_BASE_RESTRICT.FP_BASE_RESTRICT_ID }, true);
    public static final UniqueKey<FpBaseRestrictAuditRecord> FP_BASE_RESTRICT_AUDIT_PK = Internal.createUniqueKey(FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT, DSL.name("fp_base_restrict_audit_pk"), new TableField[] { FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.ID }, true);
    public static final UniqueKey<FpCancelRestrictCaseRecord> FP_CANCEL_RESTRICT_CASE_PK = Internal.createUniqueKey(FpCancelRestrictCase.FP_CANCEL_RESTRICT_CASE, DSL.name("fp_cancel_restrict_case_pk"), new TableField[] { FpCancelRestrictCase.FP_CANCEL_RESTRICT_CASE.CANCEL_RESTRICT_ID }, true);
    public static final UniqueKey<FpCancelRestrictCaseAuditRecord> FP_CANCEL_RESTRICT_CASE_AUDIT_PK = Internal.createUniqueKey(FpCancelRestrictCaseAudit.FP_CANCEL_RESTRICT_CASE_AUDIT, DSL.name("fp_cancel_restrict_case_audit_pk"), new TableField[] { FpCancelRestrictCaseAudit.FP_CANCEL_RESTRICT_CASE_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseRecord> PK_FP_CASE = Internal.createUniqueKey(FpCase.FP_CASE, DSL.name("pk_fp_case"), new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final UniqueKey<FpCaseAlterRecord> PK_FP_CASE_ALTER = Internal.createUniqueKey(FpCaseAlter.FP_CASE_ALTER, DSL.name("pk_fp_case_alter"), new TableField[] { FpCaseAlter.FP_CASE_ALTER.ALTER_ID }, true);
    public static final UniqueKey<FpCaseAlterAuditRecord> FP_CASE_ALTER_AUDIT_AUDIT_PK = Internal.createUniqueKey(FpCaseAlterAudit.FP_CASE_ALTER_AUDIT, DSL.name("fp_case_alter_audit_audit_pk"), new TableField[] { FpCaseAlterAudit.FP_CASE_ALTER_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseAuditRecord> FP_CASE_AUDIT_PK = Internal.createUniqueKey(FpCaseAudit.FP_CASE_AUDIT, DSL.name("fp_case_audit_pk"), new TableField[] { FpCaseAudit.FP_CASE_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseInvalidationRecord> PK_FP_CASE_INV = Internal.createUniqueKey(FpCaseInvalidation.FP_CASE_INVALIDATION, DSL.name("pk_fp_case_inv"), new TableField[] { FpCaseInvalidation.FP_CASE_INVALIDATION.INV_ID }, true);
    public static final UniqueKey<FpCaseInvalidationAuditRecord> FP_CASE_INVALIDATION_AUDIT_PK = Internal.createUniqueKey(FpCaseInvalidationAudit.FP_CASE_INVALIDATION_AUDIT, DSL.name("fp_case_invalidation_audit_pk"), new TableField[] { FpCaseInvalidationAudit.FP_CASE_INVALIDATION_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseIssuanceRecord> PK_FP_CASE_ISSUANCE = Internal.createUniqueKey(FpCaseIssuance.FP_CASE_ISSUANCE, DSL.name("pk_fp_case_issuance"), new TableField[] { FpCaseIssuance.FP_CASE_ISSUANCE.ISSUANCE_ID }, true);
    public static final UniqueKey<FpCaseIssuanceAuditRecord> FP_CASE_ISSUANCE_AUDIT_PK = Internal.createUniqueKey(FpCaseIssuanceAudit.FP_CASE_ISSUANCE_AUDIT, DSL.name("fp_case_issuance_audit_pk"), new TableField[] { FpCaseIssuanceAudit.FP_CASE_ISSUANCE_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseIssueRecallRecord> PK_FP_CASE_ISS_RECALL = Internal.createUniqueKey(FpCaseIssueRecall.FP_CASE_ISSUE_RECALL, DSL.name("pk_fp_case_iss_recall"), new TableField[] { FpCaseIssueRecall.FP_CASE_ISSUE_RECALL.ISSUE_RECALL_ID }, true);
    public static final UniqueKey<FpCaseIssueRecallAuditRecord> FP_CASE_ISSUE_RECALL_AUDIT_PK = Internal.createUniqueKey(FpCaseIssueRecallAudit.FP_CASE_ISSUE_RECALL_AUDIT, DSL.name("fp_case_issue_recall_audit_pk"), new TableField[] { FpCaseIssueRecallAudit.FP_CASE_ISSUE_RECALL_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseLegalPersonRecord> FP_CASE_LEGAL_PERSON_PK = Internal.createUniqueKey(FpCaseLegalPerson.FP_CASE_LEGAL_PERSON, DSL.name("fp_case_legal_person_pk"), new TableField[] { FpCaseLegalPerson.FP_CASE_LEGAL_PERSON.FP_CASE_ID, FpCaseLegalPerson.FP_CASE_LEGAL_PERSON.CORE_PERSON_DOCUMENT_ID }, true);
    public static final UniqueKey<FpCaseLegalPersonAuditRecord> FP_CASE_LEGAL_PERSON_AUDIT_PK = Internal.createUniqueKey(FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT, DSL.name("fp_case_legal_person_audit_pk"), new TableField[] { FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseLossRecord> PK_FP_CASE_LOSS = Internal.createUniqueKey(FpCaseLoss.FP_CASE_LOSS, DSL.name("pk_fp_case_loss"), new TableField[] { FpCaseLoss.FP_CASE_LOSS.LOSS_ID }, true);
    public static final UniqueKey<FpCaseLossAuditRecord> FP_CASE_LOSS_AUDIT_PK = Internal.createUniqueKey(FpCaseLossAudit.FP_CASE_LOSS_AUDIT, DSL.name("fp_case_loss_audit_pk"), new TableField[] { FpCaseLossAudit.FP_CASE_LOSS_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseRecallRecord> PK_FP_CASE_RECALL = Internal.createUniqueKey(FpCaseRecall.FP_CASE_RECALL, DSL.name("pk_fp_case_recall"), new TableField[] { FpCaseRecall.FP_CASE_RECALL.RECALL_ID }, true);
    public static final UniqueKey<FpCaseRecallAuditRecord> FP_CASE_RECALL_AUDIT_PK = Internal.createUniqueKey(FpCaseRecallAudit.FP_CASE_RECALL_AUDIT, DSL.name("fp_case_recall_audit_pk"), new TableField[] { FpCaseRecallAudit.FP_CASE_RECALL_AUDIT.ID }, true);
    public static final UniqueKey<FpCaseRestrictRecord> PK_FP_CASE_RESTRICT = Internal.createUniqueKey(FpCaseRestrict.FP_CASE_RESTRICT, DSL.name("pk_fp_case_restrict"), new TableField[] { FpCaseRestrict.FP_CASE_RESTRICT.RESTRICT_ID }, true);
    public static final UniqueKey<FpCaseRestrictAuditRecord> FP_CASE_RESTRICT_AUDIT_PK = Internal.createUniqueKey(FpCaseRestrictAudit.FP_CASE_RESTRICT_AUDIT, DSL.name("fp_case_restrict_audit_pk"), new TableField[] { FpCaseRestrictAudit.FP_CASE_RESTRICT_AUDIT.ID }, true);
    public static final UniqueKey<FpChildDataRecord> PK_FP_CHILD_DATA = Internal.createUniqueKey(FpChildData.FP_CHILD_DATA, DSL.name("pk_fp_child_data"), new TableField[] { FpChildData.FP_CHILD_DATA.FP_CHILD_DATA_ID }, true);
    public static final UniqueKey<FpChildDataAuditRecord> FP_CHILD_DATA_AUDIT_PK = Internal.createUniqueKey(FpChildDataAudit.FP_CHILD_DATA_AUDIT, DSL.name("fp_child_data_audit_pk"), new TableField[] { FpChildDataAudit.FP_CHILD_DATA_AUDIT.ID }, true);
    public static final UniqueKey<FpDecisionRecord> PK_FP_DECISION = Internal.createUniqueKey(FpDecision.FP_DECISION, DSL.name("pk_fp_decision"), new TableField[] { FpDecision.FP_DECISION.DECISION_ID }, true);
    public static final UniqueKey<FpDecisionAuditRecord> FP_DECISION_AUDIT_PK = Internal.createUniqueKey(FpDecisionAudit.FP_DECISION_AUDIT, DSL.name("fp_decision_audit_pk"), new TableField[] { FpDecisionAudit.FP_DECISION_AUDIT.ID }, true);
    public static final UniqueKey<FpDeclineGetApplicationCaseRecord> FP_DECLINE_GET_APPLICATION_CASE_ID_PK = Internal.createUniqueKey(FpDeclineGetApplicationCase.FP_DECLINE_GET_APPLICATION_CASE, DSL.name("fp_decline_get_application_case_id_pk"), new TableField[] { FpDeclineGetApplicationCase.FP_DECLINE_GET_APPLICATION_CASE.FP_DECLINE_GET_APPLICATION_CASE_ID }, true);
    public static final UniqueKey<FpDeclineGetApplicationCaseAuditRecord> FP_DECLINE_GET_APPLICATION_CASE_AUDIT_PK = Internal.createUniqueKey(FpDeclineGetApplicationCaseAudit.FP_DECLINE_GET_APPLICATION_CASE_AUDIT, DSL.name("fp_decline_get_application_case_audit_pk"), new TableField[] { FpDeclineGetApplicationCaseAudit.FP_DECLINE_GET_APPLICATION_CASE_AUDIT.ID }, true);
    public static final UniqueKey<FpEmploymentRecord> FP_EMPLOYMENT_PK = Internal.createUniqueKey(FpEmployment.FP_EMPLOYMENT, DSL.name("fp_employment_pk"), new TableField[] { FpEmployment.FP_EMPLOYMENT.ID }, true);
    public static final UniqueKey<FpEmploymentAuditRecord> FP_EMPLOYMENT_AUDIT_PK = Internal.createUniqueKey(FpEmploymentAudit.FP_EMPLOYMENT_AUDIT, DSL.name("fp_employment_audit_pk"), new TableField[] { FpEmploymentAudit.FP_EMPLOYMENT_AUDIT.ID }, true);
    public static final UniqueKey<FpInformalLegalPersonRecord> FP_INFORMAL_LEGAL_PERSON_PK = Internal.createUniqueKey(FpInformalLegalPerson.FP_INFORMAL_LEGAL_PERSON, DSL.name("fp_informal_legal_person_pk"), new TableField[] { FpInformalLegalPerson.FP_INFORMAL_LEGAL_PERSON.FP_INFORMAL_LEGAL_PERSON_ID }, true);
    public static final UniqueKey<FpInformalLegalPersonAuditRecord> FP_INFORMAL_LEGAL_PERSON_AUDIT_PK = Internal.createUniqueKey(FpInformalLegalPersonAudit.FP_INFORMAL_LEGAL_PERSON_AUDIT, DSL.name("fp_informal_legal_person_audit_pk"), new TableField[] { FpInformalLegalPersonAudit.FP_INFORMAL_LEGAL_PERSON_AUDIT.ID }, true);
    public static final UniqueKey<FpPersonAddressRecord> FP_PERSON_ADDRESS_PKEY = Internal.createUniqueKey(FpPersonAddress.FP_PERSON_ADDRESS, DSL.name("fp_person_address_pkey"), new TableField[] { FpPersonAddress.FP_PERSON_ADDRESS.FP_PERSON_ADDRESS_ID }, true);
    public static final UniqueKey<FpPersonAddressAuditRecord> FP_PERSON_ADDRESS_AUDIT_PK = Internal.createUniqueKey(FpPersonAddressAudit.FP_PERSON_ADDRESS_AUDIT, DSL.name("fp_person_address_audit_pk"), new TableField[] { FpPersonAddressAudit.FP_PERSON_ADDRESS_AUDIT.ID }, true);
    public static final UniqueKey<FpPersonChangeInfoRecord> FP_PERSON_CHANGE_INFO_PK = Internal.createUniqueKey(FpPersonChangeInfo.FP_PERSON_CHANGE_INFO, DSL.name("fp_person_change_info_pk"), new TableField[] { FpPersonChangeInfo.FP_PERSON_CHANGE_INFO.PERSON_INFO_CHANGE_ID }, true);
    public static final UniqueKey<FpPersonChangeInfoAuditRecord> FP_PERSON_CHANGE_INFO_AUDIT_PK = Internal.createUniqueKey(FpPersonChangeInfoAudit.FP_PERSON_CHANGE_INFO_AUDIT, DSL.name("fp_person_change_info_audit_pk"), new TableField[] { FpPersonChangeInfoAudit.FP_PERSON_CHANGE_INFO_AUDIT.ID }, true);
    public static final UniqueKey<FpPersonChangeInfoLinkRecord> FP_PERSON_CHANGE_INFO_LINK_PK = Internal.createUniqueKey(FpPersonChangeInfoLink.FP_PERSON_CHANGE_INFO_LINK, DSL.name("fp_person_change_info_link_pk"), new TableField[] { FpPersonChangeInfoLink.FP_PERSON_CHANGE_INFO_LINK.PERSON_INFO_CHANGE_LINK_ID }, true);
    public static final UniqueKey<FpPersonChangeInfoLinkAuditRecord> FP_PERSON_CHANGE_INFO_LINK_AUDIT_PK = Internal.createUniqueKey(FpPersonChangeInfoLinkAudit.FP_PERSON_CHANGE_INFO_LINK_AUDIT, DSL.name("fp_person_change_info_link_audit_pk"), new TableField[] { FpPersonChangeInfoLinkAudit.FP_PERSON_CHANGE_INFO_LINK_AUDIT.ID }, true);
    public static final UniqueKey<FpPersonDocumentRecord> FP_PERSON_DOCUMENT_PK = Internal.createUniqueKey(FpPersonDocument.FP_PERSON_DOCUMENT, DSL.name("fp_person_document_pk"), new TableField[] { FpPersonDocument.FP_PERSON_DOCUMENT.FPA_PERSON_DOCUMENT_ID }, true);
    public static final UniqueKey<FpPersonDocumentAuditRecord> FP_PERSON_DOCUMENT_AUDIT_PK = Internal.createUniqueKey(FpPersonDocumentAudit.FP_PERSON_DOCUMENT_AUDIT, DSL.name("fp_person_document_audit_pk"), new TableField[] { FpPersonDocumentAudit.FP_PERSON_DOCUMENT_AUDIT.ID }, true);
    public static final UniqueKey<FpPrintRecord> FP_PRINT_PKEY = Internal.createUniqueKey(FpPrint.FP_PRINT, DSL.name("fp_print_pkey"), new TableField[] { FpPrint.FP_PRINT.CORE_CASE_ID }, true);
    public static final UniqueKey<FpRestrictIntervalRecord> FP_RESTRICT_INTERVAL_PK = Internal.createUniqueKey(FpRestrictInterval.FP_RESTRICT_INTERVAL, DSL.name("fp_restrict_interval_pk"), new TableField[] { FpRestrictInterval.FP_RESTRICT_INTERVAL.FP_RESTRICT_INTERVAL_ID }, true);
    public static final UniqueKey<FpRestrictIntervalAuditRecord> FP_RESTRICT_INTERVAL_AUDIT_PK = Internal.createUniqueKey(FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT, DSL.name("fp_restrict_interval_audit_pk"), new TableField[] { FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.ID }, true);
    public static final UniqueKey<FpSignalInformationRecord> FP_SIGNAL_INFORMATION_PKEY = Internal.createUniqueKey(FpSignalInformation.FP_SIGNAL_INFORMATION, DSL.name("fp_signal_information_pkey"), new TableField[] { FpSignalInformation.FP_SIGNAL_INFORMATION.CORRELATION_ID }, true);
    public static final UniqueKey<FpTranslateNameRecord> FP_TRANSLATE_NAME_PERSON_ID_KEY = Internal.createUniqueKey(FpTranslateName.FP_TRANSLATE_NAME, DSL.name("fp_translate_name_person_id_key"), new TableField[] { FpTranslateName.FP_TRANSLATE_NAME.PERSON_ID }, true);
    public static final UniqueKey<FpTranslateNameRecord> FP_TRANSLATE_NAME_PK = Internal.createUniqueKey(FpTranslateName.FP_TRANSLATE_NAME, DSL.name("fp_translate_name_pk"), new TableField[] { FpTranslateName.FP_TRANSLATE_NAME.TRANSLATE_NAME_ID }, true);
    public static final UniqueKey<FpTranslateNameAuditRecord> FP_TRANSLATE_NAME_AUDIT_PK = Internal.createUniqueKey(FpTranslateNameAudit.FP_TRANSLATE_NAME_AUDIT, DSL.name("fp_translate_name_audit_pk"), new TableField[] { FpTranslateNameAudit.FP_TRANSLATE_NAME_AUDIT.ID }, true);
    public static final UniqueKey<FpTranslateNameHistoryRecord> FP_TRANSLATE_NAME_HISTORY_PK = Internal.createUniqueKey(FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY, DSL.name("fp_translate_name_history_pk"), new TableField[] { FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY.FP_CASE_ID, FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY.TRANSLATE_NAME_ID }, true);
    public static final UniqueKey<FpTranslateNameHistoryAuditRecord> FP_TRANSLATE_NAME_HISTORY_AUDIT_PK = Internal.createUniqueKey(FpTranslateNameHistoryAudit.FP_TRANSLATE_NAME_HISTORY_AUDIT, DSL.name("fp_translate_name_history_audit_pk"), new TableField[] { FpTranslateNameHistoryAudit.FP_TRANSLATE_NAME_HISTORY_AUDIT.ID }, true);
    public static final UniqueKey<MeasurementRecord> MEASUREMENT_PK = Internal.createUniqueKey(Measurement.MEASUREMENT, DSL.name("measurement_pk"), new TableField[] { Measurement.MEASUREMENT.ID }, true);
    public static final UniqueKey<NewBirthPlaceRecord> NEW_BIRTH_PLACE_PKEY = Internal.createUniqueKey(NewBirthPlace.NEW_BIRTH_PLACE, DSL.name("new_birth_place_pkey"), new TableField[] { NewBirthPlace.NEW_BIRTH_PLACE.NEW_BIRTH_PLACE_ID }, true);
    public static final UniqueKey<OrganizationInfoRecord> ORGANIZATION_INFO_PK = Internal.createUniqueKey(OrganizationInfo.ORGANIZATION_INFO, DSL.name("organization_info_pk"), new TableField[] { OrganizationInfo.ORGANIZATION_INFO.ORGANIZATION_INFO_ID }, true);
    public static final UniqueKey<OrganizationInfoAuditRecord> ORGANIZATION_INFO_AUDIT_PK = Internal.createUniqueKey(OrganizationInfoAudit.ORGANIZATION_INFO_AUDIT, DSL.name("organization_info_audit_pk"), new TableField[] { OrganizationInfoAudit.ORGANIZATION_INFO_AUDIT.ID }, true);
    public static final UniqueKey<PassLossInfoRecord> PASS_LOSS_INFO_PKEY = Internal.createUniqueKey(PassLossInfo.PASS_LOSS_INFO, DSL.name("pass_loss_info_pkey"), new TableField[] { PassLossInfo.PASS_LOSS_INFO.ID }, true);
    public static final UniqueKey<PaymentRecord> PAYMENT_PK = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("payment_pk"), new TableField[] { Payment.PAYMENT.PAYMENT_ID }, true);
    public static final UniqueKey<PersonRoleRecord> PERSON_ROLE_PK = Internal.createUniqueKey(PersonRole.PERSON_ROLE, DSL.name("person_role_pk"), new TableField[] { PersonRole.PERSON_ROLE.PERSON_ROLE_ID }, true);
    public static final UniqueKey<PersonRoleAuditRecord> PERSON_ROLE_AUDIT_PK = Internal.createUniqueKey(PersonRoleAudit.PERSON_ROLE_AUDIT, DSL.name("person_role_audit_pk"), new TableField[] { PersonRoleAudit.PERSON_ROLE_AUDIT.ID }, true);
    public static final UniqueKey<PpotOpenCasesRecord> PPOT_OPEN_CASE_ID_PK = Internal.createUniqueKey(PpotOpenCases.PPOT_OPEN_CASES, DSL.name("ppot_open_case_id_pk"), new TableField[] { PpotOpenCases.PPOT_OPEN_CASES.PPOT_OPEN_CASE_ID }, true);
    public static final UniqueKey<ShedlockRecord> SHEDLOCK_PKEY = Internal.createUniqueKey(Shedlock.SHEDLOCK, DSL.name("shedlock_pkey"), new TableField[] { Shedlock.SHEDLOCK.NAME }, true);
    public static final UniqueKey<SpringSessionRecord> SPRING_SESSION_PK = Internal.createUniqueKey(SpringSession.SPRING_SESSION, DSL.name("spring_session_pk"), new TableField[] { SpringSession.SPRING_SESSION.PRIMARY_ID }, true);
    public static final UniqueKey<SpringSessionAttributesRecord> SPRING_SESSION_ATTRIBUTES_PK = Internal.createUniqueKey(SpringSessionAttributes.SPRING_SESSION_ATTRIBUTES, DSL.name("spring_session_attributes_pk"), new TableField[] { SpringSessionAttributes.SPRING_SESSION_ATTRIBUTES.SESSION_PRIMARY_ID, SpringSessionAttributes.SPRING_SESSION_ATTRIBUTES.ATTRIBUTE_NAME }, true);
    public static final UniqueKey<TechnicalDefectRecord> TECHNICAL_DEFECT_PKEY = Internal.createUniqueKey(TechnicalDefect.TECHNICAL_DEFECT, DSL.name("technical_defect_pkey"), new TableField[] { TechnicalDefect.TECHNICAL_DEFECT.DEFECT_ID }, true);
    public static final UniqueKey<UploadedApplicationFileRecord> UPLOADED_APPLICATION_FILE_PK = Internal.createUniqueKey(UploadedApplicationFile.UPLOADED_APPLICATION_FILE, DSL.name("uploaded_application_file_pk"), new TableField[] { UploadedApplicationFile.UPLOADED_APPLICATION_FILE.UPLOADED_APPLICATION_FILE_ID }, true);
    public static final UniqueKey<UserTaskRecord> PK_USER_TASK = Internal.createUniqueKey(UserTask.USER_TASK, DSL.name("pk_user_task"), new TableField[] { UserTask.USER_TASK.TASK_UID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AsrpFpaChildRestrictAuditRecord, CorrectionLogRecord> ASRP_FPA_CHILD_RESTRICT_AUDIT__ASRP_FPA_CHILD_RESTRICT_CORRECTION_LOG_FK = Internal.createForeignKey(AsrpFpaChildRestrictAudit.ASRP_FPA_CHILD_RESTRICT_AUDIT, DSL.name("asrp_fpa_child_restrict_correction_log_fk"), new TableField[] { AsrpFpaChildRestrictAudit.ASRP_FPA_CHILD_RESTRICT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<AsrpFpaChildRestrictAuditRecord, AsrpFpaChildRestrictRecord> ASRP_FPA_CHILD_RESTRICT_AUDIT__ASRP_FPA_CHILD_RESTRICT_REF_FK = Internal.createForeignKey(AsrpFpaChildRestrictAudit.ASRP_FPA_CHILD_RESTRICT_AUDIT, DSL.name("asrp_fpa_child_restrict_ref_fk"), new TableField[] { AsrpFpaChildRestrictAudit.ASRP_FPA_CHILD_RESTRICT_AUDIT.RECORD_ID }, Keys.ASRP_FPA_CHILD_RESTRICT_PK, new TableField[] { AsrpFpaChildRestrict.ASRP_FPA_CHILD_RESTRICT.ASRP_FPA_CHILD_RESTRICT_ID }, true);
    public static final ForeignKey<AsrpFpaExtraInfoAuditRecord, CorrectionLogRecord> ASRP_FPA_EXTRA_INFO_AUDIT__ASRP_FPA_EXTRA_INFO_CORRECTION_LOG_FK = Internal.createForeignKey(AsrpFpaExtraInfoAudit.ASRP_FPA_EXTRA_INFO_AUDIT, DSL.name("asrp_fpa_extra_info_correction_log_fk"), new TableField[] { AsrpFpaExtraInfoAudit.ASRP_FPA_EXTRA_INFO_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<AsrpFpaExtraInfoAuditRecord, AsrpFpaExtraInfoRecord> ASRP_FPA_EXTRA_INFO_AUDIT__ASRP_FPA_EXTRA_INFO_REF_FK = Internal.createForeignKey(AsrpFpaExtraInfoAudit.ASRP_FPA_EXTRA_INFO_AUDIT, DSL.name("asrp_fpa_extra_info_ref_fk"), new TableField[] { AsrpFpaExtraInfoAudit.ASRP_FPA_EXTRA_INFO_AUDIT.RECORD_ID }, Keys.ASRP_FPA_EXTRA_INFO_PKEY, new TableField[] { AsrpFpaExtraInfo.ASRP_FPA_EXTRA_INFO.MIGR_ID }, true);
    public static final ForeignKey<AsrpFpaKidsInfoAuditRecord, CorrectionLogRecord> ASRP_FPA_KIDS_INFO_AUDIT__ASRP_FPA_KIDS_INFO_CORRECTION_LOG_FK = Internal.createForeignKey(AsrpFpaKidsInfoAudit.ASRP_FPA_KIDS_INFO_AUDIT, DSL.name("asrp_fpa_kids_info_correction_log_fk"), new TableField[] { AsrpFpaKidsInfoAudit.ASRP_FPA_KIDS_INFO_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<AsrpFpaKidsInfoAuditRecord, AsrpFpaKidsInfoRecord> ASRP_FPA_KIDS_INFO_AUDIT__ASRP_FPA_KIDS_INFO_REF_FK = Internal.createForeignKey(AsrpFpaKidsInfoAudit.ASRP_FPA_KIDS_INFO_AUDIT, DSL.name("asrp_fpa_kids_info_ref_fk"), new TableField[] { AsrpFpaKidsInfoAudit.ASRP_FPA_KIDS_INFO_AUDIT.RECORD_ID }, Keys.ASRP_FPA_KIDS_INFO_PKEY, new TableField[] { AsrpFpaKidsInfo.ASRP_FPA_KIDS_INFO.MIGR_ID }, true);
    public static final ForeignKey<BatchJobExecutionRecord, BatchJobInstanceRecord> BATCH_JOB_EXECUTION__JOB_INST_EXEC_FK = Internal.createForeignKey(BatchJobExecution.BATCH_JOB_EXECUTION, DSL.name("job_inst_exec_fk"), new TableField[] { BatchJobExecution.BATCH_JOB_EXECUTION.JOB_INSTANCE_ID }, Keys.BATCH_JOB_INSTANCE_PKEY, new TableField[] { BatchJobInstance.BATCH_JOB_INSTANCE.JOB_INSTANCE_ID }, true);
    public static final ForeignKey<BatchJobExecutionContextRecord, BatchJobExecutionRecord> BATCH_JOB_EXECUTION_CONTEXT__JOB_EXEC_CTX_FK = Internal.createForeignKey(BatchJobExecutionContext.BATCH_JOB_EXECUTION_CONTEXT, DSL.name("job_exec_ctx_fk"), new TableField[] { BatchJobExecutionContext.BATCH_JOB_EXECUTION_CONTEXT.JOB_EXECUTION_ID }, Keys.BATCH_JOB_EXECUTION_PKEY, new TableField[] { BatchJobExecution.BATCH_JOB_EXECUTION.JOB_EXECUTION_ID }, true);
    public static final ForeignKey<BatchJobExecutionParamsRecord, BatchJobExecutionRecord> BATCH_JOB_EXECUTION_PARAMS__JOB_EXEC_PARAMS_FK = Internal.createForeignKey(BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS, DSL.name("job_exec_params_fk"), new TableField[] { BatchJobExecutionParams.BATCH_JOB_EXECUTION_PARAMS.JOB_EXECUTION_ID }, Keys.BATCH_JOB_EXECUTION_PKEY, new TableField[] { BatchJobExecution.BATCH_JOB_EXECUTION.JOB_EXECUTION_ID }, true);
    public static final ForeignKey<BatchStepExecutionRecord, BatchJobExecutionRecord> BATCH_STEP_EXECUTION__JOB_EXEC_STEP_FK = Internal.createForeignKey(BatchStepExecution.BATCH_STEP_EXECUTION, DSL.name("job_exec_step_fk"), new TableField[] { BatchStepExecution.BATCH_STEP_EXECUTION.JOB_EXECUTION_ID }, Keys.BATCH_JOB_EXECUTION_PKEY, new TableField[] { BatchJobExecution.BATCH_JOB_EXECUTION.JOB_EXECUTION_ID }, true);
    public static final ForeignKey<BatchStepExecutionContextRecord, BatchStepExecutionRecord> BATCH_STEP_EXECUTION_CONTEXT__STEP_EXEC_CTX_FK = Internal.createForeignKey(BatchStepExecutionContext.BATCH_STEP_EXECUTION_CONTEXT, DSL.name("step_exec_ctx_fk"), new TableField[] { BatchStepExecutionContext.BATCH_STEP_EXECUTION_CONTEXT.STEP_EXECUTION_ID }, Keys.BATCH_STEP_EXECUTION_PKEY, new TableField[] { BatchStepExecution.BATCH_STEP_EXECUTION.STEP_EXECUTION_ID }, true);
    public static final ForeignKey<ChargeRecord, CoreCaseRecord> CHARGE__CHARGE_CASE_ID_FK = Internal.createForeignKey(Charge.CHARGE, DSL.name("charge_case_id_fk"), new TableField[] { Charge.CHARGE.CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CoreCaseRecord, CoreCaseRecord> CORE_CASE__CORE_CASE_SELF_PARENTID_FK = Internal.createForeignKey(CoreCase.CORE_CASE, DSL.name("core_case_self_parentid_fk"), new TableField[] { CoreCase.CORE_CASE.PARENT_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CoreCaseRecord, CorePersonDocumentRecord> CORE_CASE__PERSON_DOCUMENT_ID_FK = Internal.createForeignKey(CoreCase.CORE_CASE, DSL.name("person_document_id_fk"), new TableField[] { CoreCase.CORE_CASE.PERSON_DOCUMENT_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<CoreCaseAuditRecord, CorrectionLogRecord> CORE_CASE_AUDIT__CORE_CASE_CORRECTION_LOG_FK = Internal.createForeignKey(CoreCaseAudit.CORE_CASE_AUDIT, DSL.name("core_case_correction_log_fk"), new TableField[] { CoreCaseAudit.CORE_CASE_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<CoreCaseAuditRecord, CoreCaseRecord> CORE_CASE_AUDIT__CORE_CASE_REF_FK = Internal.createForeignKey(CoreCaseAudit.CORE_CASE_AUDIT, DSL.name("core_case_ref_fk"), new TableField[] { CoreCaseAudit.CORE_CASE_AUDIT.RECORD_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CoreCommentAuditRecord, CorrectionLogRecord> CORE_COMMENT_AUDIT__CORE_COMMENT_AUDIT_CORRECTION_LOG_FK = Internal.createForeignKey(CoreCommentAudit.CORE_COMMENT_AUDIT, DSL.name("core_comment_audit_correction_log_fk"), new TableField[] { CoreCommentAudit.CORE_COMMENT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<CoreCommentAuditRecord, CoreCommentRecord> CORE_COMMENT_AUDIT__CORE_COMMENT_AUDIT_FK = Internal.createForeignKey(CoreCommentAudit.CORE_COMMENT_AUDIT, DSL.name("core_comment_audit_fk"), new TableField[] { CoreCommentAudit.CORE_COMMENT_AUDIT.RECORD_ID }, Keys.CORE_COMMENT_PK, new TableField[] { CoreComment.CORE_COMMENT.CORE_COMMENT_ID }, true);
    public static final ForeignKey<CoreContactInfoRecord, CorePersonDocumentRecord> CORE_CONTACT_INFO__CORE_CONTACT_INFO_CORE_PERSON_DOCUMENT_ID_FK = Internal.createForeignKey(CoreContactInfo.CORE_CONTACT_INFO, DSL.name("core_contact_info_core_person_document_id_fk"), new TableField[] { CoreContactInfo.CORE_CONTACT_INFO.CORE_PERSON_DOCUMENT_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<CoreContactInfoAuditRecord, CorrectionLogRecord> CORE_CONTACT_INFO_AUDIT__CORE_CONTACT_INFO_AUDIT_CORRECTION_LOG_FK = Internal.createForeignKey(CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT, DSL.name("core_contact_info_audit_correction_log_fk"), new TableField[] { CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<CoreContactInfoAuditRecord, CoreContactInfoRecord> CORE_CONTACT_INFO_AUDIT__CORE_CONTACT_INFO_AUDIT_FK = Internal.createForeignKey(CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT, DSL.name("core_contact_info_audit_fk"), new TableField[] { CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.RECORD_ID }, Keys.CORE_CONTACT_INFO_PK, new TableField[] { CoreContactInfo.CORE_CONTACT_INFO.CONTACT_INFO_ID }, true);
    public static final ForeignKey<CoreDocumentRecord, CoreCaseRecord> CORE_DOCUMENT__CORE_DOCUMENT_CORE_CASE_FK = Internal.createForeignKey(CoreDocument.CORE_DOCUMENT, DSL.name("core_document_core_case_fk"), new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CoreDocumentRecord, CoreDocumentRecord> CORE_DOCUMENT__CORE_DOCUMENT_CORE_DOCUMENT_FK = Internal.createForeignKey(CoreDocument.CORE_DOCUMENT, DSL.name("core_document_core_document_fk"), new TableField[] { CoreDocument.CORE_DOCUMENT.NEW_DOCUMENT_ID }, Keys.CORE_DOCUMENT_PK, new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final ForeignKey<CoreDocumentRecord, CorePersonDocumentRecord> CORE_DOCUMENT__CORE_DOCUMENT_CORE_PERSON_DOCUMENT_FK = Internal.createForeignKey(CoreDocument.CORE_DOCUMENT, DSL.name("core_document_core_person_document_fk"), new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<CoreDocumentRecord, DestructionActRecord> CORE_DOCUMENT__CORE_DOCUMENT_DESTRUCTION_ACT_FK = Internal.createForeignKey(CoreDocument.CORE_DOCUMENT, DSL.name("core_document_destruction_act_fk"), new TableField[] { CoreDocument.CORE_DOCUMENT.DESTRUCTION_ACT_ID }, Keys.DESTRUCTION_ACT_PK, new TableField[] { DestructionAct.DESTRUCTION_ACT.DESTRUCTION_ACT_ID }, true);
    public static final ForeignKey<CoreDocumentAuditRecord, CorrectionLogRecord> CORE_DOCUMENT_AUDIT__CORE_DOCUMENT_AUDIT_CORRECTION_LOG_FK = Internal.createForeignKey(CoreDocumentAudit.CORE_DOCUMENT_AUDIT, DSL.name("core_document_audit_correction_log_fk"), new TableField[] { CoreDocumentAudit.CORE_DOCUMENT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<CoreDocumentAuditRecord, CoreDocumentRecord> CORE_DOCUMENT_AUDIT__CORE_DOCUMENT_AUDIT_FK = Internal.createForeignKey(CoreDocumentAudit.CORE_DOCUMENT_AUDIT, DSL.name("core_document_audit_fk"), new TableField[] { CoreDocumentAudit.CORE_DOCUMENT_AUDIT.RECORD_ID }, Keys.CORE_DOCUMENT_PK, new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final ForeignKey<CoreFileStorageRecord, CoreCaseRecord> CORE_FILE_STORAGE__CORE_FILE_STORAGE_CORE_CASE_FK = Internal.createForeignKey(CoreFileStorage.CORE_FILE_STORAGE, DSL.name("core_file_storage_core_case_fk"), new TableField[] { CoreFileStorage.CORE_FILE_STORAGE.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CoreFileStorageRecord, CoreDocumentRecord> CORE_FILE_STORAGE__CORE_FILE_STORAGE_CORE_DOCUMENT_ID_FK = Internal.createForeignKey(CoreFileStorage.CORE_FILE_STORAGE, DSL.name("core_file_storage_core_document_id_fk"), new TableField[] { CoreFileStorage.CORE_FILE_STORAGE.CORE_DOCUMENT_ID }, Keys.CORE_DOCUMENT_PK, new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final ForeignKey<CoreFileStorageAuditRecord, CorrectionLogRecord> CORE_FILE_STORAGE_AUDIT__CORE_FILE_STORAGE_AUDIT_CORRECTION_LOG_FK = Internal.createForeignKey(CoreFileStorageAudit.CORE_FILE_STORAGE_AUDIT, DSL.name("core_file_storage_audit_correction_log_fk"), new TableField[] { CoreFileStorageAudit.CORE_FILE_STORAGE_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<CoreFileStorageAuditRecord, CoreFileStorageRecord> CORE_FILE_STORAGE_AUDIT__CORE_FILE_STORAGE_AUDIT_FK = Internal.createForeignKey(CoreFileStorageAudit.CORE_FILE_STORAGE_AUDIT, DSL.name("core_file_storage_audit_fk"), new TableField[] { CoreFileStorageAudit.CORE_FILE_STORAGE_AUDIT.RECORD_ID }, Keys.CORE_FILE_STORAGE_PK, new TableField[] { CoreFileStorage.CORE_FILE_STORAGE.CORE_FILE_STORAGE_ID }, true);
    public static final ForeignKey<CoreMrcodMessageRecord, CoreCaseRecord> CORE_MRCOD_MESSAGE__CORE_MRCOD_MESSAGE_CORE_CASE_FK = Internal.createForeignKey(CoreMrcodMessage.CORE_MRCOD_MESSAGE, DSL.name("core_mrcod_message_core_case_fk"), new TableField[] { CoreMrcodMessage.CORE_MRCOD_MESSAGE.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CorePersonAddressAuditRecord, CorrectionLogRecord> CORE_PERSON_ADDRESS_AUDIT__CORE_PERSON_ADDRESS_AUDIT_CORRECTION_LOG_FK = Internal.createForeignKey(CorePersonAddressAudit.CORE_PERSON_ADDRESS_AUDIT, DSL.name("core_person_address_audit_correction_log_fk"), new TableField[] { CorePersonAddressAudit.CORE_PERSON_ADDRESS_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<CorePersonAddressAuditRecord, CorePersonAddressRecord> CORE_PERSON_ADDRESS_AUDIT__CORE_PERSON_ADDRESS_AUDIT_FK = Internal.createForeignKey(CorePersonAddressAudit.CORE_PERSON_ADDRESS_AUDIT, DSL.name("core_person_address_audit_fk"), new TableField[] { CorePersonAddressAudit.CORE_PERSON_ADDRESS_AUDIT.RECORD_ID }, Keys.CORE_PERSON_ADDRESS_PK, new TableField[] { CorePersonAddress.CORE_PERSON_ADDRESS.CORE_PERSON_ADDRESS_ID }, true);
    public static final ForeignKey<CorePersonDocumentAuditRecord, CorrectionLogRecord> CORE_PERSON_DOCUMENT_AUDIT__CORE_PERSON_DOCUMENT_AUDIT_CORRECTION_LOG_FK = Internal.createForeignKey(CorePersonDocumentAudit.CORE_PERSON_DOCUMENT_AUDIT, DSL.name("core_person_document_audit_correction_log_fk"), new TableField[] { CorePersonDocumentAudit.CORE_PERSON_DOCUMENT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<CorePersonDocumentAuditRecord, CorePersonDocumentRecord> CORE_PERSON_DOCUMENT_AUDIT__CORE_PERSON_DOCUMENT_AUDIT_FK = Internal.createForeignKey(CorePersonDocumentAudit.CORE_PERSON_DOCUMENT_AUDIT, DSL.name("core_person_document_audit_fk"), new TableField[] { CorePersonDocumentAudit.CORE_PERSON_DOCUMENT_AUDIT.RECORD_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<CorePersonDocumentExBirthRecordRecord, CorePersonDocumentRecord> CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD__CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD_FK = Internal.createForeignKey(CorePersonDocumentExBirthRecord.CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD, DSL.name("core_person_document_ex_birth_record_fk"), new TableField[] { CorePersonDocumentExBirthRecord.CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD.CORE_PERSON_DOCUMENT_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<CoreProcedureRecord, CoreCaseRecord> CORE_PROCEDURE__CORE_PROCEDURE_CORE_CASE_FK = Internal.createForeignKey(CoreProcedure.CORE_PROCEDURE, DSL.name("core_procedure_core_case_fk"), new TableField[] { CoreProcedure.CORE_PROCEDURE.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CoreSmevRequestRecord, ExternalInteractionRecord> CORE_SMEV_REQUEST__CORE_SMEV_REQUEST_EXTERNAL_INTERACTION_FK = Internal.createForeignKey(CoreSmevRequest.CORE_SMEV_REQUEST, DSL.name("core_smev_request_external_interaction_fk"), new TableField[] { CoreSmevRequest.CORE_SMEV_REQUEST.EXTERNAL_INTERACTION_ID }, Keys.EXTERNAL_INTERACTION_PK, new TableField[] { ExternalInteraction.EXTERNAL_INTERACTION.EXTERNAL_INTERACTION_ID }, true);
    public static final ForeignKey<CoreSmevResponseRecord, CoreSmevRequestRecord> CORE_SMEV_RESPONSE__CORE_SMEV_RESPONSE_REQ_FK = Internal.createForeignKey(CoreSmevResponse.CORE_SMEV_RESPONSE, DSL.name("core_smev_response_req_fk"), new TableField[] { CoreSmevResponse.CORE_SMEV_RESPONSE.CORE_SMEV_REQUEST_ID }, Keys.CORE_SMEV_REQUEST_PK, new TableField[] { CoreSmevRequest.CORE_SMEV_REQUEST.SMEV_REQUEST_ID }, true);
    public static final ForeignKey<CoreUploadedApplicationRecord, CoreCaseRecord> CORE_UPLOADED_APPLICATION__CORE_UPLOADED_APPLICATION_CORE_CASE_ID_FK = Internal.createForeignKey(CoreUploadedApplication.CORE_UPLOADED_APPLICATION, DSL.name("core_uploaded_application_core_case_id_fk"), new TableField[] { CoreUploadedApplication.CORE_UPLOADED_APPLICATION.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CoreUploadedApplicationRecord, CoreSmevRequestRecord> CORE_UPLOADED_APPLICATION__CORE_UPLOADED_APPLICATION_CORE_SMEV_REQUEST_ID_FKEY = Internal.createForeignKey(CoreUploadedApplication.CORE_UPLOADED_APPLICATION, DSL.name("core_uploaded_application_core_smev_request_id_fkey"), new TableField[] { CoreUploadedApplication.CORE_UPLOADED_APPLICATION.CORE_SMEV_REQUEST_ID }, Keys.CORE_SMEV_REQUEST_PK, new TableField[] { CoreSmevRequest.CORE_SMEV_REQUEST.SMEV_REQUEST_ID }, true);
    public static final ForeignKey<CorrectionLogRecord, CoreCaseRecord> CORRECTION_LOG__CORRECTION_LOG_CORE_CASE_FK = Internal.createForeignKey(CorrectionLog.CORRECTION_LOG, DSL.name("correction_log_core_case_fk"), new TableField[] { CorrectionLog.CORRECTION_LOG.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<CorrectionLogRecord, CoreDocumentRecord> CORRECTION_LOG__CORRECTION_LOG_CORE_DOCUMENT_FK = Internal.createForeignKey(CorrectionLog.CORRECTION_LOG, DSL.name("correction_log_core_document_fk"), new TableField[] { CorrectionLog.CORRECTION_LOG.CORE_DOCUMENT_ID }, Keys.CORE_DOCUMENT_PK, new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final ForeignKey<DestructionActHistoryRecord, CoreDocumentRecord> DESTRUCTION_ACT_HISTORY__DESTRUCTION_ACT_HISTORY_CORE_DOCUMENT = Internal.createForeignKey(DestructionActHistory.DESTRUCTION_ACT_HISTORY, DSL.name("destruction_act_history_core_document"), new TableField[] { DestructionActHistory.DESTRUCTION_ACT_HISTORY.CORE_DOCUMENT_ID }, Keys.CORE_DOCUMENT_PK, new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final ForeignKey<DestructionActHistoryRecord, DestructionActRecord> DESTRUCTION_ACT_HISTORY__DESTRUCTION_ACT_HISTORY_DESTRUCTION_ACT_FK = Internal.createForeignKey(DestructionActHistory.DESTRUCTION_ACT_HISTORY, DSL.name("destruction_act_history_destruction_act_fk"), new TableField[] { DestructionActHistory.DESTRUCTION_ACT_HISTORY.DESTRUCTION_ACT_ID }, Keys.DESTRUCTION_ACT_PK, new TableField[] { DestructionAct.DESTRUCTION_ACT.DESTRUCTION_ACT_ID }, true);
    public static final ForeignKey<EmploymentAuditRecord, CorrectionLogRecord> EMPLOYMENT_AUDIT__EMPLOYMENT_AUDIT_CORRECTION_LOG_FK = Internal.createForeignKey(EmploymentAudit.EMPLOYMENT_AUDIT, DSL.name("employment_audit_correction_log_fk"), new TableField[] { EmploymentAudit.EMPLOYMENT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<EmploymentAuditRecord, EmploymentRecord> EMPLOYMENT_AUDIT__EMPLOYMENT_AUDIT_FK = Internal.createForeignKey(EmploymentAudit.EMPLOYMENT_AUDIT, DSL.name("employment_audit_fk"), new TableField[] { EmploymentAudit.EMPLOYMENT_AUDIT.RECORD_ID }, Keys.EMPLOYMENT_PK, new TableField[] { Employment.EMPLOYMENT.EMPLOYMENT_ID }, true);
    public static final ForeignKey<ErnErrorRecord, CoreCaseRecord> ERN_ERROR__ERN_ERROR_CORE_CASE_FK = Internal.createForeignKey(ErnError.ERN_ERROR, DSL.name("ern_error_core_case_fk"), new TableField[] { ErnError.ERN_ERROR.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<ExportHistorySrcRecord, CoreCaseRecord> EXPORT_HISTORY_SRC__EXPORT_HISTORY_SRC_CORE_CASE_ID_FK = Internal.createForeignKey(ExportHistorySrc.EXPORT_HISTORY_SRC, DSL.name("export_history_src_core_case_id_fk"), new TableField[] { ExportHistorySrc.EXPORT_HISTORY_SRC.CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<ExternalInteractionRecord, CoreCaseRecord> EXTERNAL_INTERACTION__EXTERNAL_INTERACTION_CORE_CASE_ID_FK = Internal.createForeignKey(ExternalInteraction.EXTERNAL_INTERACTION, DSL.name("external_interaction_core_case_id_fk"), new TableField[] { ExternalInteraction.EXTERNAL_INTERACTION.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<FileCorrectionLogRecord, CorrectionLogRecord> FILE_CORRECTION_LOG__FILE_CORRECTION_LOG_CORRECTION_LOG_FK = Internal.createForeignKey(FileCorrectionLog.FILE_CORRECTION_LOG, DSL.name("file_correction_log_correction_log_fk"), new TableField[] { FileCorrectionLog.FILE_CORRECTION_LOG.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpBaseRestrictRecord, FpCaseRecord> FP_BASE_RESTRICT__FP_BASE_RESTRICT_FP_CASE_FK = Internal.createForeignKey(FpBaseRestrict.FP_BASE_RESTRICT, DSL.name("fp_base_restrict_fp_case_fk"), new TableField[] { FpBaseRestrict.FP_BASE_RESTRICT.FP_BASE_RESTRICT_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpBaseRestrictAuditRecord, CorrectionLogRecord> FP_BASE_RESTRICT_AUDIT__FP_BASE_RESTRICT_CORRECTION_LOG_FK = Internal.createForeignKey(FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT, DSL.name("fp_base_restrict_correction_log_fk"), new TableField[] { FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpBaseRestrictAuditRecord, FpBaseRestrictRecord> FP_BASE_RESTRICT_AUDIT__FP_BASE_RESTRICT_REF_FK = Internal.createForeignKey(FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT, DSL.name("fp_base_restrict_ref_fk"), new TableField[] { FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.RECORD_ID }, Keys.FP_BASE_RESTRICT_PK, new TableField[] { FpBaseRestrict.FP_BASE_RESTRICT.FP_BASE_RESTRICT_ID }, true);
    public static final ForeignKey<FpCancelRestrictCaseRecord, FpCaseRecord> FP_CANCEL_RESTRICT_CASE__FP_CANCEL_RESTRICT_CASE_FP_CASE = Internal.createForeignKey(FpCancelRestrictCase.FP_CANCEL_RESTRICT_CASE, DSL.name("fp_cancel_restrict_case_fp_case"), new TableField[] { FpCancelRestrictCase.FP_CANCEL_RESTRICT_CASE.CANCEL_RESTRICT_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCancelRestrictCaseRecord, FpCaseRestrictRecord> FP_CANCEL_RESTRICT_CASE__FP_CANCEL_RESTRICT_CASE_FP_CASE_RESTRICT_FK = Internal.createForeignKey(FpCancelRestrictCase.FP_CANCEL_RESTRICT_CASE, DSL.name("fp_cancel_restrict_case_fp_case_restrict_fk"), new TableField[] { FpCancelRestrictCase.FP_CANCEL_RESTRICT_CASE.RESTRICT_ID }, Keys.PK_FP_CASE_RESTRICT, new TableField[] { FpCaseRestrict.FP_CASE_RESTRICT.RESTRICT_ID }, true);
    public static final ForeignKey<FpCancelRestrictCaseAuditRecord, CorrectionLogRecord> FP_CANCEL_RESTRICT_CASE_AUDIT__FP_CANCEL_RESTRICT_CASE_CORRECTION_LOG_FK = Internal.createForeignKey(FpCancelRestrictCaseAudit.FP_CANCEL_RESTRICT_CASE_AUDIT, DSL.name("fp_cancel_restrict_case_correction_log_fk"), new TableField[] { FpCancelRestrictCaseAudit.FP_CANCEL_RESTRICT_CASE_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCancelRestrictCaseAuditRecord, FpCancelRestrictCaseRecord> FP_CANCEL_RESTRICT_CASE_AUDIT__FP_CANCEL_RESTRICT_CASE_REF_FK = Internal.createForeignKey(FpCancelRestrictCaseAudit.FP_CANCEL_RESTRICT_CASE_AUDIT, DSL.name("fp_cancel_restrict_case_ref_fk"), new TableField[] { FpCancelRestrictCaseAudit.FP_CANCEL_RESTRICT_CASE_AUDIT.RECORD_ID }, Keys.FP_CANCEL_RESTRICT_CASE_PK, new TableField[] { FpCancelRestrictCase.FP_CANCEL_RESTRICT_CASE.CANCEL_RESTRICT_ID }, true);
    public static final ForeignKey<FpCaseRecord, CoreCaseRecord> FP_CASE__FK_FP_CASE_CORE_PER_CASE = Internal.createForeignKey(FpCase.FP_CASE, DSL.name("fk_fp_case_core_per_case"), new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<FpCaseRecord, CoreDocumentRecord> FP_CASE__FP_CASE_CORE_DOCUMENT_FK = Internal.createForeignKey(FpCase.FP_CASE, DSL.name("fp_case_core_document_fk"), new TableField[] { FpCase.FP_CASE.CORE_DOCUMENT_ID }, Keys.CORE_DOCUMENT_PK, new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final ForeignKey<FpCaseAlterRecord, FpCaseRecord> FP_CASE_ALTER__FK_FP_CASE_ALTER_FP_CASE = Internal.createForeignKey(FpCaseAlter.FP_CASE_ALTER, DSL.name("fk_fp_case_alter_fp_case"), new TableField[] { FpCaseAlter.FP_CASE_ALTER.ALTER_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseAlterRecord, FpCaseIssuanceRecord> FP_CASE_ALTER__FK_FP_CASE_ALTER_FP_CASE_ISSUANCE = Internal.createForeignKey(FpCaseAlter.FP_CASE_ALTER, DSL.name("fk_fp_case_alter_fp_case_issuance"), new TableField[] { FpCaseAlter.FP_CASE_ALTER.FP_CASE_ISSUANCE_ID }, Keys.PK_FP_CASE_ISSUANCE, new TableField[] { FpCaseIssuance.FP_CASE_ISSUANCE.ISSUANCE_ID }, true);
    public static final ForeignKey<FpCaseAlterAuditRecord, CorrectionLogRecord> FP_CASE_ALTER_AUDIT__FP_CASE_ALTER_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseAlterAudit.FP_CASE_ALTER_AUDIT, DSL.name("fp_case_alter_correction_log_fk"), new TableField[] { FpCaseAlterAudit.FP_CASE_ALTER_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseAlterAuditRecord, FpCaseAlterRecord> FP_CASE_ALTER_AUDIT__FP_CASE_ALTER_REF_FK = Internal.createForeignKey(FpCaseAlterAudit.FP_CASE_ALTER_AUDIT, DSL.name("fp_case_alter_ref_fk"), new TableField[] { FpCaseAlterAudit.FP_CASE_ALTER_AUDIT.RECORD_ID }, Keys.PK_FP_CASE_ALTER, new TableField[] { FpCaseAlter.FP_CASE_ALTER.ALTER_ID }, true);
    public static final ForeignKey<FpCaseAuditRecord, CorrectionLogRecord> FP_CASE_AUDIT__FP_CASE_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseAudit.FP_CASE_AUDIT, DSL.name("fp_case_correction_log_fk"), new TableField[] { FpCaseAudit.FP_CASE_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseAuditRecord, FpCaseRecord> FP_CASE_AUDIT__FP_CASE_REF_FK = Internal.createForeignKey(FpCaseAudit.FP_CASE_AUDIT, DSL.name("fp_case_ref_fk"), new TableField[] { FpCaseAudit.FP_CASE_AUDIT.RECORD_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseInvalidationRecord, FpCaseRecord> FP_CASE_INVALIDATION__FK_FP_CASE_INV_FP_CASE = Internal.createForeignKey(FpCaseInvalidation.FP_CASE_INVALIDATION, DSL.name("fk_fp_case_inv_fp_case"), new TableField[] { FpCaseInvalidation.FP_CASE_INVALIDATION.INV_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseInvalidationAuditRecord, CorrectionLogRecord> FP_CASE_INVALIDATION_AUDIT__FP_CASE_INVALIDATION_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseInvalidationAudit.FP_CASE_INVALIDATION_AUDIT, DSL.name("fp_case_invalidation_correction_log_fk"), new TableField[] { FpCaseInvalidationAudit.FP_CASE_INVALIDATION_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseInvalidationAuditRecord, FpCaseInvalidationRecord> FP_CASE_INVALIDATION_AUDIT__FP_CASE_INVALIDATION_REF_FK = Internal.createForeignKey(FpCaseInvalidationAudit.FP_CASE_INVALIDATION_AUDIT, DSL.name("fp_case_invalidation_ref_fk"), new TableField[] { FpCaseInvalidationAudit.FP_CASE_INVALIDATION_AUDIT.RECORD_ID }, Keys.PK_FP_CASE_INV, new TableField[] { FpCaseInvalidation.FP_CASE_INVALIDATION.INV_ID }, true);
    public static final ForeignKey<FpCaseIssuanceRecord, FpCaseRecord> FP_CASE_ISSUANCE__FK_FP_CASE_ISSUANCE_FP_CASE = Internal.createForeignKey(FpCaseIssuance.FP_CASE_ISSUANCE, DSL.name("fk_fp_case_issuance_fp_case"), new TableField[] { FpCaseIssuance.FP_CASE_ISSUANCE.ISSUANCE_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseIssuanceAuditRecord, CorrectionLogRecord> FP_CASE_ISSUANCE_AUDIT__FP_CASE_ISSUANCE_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseIssuanceAudit.FP_CASE_ISSUANCE_AUDIT, DSL.name("fp_case_issuance_correction_log_fk"), new TableField[] { FpCaseIssuanceAudit.FP_CASE_ISSUANCE_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseIssuanceAuditRecord, FpCaseIssuanceRecord> FP_CASE_ISSUANCE_AUDIT__FP_CASE_ISSUANCE_REF_FK = Internal.createForeignKey(FpCaseIssuanceAudit.FP_CASE_ISSUANCE_AUDIT, DSL.name("fp_case_issuance_ref_fk"), new TableField[] { FpCaseIssuanceAudit.FP_CASE_ISSUANCE_AUDIT.RECORD_ID }, Keys.PK_FP_CASE_ISSUANCE, new TableField[] { FpCaseIssuance.FP_CASE_ISSUANCE.ISSUANCE_ID }, true);
    public static final ForeignKey<FpCaseIssueRecallRecord, FpCaseRecord> FP_CASE_ISSUE_RECALL__FK_FP_CASE_ISS_RECALL_FP_CASE = Internal.createForeignKey(FpCaseIssueRecall.FP_CASE_ISSUE_RECALL, DSL.name("fk_fp_case_iss_recall_fp_case"), new TableField[] { FpCaseIssueRecall.FP_CASE_ISSUE_RECALL.ISSUE_RECALL_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseIssueRecallRecord, FpCaseRecallRecord> FP_CASE_ISSUE_RECALL__FK_FP_CASE_ISS_RECALL_FP_CASE_REC = Internal.createForeignKey(FpCaseIssueRecall.FP_CASE_ISSUE_RECALL, DSL.name("fk_fp_case_iss_recall_fp_case_rec"), new TableField[] { FpCaseIssueRecall.FP_CASE_ISSUE_RECALL.FP_CASE_RECALL_ID }, Keys.PK_FP_CASE_RECALL, new TableField[] { FpCaseRecall.FP_CASE_RECALL.RECALL_ID }, true);
    public static final ForeignKey<FpCaseIssueRecallAuditRecord, CorrectionLogRecord> FP_CASE_ISSUE_RECALL_AUDIT__FP_CASE_ISSUE_RECALL_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseIssueRecallAudit.FP_CASE_ISSUE_RECALL_AUDIT, DSL.name("fp_case_issue_recall_correction_log_fk"), new TableField[] { FpCaseIssueRecallAudit.FP_CASE_ISSUE_RECALL_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseIssueRecallAuditRecord, FpCaseIssueRecallRecord> FP_CASE_ISSUE_RECALL_AUDIT__FP_CASE_ISSUE_RECALL_REF_FK = Internal.createForeignKey(FpCaseIssueRecallAudit.FP_CASE_ISSUE_RECALL_AUDIT, DSL.name("fp_case_issue_recall_ref_fk"), new TableField[] { FpCaseIssueRecallAudit.FP_CASE_ISSUE_RECALL_AUDIT.RECORD_ID }, Keys.PK_FP_CASE_ISS_RECALL, new TableField[] { FpCaseIssueRecall.FP_CASE_ISSUE_RECALL.ISSUE_RECALL_ID }, true);
    public static final ForeignKey<FpCaseLegalPersonRecord, CorePersonDocumentRecord> FP_CASE_LEGAL_PERSON__FP_CASE_LEGAL_PERSON_CORE_PERSON_DOCUMENT_FK = Internal.createForeignKey(FpCaseLegalPerson.FP_CASE_LEGAL_PERSON, DSL.name("fp_case_legal_person_core_person_document_fk"), new TableField[] { FpCaseLegalPerson.FP_CASE_LEGAL_PERSON.CORE_PERSON_DOCUMENT_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<FpCaseLegalPersonRecord, FpCaseRecord> FP_CASE_LEGAL_PERSON__FP_CASE_LEGAL_PERSON_FP_CASE_FK = Internal.createForeignKey(FpCaseLegalPerson.FP_CASE_LEGAL_PERSON, DSL.name("fp_case_legal_person_fp_case_fk"), new TableField[] { FpCaseLegalPerson.FP_CASE_LEGAL_PERSON.FP_CASE_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseLegalPersonAuditRecord, FpCaseLegalPersonRecord> FP_CASE_LEGAL_PERSON_AUDIT__FP_CASE_LEGAL_PERSON_AUDIT_FK = Internal.createForeignKey(FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT, DSL.name("fp_case_legal_person_audit_fk"), new TableField[] { FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.RECORD_FP_CASE_ID, FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.RECORD_CORE_PERSON_DOCUMENT_ID }, Keys.FP_CASE_LEGAL_PERSON_PK, new TableField[] { FpCaseLegalPerson.FP_CASE_LEGAL_PERSON.FP_CASE_ID, FpCaseLegalPerson.FP_CASE_LEGAL_PERSON.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<FpCaseLegalPersonAuditRecord, CorrectionLogRecord> FP_CASE_LEGAL_PERSON_AUDIT__FP_CASE_LEGAL_PERSON_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT, DSL.name("fp_case_legal_person_correction_log_fk"), new TableField[] { FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseLossRecord, FpCaseRecord> FP_CASE_LOSS__FK_FP_CASE_LOSS_FP_CASE = Internal.createForeignKey(FpCaseLoss.FP_CASE_LOSS, DSL.name("fk_fp_case_loss_fp_case"), new TableField[] { FpCaseLoss.FP_CASE_LOSS.LOSS_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseLossRecord, FpCaseIssuanceRecord> FP_CASE_LOSS__FK_FP_CASE_LOSS_FP_CASE_ISSUANCE = Internal.createForeignKey(FpCaseLoss.FP_CASE_LOSS, DSL.name("fk_fp_case_loss_fp_case_issuance"), new TableField[] { FpCaseLoss.FP_CASE_LOSS.FP_CASE_ISSUANCE_ID }, Keys.PK_FP_CASE_ISSUANCE, new TableField[] { FpCaseIssuance.FP_CASE_ISSUANCE.ISSUANCE_ID }, true);
    public static final ForeignKey<FpCaseLossAuditRecord, CorrectionLogRecord> FP_CASE_LOSS_AUDIT__FP_CASE_LOSS_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseLossAudit.FP_CASE_LOSS_AUDIT, DSL.name("fp_case_loss_correction_log_fk"), new TableField[] { FpCaseLossAudit.FP_CASE_LOSS_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseLossAuditRecord, FpCaseLossRecord> FP_CASE_LOSS_AUDIT__FP_CASE_LOSS_REF_FK = Internal.createForeignKey(FpCaseLossAudit.FP_CASE_LOSS_AUDIT, DSL.name("fp_case_loss_ref_fk"), new TableField[] { FpCaseLossAudit.FP_CASE_LOSS_AUDIT.RECORD_ID }, Keys.PK_FP_CASE_LOSS, new TableField[] { FpCaseLoss.FP_CASE_LOSS.LOSS_ID }, true);
    public static final ForeignKey<FpCaseOtherLegalPersonRecord, CoreCaseRecord> FP_CASE_OTHER_LEGAL_PERSON__CORE_CASE_FK = Internal.createForeignKey(FpCaseOtherLegalPerson.FP_CASE_OTHER_LEGAL_PERSON, DSL.name("core_case_fk"), new TableField[] { FpCaseOtherLegalPerson.FP_CASE_OTHER_LEGAL_PERSON.FP_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<FpCaseRecallRecord, FpCaseRecord> FP_CASE_RECALL__FK_FP_CASE_RECALL_FP_CASE = Internal.createForeignKey(FpCaseRecall.FP_CASE_RECALL, DSL.name("fk_fp_case_recall_fp_case"), new TableField[] { FpCaseRecall.FP_CASE_RECALL.RECALL_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseRecallRecord, FpCaseIssuanceRecord> FP_CASE_RECALL__FK_FP_CASE_RECALL_FP_CASE_ISSUANCE = Internal.createForeignKey(FpCaseRecall.FP_CASE_RECALL, DSL.name("fk_fp_case_recall_fp_case_issuance"), new TableField[] { FpCaseRecall.FP_CASE_RECALL.FP_CASE_ISSUANCE_ID }, Keys.PK_FP_CASE_ISSUANCE, new TableField[] { FpCaseIssuance.FP_CASE_ISSUANCE.ISSUANCE_ID }, true);
    public static final ForeignKey<FpCaseRecallAuditRecord, CorrectionLogRecord> FP_CASE_RECALL_AUDIT__FP_CASE_RECALL_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseRecallAudit.FP_CASE_RECALL_AUDIT, DSL.name("fp_case_recall_correction_log_fk"), new TableField[] { FpCaseRecallAudit.FP_CASE_RECALL_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseRecallAuditRecord, FpCaseRecallRecord> FP_CASE_RECALL_AUDIT__FP_CASE_RECALL_REF_FK = Internal.createForeignKey(FpCaseRecallAudit.FP_CASE_RECALL_AUDIT, DSL.name("fp_case_recall_ref_fk"), new TableField[] { FpCaseRecallAudit.FP_CASE_RECALL_AUDIT.RECORD_ID }, Keys.PK_FP_CASE_RECALL, new TableField[] { FpCaseRecall.FP_CASE_RECALL.RECALL_ID }, true);
    public static final ForeignKey<FpCaseRestrictRecord, FpCaseRecord> FP_CASE_RESTRICT__FK_FP_CASE_RESTRICT_FP_CASE = Internal.createForeignKey(FpCaseRestrict.FP_CASE_RESTRICT, DSL.name("fk_fp_case_restrict_fp_case"), new TableField[] { FpCaseRestrict.FP_CASE_RESTRICT.RESTRICT_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpCaseRestrictAuditRecord, CorrectionLogRecord> FP_CASE_RESTRICT_AUDIT__FP_CASE_RESTRICT_CORRECTION_LOG_FK = Internal.createForeignKey(FpCaseRestrictAudit.FP_CASE_RESTRICT_AUDIT, DSL.name("fp_case_restrict_correction_log_fk"), new TableField[] { FpCaseRestrictAudit.FP_CASE_RESTRICT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpCaseRestrictAuditRecord, FpCaseRestrictRecord> FP_CASE_RESTRICT_AUDIT__FP_CASE_RESTRICT_REF_FK = Internal.createForeignKey(FpCaseRestrictAudit.FP_CASE_RESTRICT_AUDIT, DSL.name("fp_case_restrict_ref_fk"), new TableField[] { FpCaseRestrictAudit.FP_CASE_RESTRICT_AUDIT.RECORD_ID }, Keys.PK_FP_CASE_RESTRICT, new TableField[] { FpCaseRestrict.FP_CASE_RESTRICT.RESTRICT_ID }, true);
    public static final ForeignKey<FpChildDataRecord, FpCaseRecord> FP_CHILD_DATA__FK_FP_CHILD_DATA_FP_CASE = Internal.createForeignKey(FpChildData.FP_CHILD_DATA, DSL.name("fk_fp_child_data_fp_case"), new TableField[] { FpChildData.FP_CHILD_DATA.FP_CASE_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpChildDataAuditRecord, CorrectionLogRecord> FP_CHILD_DATA_AUDIT__FP_CHILD_DATA_CORRECTION_LOG_FK = Internal.createForeignKey(FpChildDataAudit.FP_CHILD_DATA_AUDIT, DSL.name("fp_child_data_correction_log_fk"), new TableField[] { FpChildDataAudit.FP_CHILD_DATA_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpChildDataAuditRecord, FpChildDataRecord> FP_CHILD_DATA_AUDIT__FP_CHILD_DATA_REF_FK = Internal.createForeignKey(FpChildDataAudit.FP_CHILD_DATA_AUDIT, DSL.name("fp_child_data_ref_fk"), new TableField[] { FpChildDataAudit.FP_CHILD_DATA_AUDIT.RECORD_ID }, Keys.PK_FP_CHILD_DATA, new TableField[] { FpChildData.FP_CHILD_DATA.FP_CHILD_DATA_ID }, true);
    public static final ForeignKey<FpDecisionRecord, FpCaseRecord> FP_DECISION__FK_FP_DECISION_FP_CASE = Internal.createForeignKey(FpDecision.FP_DECISION, DSL.name("fk_fp_decision_fp_case"), new TableField[] { FpDecision.FP_DECISION.DECISION_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpDecisionAuditRecord, CorrectionLogRecord> FP_DECISION_AUDIT__FP_DECISION_CORRECTION_LOG_FK = Internal.createForeignKey(FpDecisionAudit.FP_DECISION_AUDIT, DSL.name("fp_decision_correction_log_fk"), new TableField[] { FpDecisionAudit.FP_DECISION_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpDecisionAuditRecord, FpDecisionRecord> FP_DECISION_AUDIT__FP_DECISION_REF_FK = Internal.createForeignKey(FpDecisionAudit.FP_DECISION_AUDIT, DSL.name("fp_decision_ref_fk"), new TableField[] { FpDecisionAudit.FP_DECISION_AUDIT.RECORD_ID }, Keys.PK_FP_DECISION, new TableField[] { FpDecision.FP_DECISION.DECISION_ID }, true);
    public static final ForeignKey<FpDeclineGetApplicationCaseRecord, FpCaseRecord> FP_DECLINE_GET_APPLICATION_CASE__FP_DECLINE_GET_APPLICATION_CASE_FP_CASE_ID = Internal.createForeignKey(FpDeclineGetApplicationCase.FP_DECLINE_GET_APPLICATION_CASE, DSL.name("fp_decline_get_application_case_fp_case_id"), new TableField[] { FpDeclineGetApplicationCase.FP_DECLINE_GET_APPLICATION_CASE.FP_DECLINE_GET_APPLICATION_CASE_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpDeclineGetApplicationCaseAuditRecord, CorrectionLogRecord> FP_DECLINE_GET_APPLICATION_CASE_AUDIT__FP_DECLINE_GET_APPLICATION_CASE_CORRECTION_LOG_FK = Internal.createForeignKey(FpDeclineGetApplicationCaseAudit.FP_DECLINE_GET_APPLICATION_CASE_AUDIT, DSL.name("fp_decline_get_application_case_correction_log_fk"), new TableField[] { FpDeclineGetApplicationCaseAudit.FP_DECLINE_GET_APPLICATION_CASE_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpDeclineGetApplicationCaseAuditRecord, FpDeclineGetApplicationCaseRecord> FP_DECLINE_GET_APPLICATION_CASE_AUDIT__FP_DECLINE_GET_APPLICATION_CASE_REF_FK = Internal.createForeignKey(FpDeclineGetApplicationCaseAudit.FP_DECLINE_GET_APPLICATION_CASE_AUDIT, DSL.name("fp_decline_get_application_case_ref_fk"), new TableField[] { FpDeclineGetApplicationCaseAudit.FP_DECLINE_GET_APPLICATION_CASE_AUDIT.RECORD_ID }, Keys.FP_DECLINE_GET_APPLICATION_CASE_ID_PK, new TableField[] { FpDeclineGetApplicationCase.FP_DECLINE_GET_APPLICATION_CASE.FP_DECLINE_GET_APPLICATION_CASE_ID }, true);
    public static final ForeignKey<FpEmploymentRecord, FpCaseIssuanceRecord> FP_EMPLOYMENT__FK_FP_EMPLOYMENT_FP_CASE_ISSUANCE = Internal.createForeignKey(FpEmployment.FP_EMPLOYMENT, DSL.name("fk_fp_employment_fp_case_issuance"), new TableField[] { FpEmployment.FP_EMPLOYMENT.FP_CASE_ISSUANCE_ID }, Keys.PK_FP_CASE_ISSUANCE, new TableField[] { FpCaseIssuance.FP_CASE_ISSUANCE.ISSUANCE_ID }, true);
    public static final ForeignKey<FpEmploymentRecord, EmploymentRecord> FP_EMPLOYMENT__FP_EMPLOYMENT_EMPLOYMENTS_ID_FK = Internal.createForeignKey(FpEmployment.FP_EMPLOYMENT, DSL.name("fp_employment_employments_id_fk"), new TableField[] { FpEmployment.FP_EMPLOYMENT.EMPLOYMENTS_ID }, Keys.EMPLOYMENT_PK, new TableField[] { Employment.EMPLOYMENT.EMPLOYMENT_ID }, true);
    public static final ForeignKey<FpEmploymentAuditRecord, CorrectionLogRecord> FP_EMPLOYMENT_AUDIT__FP_EMPLOYMENT_CORRECTION_LOG_FK = Internal.createForeignKey(FpEmploymentAudit.FP_EMPLOYMENT_AUDIT, DSL.name("fp_employment_correction_log_fk"), new TableField[] { FpEmploymentAudit.FP_EMPLOYMENT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpEmploymentAuditRecord, FpEmploymentRecord> FP_EMPLOYMENT_AUDIT__FP_EMPLOYMENT_REF_FK = Internal.createForeignKey(FpEmploymentAudit.FP_EMPLOYMENT_AUDIT, DSL.name("fp_employment_ref_fk"), new TableField[] { FpEmploymentAudit.FP_EMPLOYMENT_AUDIT.RECORD_ID }, Keys.FP_EMPLOYMENT_PK, new TableField[] { FpEmployment.FP_EMPLOYMENT.ID }, true);
    public static final ForeignKey<FpInformalLegalPersonRecord, FpRestrictIntervalRecord> FP_INFORMAL_LEGAL_PERSON__FP_INFORMAL_LEGAL_PERSON_FP_RESTRICT_INTERVAL_FK = Internal.createForeignKey(FpInformalLegalPerson.FP_INFORMAL_LEGAL_PERSON, DSL.name("fp_informal_legal_person_fp_restrict_interval_fk"), new TableField[] { FpInformalLegalPerson.FP_INFORMAL_LEGAL_PERSON.FP_INFORMAL_LEGAL_PERSON_ID }, Keys.FP_RESTRICT_INTERVAL_PK, new TableField[] { FpRestrictInterval.FP_RESTRICT_INTERVAL.FP_RESTRICT_INTERVAL_ID }, true);
    public static final ForeignKey<FpInformalLegalPersonAuditRecord, CorrectionLogRecord> FP_INFORMAL_LEGAL_PERSON_AUDIT__FP_INFORMAL_LEGAL_PERSON_CORRECTION_LOG_FK = Internal.createForeignKey(FpInformalLegalPersonAudit.FP_INFORMAL_LEGAL_PERSON_AUDIT, DSL.name("fp_informal_legal_person_correction_log_fk"), new TableField[] { FpInformalLegalPersonAudit.FP_INFORMAL_LEGAL_PERSON_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpInformalLegalPersonAuditRecord, FpInformalLegalPersonRecord> FP_INFORMAL_LEGAL_PERSON_AUDIT__FP_INFORMAL_LEGAL_PERSON_REF_FK = Internal.createForeignKey(FpInformalLegalPersonAudit.FP_INFORMAL_LEGAL_PERSON_AUDIT, DSL.name("fp_informal_legal_person_ref_fk"), new TableField[] { FpInformalLegalPersonAudit.FP_INFORMAL_LEGAL_PERSON_AUDIT.RECORD_ID }, Keys.FP_INFORMAL_LEGAL_PERSON_PK, new TableField[] { FpInformalLegalPerson.FP_INFORMAL_LEGAL_PERSON.FP_INFORMAL_LEGAL_PERSON_ID }, true);
    public static final ForeignKey<FpPersonAddressRecord, CorePersonDocumentRecord> FP_PERSON_ADDRESS__FP_PERSON_ADDRESS_CORE_PERSON_DOCUMENT_FK = Internal.createForeignKey(FpPersonAddress.FP_PERSON_ADDRESS, DSL.name("fp_person_address_core_person_document_fk"), new TableField[] { FpPersonAddress.FP_PERSON_ADDRESS.PERSON_DOCUMENT_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<FpPersonAddressAuditRecord, CorrectionLogRecord> FP_PERSON_ADDRESS_AUDIT__FP_PERSON_ADDRESS_CORRECTION_LOG_FK = Internal.createForeignKey(FpPersonAddressAudit.FP_PERSON_ADDRESS_AUDIT, DSL.name("fp_person_address_correction_log_fk"), new TableField[] { FpPersonAddressAudit.FP_PERSON_ADDRESS_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpPersonAddressAuditRecord, FpPersonAddressRecord> FP_PERSON_ADDRESS_AUDIT__FP_PERSON_ADDRESS_REF_FK = Internal.createForeignKey(FpPersonAddressAudit.FP_PERSON_ADDRESS_AUDIT, DSL.name("fp_person_address_ref_fk"), new TableField[] { FpPersonAddressAudit.FP_PERSON_ADDRESS_AUDIT.RECORD_ID }, Keys.FP_PERSON_ADDRESS_PKEY, new TableField[] { FpPersonAddress.FP_PERSON_ADDRESS.FP_PERSON_ADDRESS_ID }, true);
    public static final ForeignKey<FpPersonChangeInfoAuditRecord, CorrectionLogRecord> FP_PERSON_CHANGE_INFO_AUDIT__FP_PERSON_CHANGE_INFO_CORRECTION_LOG_FK = Internal.createForeignKey(FpPersonChangeInfoAudit.FP_PERSON_CHANGE_INFO_AUDIT, DSL.name("fp_person_change_info_correction_log_fk"), new TableField[] { FpPersonChangeInfoAudit.FP_PERSON_CHANGE_INFO_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpPersonChangeInfoAuditRecord, FpPersonChangeInfoRecord> FP_PERSON_CHANGE_INFO_AUDIT__FP_PERSON_CHANGE_INFO_REF_FK = Internal.createForeignKey(FpPersonChangeInfoAudit.FP_PERSON_CHANGE_INFO_AUDIT, DSL.name("fp_person_change_info_ref_fk"), new TableField[] { FpPersonChangeInfoAudit.FP_PERSON_CHANGE_INFO_AUDIT.RECORD_ID }, Keys.FP_PERSON_CHANGE_INFO_PK, new TableField[] { FpPersonChangeInfo.FP_PERSON_CHANGE_INFO.PERSON_INFO_CHANGE_ID }, true);
    public static final ForeignKey<FpPersonChangeInfoLinkRecord, FpCaseIssuanceRecord> FP_PERSON_CHANGE_INFO_LINK__FP_PERSON_CHANGE_INFO_LINK_FP_CASE_FK = Internal.createForeignKey(FpPersonChangeInfoLink.FP_PERSON_CHANGE_INFO_LINK, DSL.name("fp_person_change_info_link_fp_case_fk"), new TableField[] { FpPersonChangeInfoLink.FP_PERSON_CHANGE_INFO_LINK.FP_CASE_ISSUANCE_ID }, Keys.PK_FP_CASE_ISSUANCE, new TableField[] { FpCaseIssuance.FP_CASE_ISSUANCE.ISSUANCE_ID }, true);
    public static final ForeignKey<FpPersonChangeInfoLinkRecord, FpPersonChangeInfoRecord> FP_PERSON_CHANGE_INFO_LINK__FP_PERSON_CHANGE_INFO_LINK_FP_PERSON_CHANGE_INFO_FK = Internal.createForeignKey(FpPersonChangeInfoLink.FP_PERSON_CHANGE_INFO_LINK, DSL.name("fp_person_change_info_link_fp_person_change_info_fk"), new TableField[] { FpPersonChangeInfoLink.FP_PERSON_CHANGE_INFO_LINK.PERSON_INFO_CHANGE_ID }, Keys.FP_PERSON_CHANGE_INFO_PK, new TableField[] { FpPersonChangeInfo.FP_PERSON_CHANGE_INFO.PERSON_INFO_CHANGE_ID }, true);
    public static final ForeignKey<FpPersonChangeInfoLinkAuditRecord, CorrectionLogRecord> FP_PERSON_CHANGE_INFO_LINK_AUDIT__FP_PERSON_CHANGE_INFO_LINK_CORRECTION_LOG_FK = Internal.createForeignKey(FpPersonChangeInfoLinkAudit.FP_PERSON_CHANGE_INFO_LINK_AUDIT, DSL.name("fp_person_change_info_link_correction_log_fk"), new TableField[] { FpPersonChangeInfoLinkAudit.FP_PERSON_CHANGE_INFO_LINK_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpPersonChangeInfoLinkAuditRecord, FpPersonChangeInfoLinkRecord> FP_PERSON_CHANGE_INFO_LINK_AUDIT__FP_PERSON_CHANGE_INFO_LINK_REF_FK = Internal.createForeignKey(FpPersonChangeInfoLinkAudit.FP_PERSON_CHANGE_INFO_LINK_AUDIT, DSL.name("fp_person_change_info_link_ref_fk"), new TableField[] { FpPersonChangeInfoLinkAudit.FP_PERSON_CHANGE_INFO_LINK_AUDIT.RECORD_ID }, Keys.FP_PERSON_CHANGE_INFO_LINK_PK, new TableField[] { FpPersonChangeInfoLink.FP_PERSON_CHANGE_INFO_LINK.PERSON_INFO_CHANGE_LINK_ID }, true);
    public static final ForeignKey<FpPersonDocumentRecord, CorePersonDocumentRecord> FP_PERSON_DOCUMENT__FP_PERSON_DOCUMENT_CORE_PERSON_DOCUMENT = Internal.createForeignKey(FpPersonDocument.FP_PERSON_DOCUMENT, DSL.name("fp_person_document_core_person_document"), new TableField[] { FpPersonDocument.FP_PERSON_DOCUMENT.FPA_PERSON_DOCUMENT_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<FpPersonDocumentAuditRecord, CorrectionLogRecord> FP_PERSON_DOCUMENT_AUDIT__FP_PERSON_DOCUMENT_CORRECTION_LOG_FK = Internal.createForeignKey(FpPersonDocumentAudit.FP_PERSON_DOCUMENT_AUDIT, DSL.name("fp_person_document_correction_log_fk"), new TableField[] { FpPersonDocumentAudit.FP_PERSON_DOCUMENT_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpPersonDocumentAuditRecord, FpPersonDocumentRecord> FP_PERSON_DOCUMENT_AUDIT__FP_PERSON_DOCUMENT_REF_FK = Internal.createForeignKey(FpPersonDocumentAudit.FP_PERSON_DOCUMENT_AUDIT, DSL.name("fp_person_document_ref_fk"), new TableField[] { FpPersonDocumentAudit.FP_PERSON_DOCUMENT_AUDIT.RECORD_ID }, Keys.FP_PERSON_DOCUMENT_PK, new TableField[] { FpPersonDocument.FP_PERSON_DOCUMENT.FPA_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<FpPrintRecord, FpCaseRecord> FP_PRINT__FK_FP_PRINT_FP_CASE = Internal.createForeignKey(FpPrint.FP_PRINT, DSL.name("fk_fp_print_fp_case"), new TableField[] { FpPrint.FP_PRINT.CORE_CASE_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpRestrictIntervalRecord, FpSignalInformationRecord> FP_RESTRICT_INTERVAL__FP_RESTRICT_INTERVAL_CORRELATION_ID_FKEY = Internal.createForeignKey(FpRestrictInterval.FP_RESTRICT_INTERVAL, DSL.name("fp_restrict_interval_correlation_id_fkey"), new TableField[] { FpRestrictInterval.FP_RESTRICT_INTERVAL.CORRELATION_ID }, Keys.FP_SIGNAL_INFORMATION_PKEY, new TableField[] { FpSignalInformation.FP_SIGNAL_INFORMATION.CORRELATION_ID }, true);
    public static final ForeignKey<FpRestrictIntervalRecord, FpBaseRestrictRecord> FP_RESTRICT_INTERVAL__FP_RESTRICT_INTERVAL_FP_RESTRICT_FK = Internal.createForeignKey(FpRestrictInterval.FP_RESTRICT_INTERVAL, DSL.name("fp_restrict_interval_fp_restrict_fk"), new TableField[] { FpRestrictInterval.FP_RESTRICT_INTERVAL.FP_BASE_RESTRICT_ID }, Keys.FP_BASE_RESTRICT_PK, new TableField[] { FpBaseRestrict.FP_BASE_RESTRICT.FP_BASE_RESTRICT_ID }, true);
    public static final ForeignKey<FpRestrictIntervalAuditRecord, CorrectionLogRecord> FP_RESTRICT_INTERVAL_AUDIT__FP_RESTRICT_INTERVAL_CORRECTION_LOG_FK = Internal.createForeignKey(FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT, DSL.name("fp_restrict_interval_correction_log_fk"), new TableField[] { FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpRestrictIntervalAuditRecord, FpRestrictIntervalRecord> FP_RESTRICT_INTERVAL_AUDIT__FP_RESTRICT_INTERVAL_REF_FK = Internal.createForeignKey(FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT, DSL.name("fp_restrict_interval_ref_fk"), new TableField[] { FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.RECORD_ID }, Keys.FP_RESTRICT_INTERVAL_PK, new TableField[] { FpRestrictInterval.FP_RESTRICT_INTERVAL.FP_RESTRICT_INTERVAL_ID }, true);
    public static final ForeignKey<FpSignalInformationRecord, FpCaseRecord> FP_SIGNAL_INFORMATION__FP_SIGNAL_INFORMATION_FP_CASE_ID_FKEY = Internal.createForeignKey(FpSignalInformation.FP_SIGNAL_INFORMATION, DSL.name("fp_signal_information_fp_case_id_fkey"), new TableField[] { FpSignalInformation.FP_SIGNAL_INFORMATION.FP_CASE_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpTranslateNameAuditRecord, CorrectionLogRecord> FP_TRANSLATE_NAME_AUDIT__FP_TRANSLATE_NAME_CORRECTION_LOG_FK = Internal.createForeignKey(FpTranslateNameAudit.FP_TRANSLATE_NAME_AUDIT, DSL.name("fp_translate_name_correction_log_fk"), new TableField[] { FpTranslateNameAudit.FP_TRANSLATE_NAME_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<FpTranslateNameAuditRecord, FpTranslateNameRecord> FP_TRANSLATE_NAME_AUDIT__FP_TRANSLATE_NAME_REF_FK = Internal.createForeignKey(FpTranslateNameAudit.FP_TRANSLATE_NAME_AUDIT, DSL.name("fp_translate_name_ref_fk"), new TableField[] { FpTranslateNameAudit.FP_TRANSLATE_NAME_AUDIT.RECORD_ID }, Keys.FP_TRANSLATE_NAME_PK, new TableField[] { FpTranslateName.FP_TRANSLATE_NAME.TRANSLATE_NAME_ID }, true);
    public static final ForeignKey<FpTranslateNameHistoryRecord, FpCaseRecord> FP_TRANSLATE_NAME_HISTORY__FP_TRANSLATE_NAME_HISTORY_FP_CASE_FK = Internal.createForeignKey(FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY, DSL.name("fp_translate_name_history_fp_case_fk"), new TableField[] { FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY.FP_CASE_ID }, Keys.PK_FP_CASE, new TableField[] { FpCase.FP_CASE.FP_CASE_ID }, true);
    public static final ForeignKey<FpTranslateNameHistoryRecord, FpTranslateNameRecord> FP_TRANSLATE_NAME_HISTORY__FP_TRANSLATE_NAME_HISTORY_TRANSLATE_NAME_FK = Internal.createForeignKey(FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY, DSL.name("fp_translate_name_history_translate_name_fk"), new TableField[] { FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY.TRANSLATE_NAME_ID }, Keys.FP_TRANSLATE_NAME_PK, new TableField[] { FpTranslateName.FP_TRANSLATE_NAME.TRANSLATE_NAME_ID }, true);
    public static final ForeignKey<FpTranslateNameHistoryAuditRecord, FpTranslateNameHistoryRecord> FP_TRANSLATE_NAME_HISTORY_AUDIT__FP_TRANSLATE_NAME_HISTORY_AUDIT_FK = Internal.createForeignKey(FpTranslateNameHistoryAudit.FP_TRANSLATE_NAME_HISTORY_AUDIT, DSL.name("fp_translate_name_history_audit_fk"), new TableField[] { FpTranslateNameHistoryAudit.FP_TRANSLATE_NAME_HISTORY_AUDIT.RECORD_FP_CASE_ID, FpTranslateNameHistoryAudit.FP_TRANSLATE_NAME_HISTORY_AUDIT.RECORD_TRANSLATE_NAME_ID }, Keys.FP_TRANSLATE_NAME_HISTORY_PK, new TableField[] { FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY.FP_CASE_ID, FpTranslateNameHistory.FP_TRANSLATE_NAME_HISTORY.TRANSLATE_NAME_ID }, true);
    public static final ForeignKey<FpTranslateNameHistoryAuditRecord, CorrectionLogRecord> FP_TRANSLATE_NAME_HISTORY_AUDIT__FP_TRANSLATE_NAME_HISTORY_CORRECTION_LOG_FK = Internal.createForeignKey(FpTranslateNameHistoryAudit.FP_TRANSLATE_NAME_HISTORY_AUDIT, DSL.name("fp_translate_name_history_correction_log_fk"), new TableField[] { FpTranslateNameHistoryAudit.FP_TRANSLATE_NAME_HISTORY_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<NewBirthPlaceRecord, CoreCaseRecord> NEW_BIRTH_PLACE__CORE_CASE_FK = Internal.createForeignKey(NewBirthPlace.NEW_BIRTH_PLACE, DSL.name("core_case_fk"), new TableField[] { NewBirthPlace.NEW_BIRTH_PLACE.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<OrganizationInfoAuditRecord, CorrectionLogRecord> ORGANIZATION_INFO_AUDIT__ORGANIZATION_INFO_CORRECTION_LOG_FK = Internal.createForeignKey(OrganizationInfoAudit.ORGANIZATION_INFO_AUDIT, DSL.name("organization_info_correction_log_fk"), new TableField[] { OrganizationInfoAudit.ORGANIZATION_INFO_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<OrganizationInfoAuditRecord, OrganizationInfoRecord> ORGANIZATION_INFO_AUDIT__ORGANIZATION_INFO_REF_FK = Internal.createForeignKey(OrganizationInfoAudit.ORGANIZATION_INFO_AUDIT, DSL.name("organization_info_ref_fk"), new TableField[] { OrganizationInfoAudit.ORGANIZATION_INFO_AUDIT.RECORD_ID }, Keys.ORGANIZATION_INFO_PK, new TableField[] { OrganizationInfo.ORGANIZATION_INFO.ORGANIZATION_INFO_ID }, true);
    public static final ForeignKey<PassLossInfoRecord, CoreDocumentRecord> PASS_LOSS_INFO__FPA_CORE_DOCUMENT_LOSS_INFO = Internal.createForeignKey(PassLossInfo.PASS_LOSS_INFO, DSL.name("fpa_core_document_loss_info"), new TableField[] { PassLossInfo.PASS_LOSS_INFO.CORE_DOCUMENT_ID }, Keys.CORE_DOCUMENT_PK, new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final ForeignKey<PaymentRecord, CoreCaseRecord> PAYMENT__PAYMENT_CORE_CASE_ID_FK = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payment_core_case_id_fk"), new TableField[] { Payment.PAYMENT.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<PersonRoleRecord, CoreCaseRecord> PERSON_ROLE__PERSON_ROLE_CORE_CASE_FK = Internal.createForeignKey(PersonRole.PERSON_ROLE, DSL.name("person_role_core_case_fk"), new TableField[] { PersonRole.PERSON_ROLE.CORE_CASE_ID }, Keys.CORE_CASE_PK, new TableField[] { CoreCase.CORE_CASE.CORE_CASE_ID }, true);
    public static final ForeignKey<PersonRoleRecord, CorePersonDocumentRecord> PERSON_ROLE__PERSON_ROLE_CPD_FK = Internal.createForeignKey(PersonRole.PERSON_ROLE, DSL.name("person_role_cpd_fk"), new TableField[] { PersonRole.PERSON_ROLE.CORE_PERSON_DOC_ID }, Keys.CORE_PERSON_DOCUMENT_ID_PK, new TableField[] { CorePersonDocument.CORE_PERSON_DOCUMENT.CORE_PERSON_DOCUMENT_ID }, true);
    public static final ForeignKey<PersonRoleAuditRecord, CorrectionLogRecord> PERSON_ROLE_AUDIT__PERSON_ROLE_CORRECTION_LOG_FK = Internal.createForeignKey(PersonRoleAudit.PERSON_ROLE_AUDIT, DSL.name("person_role_correction_log_fk"), new TableField[] { PersonRoleAudit.PERSON_ROLE_AUDIT.CORRECTION_LOG_ID }, Keys.CORRECTION_LOG_PK, new TableField[] { CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID }, true);
    public static final ForeignKey<PersonRoleAuditRecord, PersonRoleRecord> PERSON_ROLE_AUDIT__PERSON_ROLE_REF_FK = Internal.createForeignKey(PersonRoleAudit.PERSON_ROLE_AUDIT, DSL.name("person_role_ref_fk"), new TableField[] { PersonRoleAudit.PERSON_ROLE_AUDIT.RECORD_ID }, Keys.PERSON_ROLE_PK, new TableField[] { PersonRole.PERSON_ROLE.PERSON_ROLE_ID }, true);
    public static final ForeignKey<SpringSessionAttributesRecord, SpringSessionRecord> SPRING_SESSION_ATTRIBUTES__SPRING_SESSION_ATTRIBUTES_FK = Internal.createForeignKey(SpringSessionAttributes.SPRING_SESSION_ATTRIBUTES, DSL.name("spring_session_attributes_fk"), new TableField[] { SpringSessionAttributes.SPRING_SESSION_ATTRIBUTES.SESSION_PRIMARY_ID }, Keys.SPRING_SESSION_PK, new TableField[] { SpringSession.SPRING_SESSION.PRIMARY_ID }, true);
    public static final ForeignKey<TechnicalDefectRecord, CoreDocumentRecord> TECHNICAL_DEFECT__TECHNICAL_DEFECT_CORE_PERSON_DOCUMENT = Internal.createForeignKey(TechnicalDefect.TECHNICAL_DEFECT, DSL.name("technical_defect_core_person_document"), new TableField[] { TechnicalDefect.TECHNICAL_DEFECT.CORE_DOCUMENT_ID }, Keys.CORE_DOCUMENT_PK, new TableField[] { CoreDocument.CORE_DOCUMENT.CORE_DOCUMENT_ID }, true);
    public static final ForeignKey<UploadedApplicationFileRecord, CoreUploadedApplicationRecord> UPLOADED_APPLICATION_FILE__UPLOADED_APPLICATION_FILE_APPLICATION_ID_FK = Internal.createForeignKey(UploadedApplicationFile.UPLOADED_APPLICATION_FILE, DSL.name("uploaded_application_file_application_id_fk"), new TableField[] { UploadedApplicationFile.UPLOADED_APPLICATION_FILE.APPLICATION_ID }, Keys.CORE_UPLOADED_APPLICATION_PK, new TableField[] { CoreUploadedApplication.CORE_UPLOADED_APPLICATION.CORE_UPLOADED_APPLICATION_ID }, true);
}
