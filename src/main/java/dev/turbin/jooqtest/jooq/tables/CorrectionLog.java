/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CorrectionLogRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Базовая таблица коррекции
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorrectionLog extends TableImpl<CorrectionLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.correction_log</code>
     */
    public static final CorrectionLog CORRECTION_LOG = new CorrectionLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorrectionLogRecord> getRecordType() {
        return CorrectionLogRecord.class;
    }

    /**
     * The column
     * <code>passport_international.correction_log.correction_log_id</code>.
     * Идентификатор записи
     */
    public final TableField<CorrectionLogRecord, Long> CORRECTION_LOG_ID = createField(DSL.name("correction_log_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор записи");

    /**
     * The column
     * <code>passport_international.correction_log.core_case_id</code>. Привязка
     * к делу
     */
    public final TableField<CorrectionLogRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "Привязка к делу");

    /**
     * The column
     * <code>passport_international.correction_log.core_document_id</code>.
     * Ссылка на базовый документ
     */
    public final TableField<CorrectionLogRecord, Long> CORE_DOCUMENT_ID = createField(DSL.name("core_document_id"), SQLDataType.BIGINT, this, "Ссылка на базовый документ");

    /**
     * The column
     * <code>passport_international.correction_log.correction_reason_desc</code>.
     * Причина изменяемого атрибута
     */
    public final TableField<CorrectionLogRecord, String> CORRECTION_REASON_DESC = createField(DSL.name("correction_reason_desc"), SQLDataType.CLOB.nullable(false), this, "Причина изменяемого атрибута");

    /**
     * The column
     * <code>passport_international.correction_log.changed_user</code>. Автор
     * внесения корректировок
     */
    public final TableField<CorrectionLogRecord, String> CHANGED_USER = createField(DSL.name("changed_user"), SQLDataType.VARCHAR(255).nullable(false), this, "Автор внесения корректировок");

    /**
     * The column
     * <code>passport_international.correction_log.create_dttm</code>. Дата
     * время вставки записи
     */
    public final TableField<CorrectionLogRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи");

    /**
     * The column
     * <code>passport_international.correction_log.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<CorrectionLogRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column <code>passport_international.correction_log.action_ind</code>.
     * Индикатор действия
     */
    public final TableField<CorrectionLogRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор действия");

    /**
     * The column <code>passport_international.correction_log.version</code>.
     * Версия изменения в деле
     */
    public final TableField<CorrectionLogRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "Версия изменения в деле");

    private CorrectionLog(Name alias, Table<CorrectionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorrectionLog(Name alias, Table<CorrectionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Базовая таблица коррекции"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.correction_log</code>
     * table reference
     */
    public CorrectionLog(String alias) {
        this(DSL.name(alias), CORRECTION_LOG);
    }

    /**
     * Create an aliased <code>passport_international.correction_log</code>
     * table reference
     */
    public CorrectionLog(Name alias) {
        this(alias, CORRECTION_LOG);
    }

    /**
     * Create a <code>passport_international.correction_log</code> table
     * reference
     */
    public CorrectionLog() {
        this(DSL.name("correction_log"), null);
    }

    public <O extends Record> CorrectionLog(Table<O> child, ForeignKey<O, CorrectionLogRecord> key) {
        super(child, key, CORRECTION_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORRECTION_LOG_CORE_CASE_IX, Indexes.CORRECTION_LOG_CORE_DOCUMENT_IX);
    }

    @Override
    public Identity<CorrectionLogRecord, Long> getIdentity() {
        return (Identity<CorrectionLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CorrectionLogRecord> getPrimaryKey() {
        return Keys.CORRECTION_LOG_PK;
    }

    @Override
    public List<ForeignKey<CorrectionLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORRECTION_LOG__CORRECTION_LOG_CORE_CASE_FK, Keys.CORRECTION_LOG__CORRECTION_LOG_CORE_DOCUMENT_FK);
    }

    private transient CoreCase _coreCase;
    private transient CoreDocument _coreDocument;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.CORRECTION_LOG__CORRECTION_LOG_CORE_CASE_FK);

        return _coreCase;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_document</code> table.
     */
    public CoreDocument coreDocument() {
        if (_coreDocument == null)
            _coreDocument = new CoreDocument(this, Keys.CORRECTION_LOG__CORRECTION_LOG_CORE_DOCUMENT_FK);

        return _coreDocument;
    }

    @Override
    public CorrectionLog as(String alias) {
        return new CorrectionLog(DSL.name(alias), this);
    }

    @Override
    public CorrectionLog as(Name alias) {
        return new CorrectionLog(alias, this);
    }

    @Override
    public CorrectionLog as(Table<?> alias) {
        return new CorrectionLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorrectionLog rename(String name) {
        return new CorrectionLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorrectionLog rename(Name name) {
        return new CorrectionLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorrectionLog rename(Table<?> name) {
        return new CorrectionLog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, String, String, OffsetDateTime, OffsetDateTime, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
