/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaChildRestrictRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function20;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Ограничения выезда несовершеннолетнего из АС РП
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AsrpFpaChildRestrict extends TableImpl<AsrpFpaChildRestrictRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.asrp_fpa_child_restrict</code>
     */
    public static final AsrpFpaChildRestrict ASRP_FPA_CHILD_RESTRICT = new AsrpFpaChildRestrict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AsrpFpaChildRestrictRecord> getRecordType() {
        return AsrpFpaChildRestrictRecord.class;
    }

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.asrp_fpa_child_restrict_id</code>.
     * Идентификатор записи в таблице
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> ASRP_FPA_CHILD_RESTRICT_ID = createField(DSL.name("asrp_fpa_child_restrict_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор записи в таблице");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.declarant_id</code>.
     * Идентификатор заявителя (законного представителя) из АС РП
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> DECLARANT_ID = createField(DSL.name("declarant_id"), SQLDataType.BIGINT, this, "Идентификатор заявителя (законного представителя) из АС РП");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.declarant_person_id</code>.
     * Идентификатор заявителя (законного представителя) из ЕСФЛ
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> DECLARANT_PERSON_ID = createField(DSL.name("declarant_person_id"), SQLDataType.BIGINT, this, "Идентификатор заявителя (законного представителя) из ЕСФЛ");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.declarant_doc_id</code>.
     * Документ законного представителя из АС РП
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> DECLARANT_DOC_ID = createField(DSL.name("declarant_doc_id"), SQLDataType.BIGINT, this, "Документ законного представителя из АС РП");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.declarant_person_document_id</code>.
     * Идентификатор ДУЛ законного представителя
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> DECLARANT_PERSON_DOCUMENT_ID = createField(DSL.name("declarant_person_document_id"), SQLDataType.BIGINT, this, "Идентификатор ДУЛ законного представителя");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.relation_doc</code>.
     * Документ, подтверждающий право законного представителя
     */
    public final TableField<AsrpFpaChildRestrictRecord, String> RELATION_DOC = createField(DSL.name("relation_doc"), SQLDataType.VARCHAR(255), this, "Документ, подтверждающий право законного представителя");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.child_id</code>.
     * Идентификатор ребенка из АС РП
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> CHILD_ID = createField(DSL.name("child_id"), SQLDataType.BIGINT, this, "Идентификатор ребенка из АС РП");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.child_person_id</code>.
     * Идентификатор ребенка из ЕСФЛ
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> CHILD_PERSON_ID = createField(DSL.name("child_person_id"), SQLDataType.BIGINT, this, "Идентификатор ребенка из ЕСФЛ");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.child_doc_id</code>.
     * Идентификатор документа ребенка из АС РП
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> CHILD_DOC_ID = createField(DSL.name("child_doc_id"), SQLDataType.BIGINT, this, "Идентификатор документа ребенка из АС РП");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.child_person_document_id</code>.
     * Идентификатор ДУЛ ребенка
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> CHILD_PERSON_DOCUMENT_ID = createField(DSL.name("child_person_document_id"), SQLDataType.BIGINT, this, "Идентификатор ДУЛ ребенка");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.declarant_reg</code>.
     * Адрес регистрации законного представителя
     */
    public final TableField<AsrpFpaChildRestrictRecord, String> DECLARANT_REG = createField(DSL.name("declarant_reg"), SQLDataType.VARCHAR(255), this, "Адрес регистрации законного представителя");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.declarent_address</code>.
     * Адрес фактического проживания
     */
    public final TableField<AsrpFpaChildRestrictRecord, String> DECLARENT_ADDRESS = createField(DSL.name("declarent_address"), SQLDataType.VARCHAR(255), this, "Адрес фактического проживания");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.child_reg</code>.
     * Адрес регистрации ребенка
     */
    public final TableField<AsrpFpaChildRestrictRecord, String> CHILD_REG = createField(DSL.name("child_reg"), SQLDataType.VARCHAR(255), this, "Адрес регистрации ребенка");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.information</code>.
     * Информация об ограничении
     */
    public final TableField<AsrpFpaChildRestrictRecord, String> INFORMATION = createField(DSL.name("information"), SQLDataType.VARCHAR(255), this, "Информация об ограничении");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.relation_type</code>.
     * Степень отношения
     */
    public final TableField<AsrpFpaChildRestrictRecord, Long> RELATION_TYPE = createField(DSL.name("relation_type"), SQLDataType.BIGINT, this, "Степень отношения");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<AsrpFpaChildRestrictRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<AsrpFpaChildRestrictRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.action_ind</code>.
     * Индикатор операции dml(i-insert,d-delete,u-update)
     */
    public final TableField<AsrpFpaChildRestrictRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции dml(i-insert,d-delete,u-update)");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<AsrpFpaChildRestrictRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.asrp_fpa_child_restrict.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<AsrpFpaChildRestrictRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    private AsrpFpaChildRestrict(Name alias, Table<AsrpFpaChildRestrictRecord> aliased) {
        this(alias, aliased, null);
    }

    private AsrpFpaChildRestrict(Name alias, Table<AsrpFpaChildRestrictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Ограничения выезда несовершеннолетнего из АС РП"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.asrp_fpa_child_restrict</code> table
     * reference
     */
    public AsrpFpaChildRestrict(String alias) {
        this(DSL.name(alias), ASRP_FPA_CHILD_RESTRICT);
    }

    /**
     * Create an aliased
     * <code>passport_international.asrp_fpa_child_restrict</code> table
     * reference
     */
    public AsrpFpaChildRestrict(Name alias) {
        this(alias, ASRP_FPA_CHILD_RESTRICT);
    }

    /**
     * Create a <code>passport_international.asrp_fpa_child_restrict</code>
     * table reference
     */
    public AsrpFpaChildRestrict() {
        this(DSL.name("asrp_fpa_child_restrict"), null);
    }

    public <O extends Record> AsrpFpaChildRestrict(Table<O> child, ForeignKey<O, AsrpFpaChildRestrictRecord> key) {
        super(child, key, ASRP_FPA_CHILD_RESTRICT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<AsrpFpaChildRestrictRecord, Long> getIdentity() {
        return (Identity<AsrpFpaChildRestrictRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AsrpFpaChildRestrictRecord> getPrimaryKey() {
        return Keys.ASRP_FPA_CHILD_RESTRICT_PK;
    }

    @Override
    public AsrpFpaChildRestrict as(String alias) {
        return new AsrpFpaChildRestrict(DSL.name(alias), this);
    }

    @Override
    public AsrpFpaChildRestrict as(Name alias) {
        return new AsrpFpaChildRestrict(alias, this);
    }

    @Override
    public AsrpFpaChildRestrict as(Table<?> alias) {
        return new AsrpFpaChildRestrict(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaChildRestrict rename(String name) {
        return new AsrpFpaChildRestrict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaChildRestrict rename(Name name) {
        return new AsrpFpaChildRestrict(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaChildRestrict rename(Table<?> name) {
        return new AsrpFpaChildRestrict(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, Long, Long, Long, Long, String, Long, Long, Long, Long, String, String, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function20<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function20<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
