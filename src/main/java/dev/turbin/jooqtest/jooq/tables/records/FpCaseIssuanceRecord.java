/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.FpCaseIssuance;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Дело о выдаче заграничного паспорта
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseIssuanceRecord extends UpdatableRecordImpl<FpCaseIssuanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.issuance_id</code>.
     * Идентификатор
     */
    public void setIssuanceId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.issuance_id</code>.
     * Идентификатор
     */
    public Long getIssuanceId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.preferential_category</code>.
     * Признак льготной категории заявителя, если 1
     */
    public void setPreferentialCategory(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.preferential_category</code>.
     * Признак льготной категории заявителя, если 1
     */
    public Boolean getPreferentialCategory() {
        return (Boolean) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.application_place_id</code>.
     * Тип места обращения
     */
    public void setApplicationPlaceId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.application_place_id</code>.
     * Тип места обращения
     */
    public Long getApplicationPlaceId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.secret_access_id</code>.
     * Имеется ли допуск к секретным сведениям
     */
    public void setSecretAccessId(Long value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.secret_access_id</code>.
     * Имеется ли допуск к секретным сведениям
     */
    public Long getSecretAccessId() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.contract_obligation_id</code>.
     * Имеются ли контрактные обязательства
     */
    public void setContractObligationId(Long value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.contract_obligation_id</code>.
     * Имеются ли контрактные обязательства
     */
    public Long getContractObligationId() {
        return (Long) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.application_reason_id</code>.
     * Цель получения (ЗАПОЛНЕНИЕ ПОЛЯ ОТМЕНЕНО)
     */
    public void setApplicationReasonId(Long value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.application_reason_id</code>.
     * Цель получения (ЗАПОЛНЕНИЕ ПОЛЯ ОТМЕНЕНО)
     */
    public Long getApplicationReasonId() {
        return (Long) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.application_urgent_reason_id</code>.
     * Причина срочности
     */
    public void setApplicationUrgentReasonId(Long value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.application_urgent_reason_id</code>.
     * Причина срочности
     */
    public Long getApplicationUrgentReasonId() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.addit_citizenship_id</code>.
     * Дополнительное гражданство
     */
    public void setAdditCitizenshipId(Long value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.addit_citizenship_id</code>.
     * Дополнительное гражданство
     */
    public Long getAdditCitizenshipId() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.target_country_id</code>.
     * Страна выезда на ПМЖ
     */
    public void setTargetCountryId(Long value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.target_country_id</code>.
     * Страна выезда на ПМЖ
     */
    public Long getTargetCountryId() {
        return (Long) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.applicant_category_id</code>.
     * Категория заявителя
     */
    public void setApplicantCategoryId(Long value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.applicant_category_id</code>.
     * Категория заявителя
     */
    public Long getApplicantCategoryId() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>passport_international.fp_case_issuance.issue_dt</code>.
     * Дата фактической выдачи паспорта
     */
    public void setIssueDt(LocalDate value) {
        set(10, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_issuance.issue_dt</code>.
     * Дата фактической выдачи паспорта
     */
    public LocalDate getIssueDt() {
        return (LocalDate) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.secret_access_dt</code>.
     * Дата оформления допуска к секретным сведениям
     */
    public void setSecretAccessDt(LocalDate value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.secret_access_dt</code>.
     * Дата оформления допуска к секретным сведениям
     */
    public LocalDate getSecretAccessDt() {
        return (LocalDate) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.contract_obligation_dt</code>.
     * Дата оформления контрактных обязательств
     */
    public void setContractObligationDt(LocalDate value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.contract_obligation_dt</code>.
     * Дата оформления контрактных обязательств
     */
    public LocalDate getContractObligationDt() {
        return (LocalDate) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.blank_receipt_dt</code>.
     * Дата получения бланка
     */
    public void setBlankReceiptDt(LocalDate value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.blank_receipt_dt</code>.
     * Дата получения бланка
     */
    public LocalDate getBlankReceiptDt() {
        return (LocalDate) get(13);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.secret_access_org_name</code>.
     * Название организации, для которой был оформлен допуск к секретным
     * сведениям
     */
    public void setSecretAccessOrgName(String value) {
        set(14, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.secret_access_org_name</code>.
     * Название организации, для которой был оформлен допуск к секретным
     * сведениям
     */
    public String getSecretAccessOrgName() {
        return (String) get(14);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.contract_obligation_org_name</code>.
     * Название организации, с которой были оформлены контрактные обязательства
     */
    public void setContractObligationOrgName(String value) {
        set(15, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.contract_obligation_org_name</code>.
     * Название организации, с которой были оформлены контрактные обязательства
     */
    public String getContractObligationOrgName() {
        return (String) get(15);
    }

    /**
     * Setter for <code>passport_international.fp_case_issuance.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public void setSrcId(Long value) {
        set(16, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_issuance.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public Long getSrcId() {
        return (Long) get(16);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(17, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(17);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(18, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(18);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public void setActionInd(String value) {
        set(19, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public String getActionInd() {
        return (String) get(19);
    }

    /**
     * Setter for <code>passport_international.fp_case_issuance.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public void setEffDttm(OffsetDateTime value) {
        set(20, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_issuance.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(20);
    }

    /**
     * Setter for <code>passport_international.fp_case_issuance.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public void setExpDttm(OffsetDateTime value) {
        set(21, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_issuance.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(21);
    }

    /**
     * Setter for <code>passport_international.fp_case_issuance.signer</code>.
     * Подписывающий сотрудник
     */
    public void setSigner(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_issuance.signer</code>.
     * Подписывающий сотрудник
     */
    public String getSigner() {
        return (String) get(22);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.reason_issue_id</code>.
     * Причина выдачи заграна
     */
    public void setReasonIssueId(Long value) {
        set(23, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.reason_issue_id</code>.
     * Причина выдачи заграна
     */
    public Long getReasonIssueId() {
        return (Long) get(23);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.convicted</code>. Осужден
     */
    public void setConvicted(Boolean value) {
        set(24, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.convicted</code>. Осужден
     */
    public Boolean getConvicted() {
        return (Boolean) get(24);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.military_contract</code>.
     * Призван на военную службу
     */
    public void setMilitaryContract(Boolean value) {
        set(25, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.military_contract</code>.
     * Призван на военную службу
     */
    public Boolean getMilitaryContract() {
        return (Boolean) get(25);
    }

    /**
     * Setter for <code>passport_international.fp_case_issuance.suspect</code>.
     * Подозреваемый в преступлении
     */
    public void setSuspect(Boolean value) {
        set(26, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_issuance.suspect</code>.
     * Подозреваемый в преступлении
     */
    public Boolean getSuspect() {
        return (Boolean) get(26);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.court_obligation_avoided</code>.
     * Уклоняется от обязательств наложенных судом
     */
    public void setCourtObligationAvoided(Boolean value) {
        set(27, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.court_obligation_avoided</code>.
     * Уклоняется от обязательств наложенных судом
     */
    public Boolean getCourtObligationAvoided() {
        return (Boolean) get(27);
    }

    /**
     * Setter for <code>passport_international.fp_case_issuance.bankrupt</code>.
     * Банкрот
     */
    public void setBankrupt(Boolean value) {
        set(28, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_issuance.bankrupt</code>.
     * Банкрот
     */
    public Boolean getBankrupt() {
        return (Boolean) get(28);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_issuance.type_applicant_id</code>.
     * Вид заявления (от совершенолетнего или от несовершеннолетнего)
     */
    public void setTypeApplicantId(Long value) {
        set(29, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_issuance.type_applicant_id</code>.
     * Вид заявления (от совершенолетнего или от несовершеннолетнего)
     */
    public Long getTypeApplicantId() {
        return (Long) get(29);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FpCaseIssuanceRecord
     */
    public FpCaseIssuanceRecord() {
        super(FpCaseIssuance.FP_CASE_ISSUANCE);
    }

    /**
     * Create a detached, initialised FpCaseIssuanceRecord
     */
    public FpCaseIssuanceRecord(Long issuanceId, Boolean preferentialCategory, Long applicationPlaceId, Long secretAccessId, Long contractObligationId, Long applicationReasonId, Long applicationUrgentReasonId, Long additCitizenshipId, Long targetCountryId, Long applicantCategoryId, LocalDate issueDt, LocalDate secretAccessDt, LocalDate contractObligationDt, LocalDate blankReceiptDt, String secretAccessOrgName, String contractObligationOrgName, Long srcId, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, OffsetDateTime effDttm, OffsetDateTime expDttm, String signer, Long reasonIssueId, Boolean convicted, Boolean militaryContract, Boolean suspect, Boolean courtObligationAvoided, Boolean bankrupt, Long typeApplicantId) {
        super(FpCaseIssuance.FP_CASE_ISSUANCE);

        setIssuanceId(issuanceId);
        setPreferentialCategory(preferentialCategory);
        setApplicationPlaceId(applicationPlaceId);
        setSecretAccessId(secretAccessId);
        setContractObligationId(contractObligationId);
        setApplicationReasonId(applicationReasonId);
        setApplicationUrgentReasonId(applicationUrgentReasonId);
        setAdditCitizenshipId(additCitizenshipId);
        setTargetCountryId(targetCountryId);
        setApplicantCategoryId(applicantCategoryId);
        setIssueDt(issueDt);
        setSecretAccessDt(secretAccessDt);
        setContractObligationDt(contractObligationDt);
        setBlankReceiptDt(blankReceiptDt);
        setSecretAccessOrgName(secretAccessOrgName);
        setContractObligationOrgName(contractObligationOrgName);
        setSrcId(srcId);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setEffDttm(effDttm);
        setExpDttm(expDttm);
        setSigner(signer);
        setReasonIssueId(reasonIssueId);
        setConvicted(convicted);
        setMilitaryContract(militaryContract);
        setSuspect(suspect);
        setCourtObligationAvoided(courtObligationAvoided);
        setBankrupt(bankrupt);
        setTypeApplicantId(typeApplicantId);
        resetChangedOnNotNull();
    }
}
