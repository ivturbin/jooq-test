/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpCancelRestrictCaseRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Дело об отмене ограничений
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCancelRestrictCase extends TableImpl<FpCancelRestrictCaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_cancel_restrict_case</code>
     */
    public static final FpCancelRestrictCase FP_CANCEL_RESTRICT_CASE = new FpCancelRestrictCase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpCancelRestrictCaseRecord> getRecordType() {
        return FpCancelRestrictCaseRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.cancel_restrict_id</code>.
     * Индефикатор дела
     */
    public final TableField<FpCancelRestrictCaseRecord, Long> CANCEL_RESTRICT_ID = createField(DSL.name("cancel_restrict_id"), SQLDataType.BIGINT.nullable(false), this, "Индефикатор дела");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.restrict_id</code>.
     * Индефикатор дела об ограничении
     */
    public final TableField<FpCancelRestrictCaseRecord, Long> RESTRICT_ID = createField(DSL.name("restrict_id"), SQLDataType.BIGINT.nullable(false), this, "Индефикатор дела об ограничении");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.type_doc</code>. Тип
     * документа подтверждающий права в отношении несовершеннолетнего лица
     */
    public final TableField<FpCancelRestrictCaseRecord, String> TYPE_DOC = createField(DSL.name("type_doc"), SQLDataType.VARCHAR(255).nullable(false), this, "Тип документа подтверждающий права в отношении несовершеннолетнего лица");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.doc_no</code>. Номер
     * документа подтверждающий права в отношении несовершеннолетнего лица
     */
    public final TableField<FpCancelRestrictCaseRecord, String> DOC_NO = createField(DSL.name("doc_no"), SQLDataType.VARCHAR(128), this, "Номер документа подтверждающий права в отношении несовершеннолетнего лица");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.issue_dt</code>.
     * Дата выдачи документа подтверждающего права в отношении
     * несовершеннолетнего лица
     */
    public final TableField<FpCancelRestrictCaseRecord, LocalDate> ISSUE_DT = createField(DSL.name("issue_dt"), SQLDataType.LOCALDATE, this, "Дата выдачи документа подтверждающего права в отношении несовершеннолетнего лица");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.end_restrict_from_dt</code>.
     * Дата окончания ограничения с
     */
    public final TableField<FpCancelRestrictCaseRecord, LocalDate> END_RESTRICT_FROM_DT = createField(DSL.name("end_restrict_from_dt"), SQLDataType.LOCALDATE.nullable(false), this, "Дата окончания ограничения с");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.end_restrict_to_dt</code>.
     * Дата окончания ограничения по
     */
    public final TableField<FpCancelRestrictCaseRecord, LocalDate> END_RESTRICT_TO_DT = createField(DSL.name("end_restrict_to_dt"), SQLDataType.LOCALDATE, this, "Дата окончания ограничения по");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.type_doc_base</code>.
     * Тип документа основания
     */
    public final TableField<FpCancelRestrictCaseRecord, String> TYPE_DOC_BASE = createField(DSL.name("type_doc_base"), SQLDataType.VARCHAR(255), this, "Тип документа основания");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.comment_base</code>.
     * Комментарий к основанию (решение суда и т.п.)
     */
    public final TableField<FpCancelRestrictCaseRecord, String> COMMENT_BASE = createField(DSL.name("comment_base"), SQLDataType.VARCHAR(2048), this, "Комментарий к основанию (решение суда и т.п.)");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.comment</code>.
     * Комментарий
     */
    public final TableField<FpCancelRestrictCaseRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(2048), this, "Комментарий");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<FpCancelRestrictCaseRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<FpCancelRestrictCaseRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<FpCancelRestrictCaseRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<FpCancelRestrictCaseRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpCancelRestrictCaseRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.fp_cancel_restrict_case.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpCancelRestrictCaseRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    private FpCancelRestrictCase(Name alias, Table<FpCancelRestrictCaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpCancelRestrictCase(Name alias, Table<FpCancelRestrictCaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Дело об отмене ограничений"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_cancel_restrict_case</code> table
     * reference
     */
    public FpCancelRestrictCase(String alias) {
        this(DSL.name(alias), FP_CANCEL_RESTRICT_CASE);
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_cancel_restrict_case</code> table
     * reference
     */
    public FpCancelRestrictCase(Name alias) {
        this(alias, FP_CANCEL_RESTRICT_CASE);
    }

    /**
     * Create a <code>passport_international.fp_cancel_restrict_case</code>
     * table reference
     */
    public FpCancelRestrictCase() {
        this(DSL.name("fp_cancel_restrict_case"), null);
    }

    public <O extends Record> FpCancelRestrictCase(Table<O> child, ForeignKey<O, FpCancelRestrictCaseRecord> key) {
        super(child, key, FP_CANCEL_RESTRICT_CASE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<FpCancelRestrictCaseRecord> getPrimaryKey() {
        return Keys.FP_CANCEL_RESTRICT_CASE_PK;
    }

    @Override
    public List<ForeignKey<FpCancelRestrictCaseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_CANCEL_RESTRICT_CASE__FP_CANCEL_RESTRICT_CASE_FP_CASE, Keys.FP_CANCEL_RESTRICT_CASE__FP_CANCEL_RESTRICT_CASE_FP_CASE_RESTRICT_FK);
    }

    private transient FpCase _fpCase;
    private transient FpCaseRestrict _fpCaseRestrict;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case</code> table.
     */
    public FpCase fpCase() {
        if (_fpCase == null)
            _fpCase = new FpCase(this, Keys.FP_CANCEL_RESTRICT_CASE__FP_CANCEL_RESTRICT_CASE_FP_CASE);

        return _fpCase;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case_restrict</code> table.
     */
    public FpCaseRestrict fpCaseRestrict() {
        if (_fpCaseRestrict == null)
            _fpCaseRestrict = new FpCaseRestrict(this, Keys.FP_CANCEL_RESTRICT_CASE__FP_CANCEL_RESTRICT_CASE_FP_CASE_RESTRICT_FK);

        return _fpCaseRestrict;
    }

    @Override
    public FpCancelRestrictCase as(String alias) {
        return new FpCancelRestrictCase(DSL.name(alias), this);
    }

    @Override
    public FpCancelRestrictCase as(Name alias) {
        return new FpCancelRestrictCase(alias, this);
    }

    @Override
    public FpCancelRestrictCase as(Table<?> alias) {
        return new FpCancelRestrictCase(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCancelRestrictCase rename(String name) {
        return new FpCancelRestrictCase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCancelRestrictCase rename(Name name) {
        return new FpCancelRestrictCase(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCancelRestrictCase rename(Table<?> name) {
        return new FpCancelRestrictCase(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, String, String, LocalDate, LocalDate, LocalDate, String, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super Long, ? super String, ? super String, ? super LocalDate, ? super LocalDate, ? super LocalDate, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super Long, ? super String, ? super String, ? super LocalDate, ? super LocalDate, ? super LocalDate, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
