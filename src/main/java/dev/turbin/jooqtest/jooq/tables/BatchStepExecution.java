/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.BatchStepExecutionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function18;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchStepExecution extends TableImpl<BatchStepExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.batch_step_execution</code>
     */
    public static final BatchStepExecution BATCH_STEP_EXECUTION = new BatchStepExecution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchStepExecutionRecord> getRecordType() {
        return BatchStepExecutionRecord.class;
    }

    /**
     * The column
     * <code>passport_international.batch_step_execution.step_execution_id</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> STEP_EXECUTION_ID = createField(DSL.name("step_execution_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.version</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.step_name</code>.
     */
    public final TableField<BatchStepExecutionRecord, String> STEP_NAME = createField(DSL.name("step_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.job_execution_id</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> JOB_EXECUTION_ID = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.start_time</code>.
     */
    public final TableField<BatchStepExecutionRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.end_time</code>.
     */
    public final TableField<BatchStepExecutionRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.status</code>.
     */
    public final TableField<BatchStepExecutionRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.commit_count</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> COMMIT_COUNT = createField(DSL.name("commit_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.read_count</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> READ_COUNT = createField(DSL.name("read_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.filter_count</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> FILTER_COUNT = createField(DSL.name("filter_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.write_count</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> WRITE_COUNT = createField(DSL.name("write_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.read_skip_count</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> READ_SKIP_COUNT = createField(DSL.name("read_skip_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.write_skip_count</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> WRITE_SKIP_COUNT = createField(DSL.name("write_skip_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.process_skip_count</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> PROCESS_SKIP_COUNT = createField(DSL.name("process_skip_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.rollback_count</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> ROLLBACK_COUNT = createField(DSL.name("rollback_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.exit_code</code>.
     */
    public final TableField<BatchStepExecutionRecord, String> EXIT_CODE = createField(DSL.name("exit_code"), SQLDataType.VARCHAR(2500), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.exit_message</code>.
     */
    public final TableField<BatchStepExecutionRecord, String> EXIT_MESSAGE = createField(DSL.name("exit_message"), SQLDataType.VARCHAR(2500), this, "");

    /**
     * The column
     * <code>passport_international.batch_step_execution.last_updated</code>.
     */
    public final TableField<BatchStepExecutionRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6), this, "");

    private BatchStepExecution(Name alias, Table<BatchStepExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchStepExecution(Name alias, Table<BatchStepExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.batch_step_execution</code> table reference
     */
    public BatchStepExecution(String alias) {
        this(DSL.name(alias), BATCH_STEP_EXECUTION);
    }

    /**
     * Create an aliased
     * <code>passport_international.batch_step_execution</code> table reference
     */
    public BatchStepExecution(Name alias) {
        this(alias, BATCH_STEP_EXECUTION);
    }

    /**
     * Create a <code>passport_international.batch_step_execution</code> table
     * reference
     */
    public BatchStepExecution() {
        this(DSL.name("batch_step_execution"), null);
    }

    public <O extends Record> BatchStepExecution(Table<O> child, ForeignKey<O, BatchStepExecutionRecord> key) {
        super(child, key, BATCH_STEP_EXECUTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<BatchStepExecutionRecord> getPrimaryKey() {
        return Keys.BATCH_STEP_EXECUTION_PKEY;
    }

    @Override
    public List<ForeignKey<BatchStepExecutionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BATCH_STEP_EXECUTION__JOB_EXEC_STEP_FK);
    }

    private transient BatchJobExecution _batchJobExecution;

    /**
     * Get the implicit join path to the
     * <code>passport_international.batch_job_execution</code> table.
     */
    public BatchJobExecution batchJobExecution() {
        if (_batchJobExecution == null)
            _batchJobExecution = new BatchJobExecution(this, Keys.BATCH_STEP_EXECUTION__JOB_EXEC_STEP_FK);

        return _batchJobExecution;
    }

    @Override
    public BatchStepExecution as(String alias) {
        return new BatchStepExecution(DSL.name(alias), this);
    }

    @Override
    public BatchStepExecution as(Name alias) {
        return new BatchStepExecution(alias, this);
    }

    @Override
    public BatchStepExecution as(Table<?> alias) {
        return new BatchStepExecution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecution rename(String name) {
        return new BatchStepExecution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecution rename(Name name) {
        return new BatchStepExecution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecution rename(Table<?> name) {
        return new BatchStepExecution(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, Long, String, Long, LocalDateTime, LocalDateTime, String, Long, Long, Long, Long, Long, Long, Long, Long, String, String, LocalDateTime> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function18<? super Long, ? super Long, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super Long, ? super Long, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
