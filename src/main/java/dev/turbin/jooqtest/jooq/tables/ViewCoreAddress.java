/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCoreAddressRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCoreAddress extends TableImpl<ViewCoreAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_address</code>
     */
    public static final ViewCoreAddress VIEW_CORE_ADDRESS = new ViewCoreAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCoreAddressRecord> getRecordType() {
        return ViewCoreAddressRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_address.core_address_id</code>.
     * идентификатор
     */
    public final TableField<ViewCoreAddressRecord, Long> CORE_ADDRESS_ID = createField(DSL.name("core_address_id"), SQLDataType.BIGINT, this, "идентификатор");

    /**
     * The column
     * <code>passport_international.view_core_address.country_id</code>. страна
     */
    public final TableField<ViewCoreAddressRecord, Long> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.BIGINT, this, "страна");

    /**
     * The column
     * <code>passport_international.view_core_address.address_object_id</code>.
     * идентификатор адресного объекта
     */
    public final TableField<ViewCoreAddressRecord, Long> ADDRESS_OBJECT_ID = createField(DSL.name("address_object_id"), SQLDataType.BIGINT, this, "идентификатор адресного объекта");

    /**
     * The column
     * <code>passport_international.view_core_address.housing_id</code>. жилое
     * помещение
     */
    public final TableField<ViewCoreAddressRecord, Long> HOUSING_ID = createField(DSL.name("housing_id"), SQLDataType.BIGINT, this, "жилое помещение");

    /**
     * The column
     * <code>passport_international.view_core_address.district_id</code>. район
     * города
     */
    public final TableField<ViewCoreAddressRecord, Long> DISTRICT_ID = createField(DSL.name("district_id"), SQLDataType.BIGINT, this, "район города");

    /**
     * The column <code>passport_international.view_core_address.src_id</code>.
     */
    public final TableField<ViewCoreAddressRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_address.create_dttm</code>. дата
     * время вставки записи
     */
    public final TableField<ViewCoreAddressRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "дата время вставки записи");

    /**
     * The column
     * <code>passport_international.view_core_address.modify_dttm</code>. дата
     * время последнего изменения записи
     */
    public final TableField<ViewCoreAddressRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.view_core_address.action_ind</code>.
     * индикатор действия
     */
    public final TableField<ViewCoreAddressRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "индикатор действия");

    /**
     * The column
     * <code>passport_international.view_core_address.eff_dttm</code>.
     */
    public final TableField<ViewCoreAddressRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_address.exp_dttm</code>.
     */
    public final TableField<ViewCoreAddressRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_address.old_system_value_cval</code>.
     * Значение смигрированное из старых систем
     */
    public final TableField<ViewCoreAddressRecord, String> OLD_SYSTEM_VALUE_CVAL = createField(DSL.name("old_system_value_cval"), SQLDataType.VARCHAR(1000), this, "Значение смигрированное из старых систем");

    private ViewCoreAddress(Name alias, Table<ViewCoreAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCoreAddress(Name alias, Table<ViewCoreAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_address" as  SELECT core_address.core_address_id,
         core_address.country_id,
         core_address.addr_object_id AS address_object_id,
         core_address.housing_id,
         core_address.district_id,
         core_address.src_id,
         core_address.create_dttm,
         core_address.modify_dttm,
         core_address.action_ind,
         core_address.eff_dttm,
         core_address.exp_dttm,
         core_address.old_system_value_cval
        FROM core_address;
        """));
    }

    /**
     * Create an aliased <code>passport_international.view_core_address</code>
     * table reference
     */
    public ViewCoreAddress(String alias) {
        this(DSL.name(alias), VIEW_CORE_ADDRESS);
    }

    /**
     * Create an aliased <code>passport_international.view_core_address</code>
     * table reference
     */
    public ViewCoreAddress(Name alias) {
        this(alias, VIEW_CORE_ADDRESS);
    }

    /**
     * Create a <code>passport_international.view_core_address</code> table
     * reference
     */
    public ViewCoreAddress() {
        this(DSL.name("view_core_address"), null);
    }

    public <O extends Record> ViewCoreAddress(Table<O> child, ForeignKey<O, ViewCoreAddressRecord> key) {
        super(child, key, VIEW_CORE_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCoreAddress as(String alias) {
        return new ViewCoreAddress(DSL.name(alias), this);
    }

    @Override
    public ViewCoreAddress as(Name alias) {
        return new ViewCoreAddress(alias, this);
    }

    @Override
    public ViewCoreAddress as(Table<?> alias) {
        return new ViewCoreAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreAddress rename(String name) {
        return new ViewCoreAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreAddress rename(Name name) {
        return new ViewCoreAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreAddress rename(Table<?> name) {
        return new ViewCoreAddress(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, Long, Long, Long, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
