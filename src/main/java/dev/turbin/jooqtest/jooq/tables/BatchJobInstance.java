/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.BatchJobInstanceRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchJobInstance extends TableImpl<BatchJobInstanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.batch_job_instance</code>
     */
    public static final BatchJobInstance BATCH_JOB_INSTANCE = new BatchJobInstance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchJobInstanceRecord> getRecordType() {
        return BatchJobInstanceRecord.class;
    }

    /**
     * The column
     * <code>passport_international.batch_job_instance.job_instance_id</code>.
     */
    public final TableField<BatchJobInstanceRecord, Long> JOB_INSTANCE_ID = createField(DSL.name("job_instance_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_instance.version</code>.
     */
    public final TableField<BatchJobInstanceRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_job_instance.job_name</code>.
     */
    public final TableField<BatchJobInstanceRecord, String> JOB_NAME = createField(DSL.name("job_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_instance.job_key</code>.
     */
    public final TableField<BatchJobInstanceRecord, String> JOB_KEY = createField(DSL.name("job_key"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private BatchJobInstance(Name alias, Table<BatchJobInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchJobInstance(Name alias, Table<BatchJobInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.batch_job_instance</code>
     * table reference
     */
    public BatchJobInstance(String alias) {
        this(DSL.name(alias), BATCH_JOB_INSTANCE);
    }

    /**
     * Create an aliased <code>passport_international.batch_job_instance</code>
     * table reference
     */
    public BatchJobInstance(Name alias) {
        this(alias, BATCH_JOB_INSTANCE);
    }

    /**
     * Create a <code>passport_international.batch_job_instance</code> table
     * reference
     */
    public BatchJobInstance() {
        this(DSL.name("batch_job_instance"), null);
    }

    public <O extends Record> BatchJobInstance(Table<O> child, ForeignKey<O, BatchJobInstanceRecord> key) {
        super(child, key, BATCH_JOB_INSTANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<BatchJobInstanceRecord> getPrimaryKey() {
        return Keys.BATCH_JOB_INSTANCE_PKEY;
    }

    @Override
    public List<UniqueKey<BatchJobInstanceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.JOB_INST_UN);
    }

    @Override
    public BatchJobInstance as(String alias) {
        return new BatchJobInstance(DSL.name(alias), this);
    }

    @Override
    public BatchJobInstance as(Name alias) {
        return new BatchJobInstance(alias, this);
    }

    @Override
    public BatchJobInstance as(Table<?> alias) {
        return new BatchJobInstance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobInstance rename(String name) {
        return new BatchJobInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobInstance rename(Name name) {
        return new BatchJobInstance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobInstance rename(Table<?> name) {
        return new BatchJobInstance(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
