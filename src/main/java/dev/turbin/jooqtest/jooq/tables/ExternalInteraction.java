/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ExternalInteractionRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица внешних взаимодействий
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExternalInteraction extends TableImpl<ExternalInteractionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.external_interaction</code>
     */
    public static final ExternalInteraction EXTERNAL_INTERACTION = new ExternalInteraction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExternalInteractionRecord> getRecordType() {
        return ExternalInteractionRecord.class;
    }

    /**
     * The column
     * <code>passport_international.external_interaction.external_interaction_id</code>.
     * Идентификатор
     */
    public final TableField<ExternalInteractionRecord, Long> EXTERNAL_INTERACTION_ID = createField(DSL.name("external_interaction_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор");

    /**
     * The column
     * <code>passport_international.external_interaction.core_case_id</code>.
     * Привязка к делу
     */
    public final TableField<ExternalInteractionRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT.nullable(false), this, "Привязка к делу");

    /**
     * The column
     * <code>passport_international.external_interaction.system_id</code>.
     * Внешняя система (Ведомство)
     */
    public final TableField<ExternalInteractionRecord, Long> SYSTEM_ID = createField(DSL.name("system_id"), SQLDataType.BIGINT.nullable(false), this, "Внешняя система (Ведомство)");

    /**
     * The column
     * <code>passport_international.external_interaction.interaction_type_id</code>.
     * Тип взаимодействия (Бумажный, СМЭВ)
     */
    public final TableField<ExternalInteractionRecord, Long> INTERACTION_TYPE_ID = createField(DSL.name("interaction_type_id"), SQLDataType.BIGINT.nullable(false), this, "Тип взаимодействия (Бумажный, СМЭВ)");

    /**
     * The column
     * <code>passport_international.external_interaction.create_dt</code>. Дата
     * создания запроса
     */
    public final TableField<ExternalInteractionRecord, OffsetDateTime> CREATE_DT = createField(DSL.name("create_dt"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата создания запроса");

    /**
     * The column
     * <code>passport_international.external_interaction.request_dt</code>. Дата
     * отправки запроса
     */
    public final TableField<ExternalInteractionRecord, OffsetDateTime> REQUEST_DT = createField(DSL.name("request_dt"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата отправки запроса");

    /**
     * The column
     * <code>passport_international.external_interaction.response_dt</code>.
     * Дата ответа
     */
    public final TableField<ExternalInteractionRecord, OffsetDateTime> RESPONSE_DT = createField(DSL.name("response_dt"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата ответа");

    /**
     * The column
     * <code>passport_international.external_interaction.check_dt</code>. Дата
     * обработки ответа
     */
    public final TableField<ExternalInteractionRecord, OffsetDateTime> CHECK_DT = createField(DSL.name("check_dt"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата обработки ответа");

    /**
     * The column
     * <code>passport_international.external_interaction.response_cval</code>.
     * Ответ в текстовом виде
     */
    public final TableField<ExternalInteractionRecord, String> RESPONSE_CVAL = createField(DSL.name("response_cval"), SQLDataType.CLOB, this, "Ответ в текстовом виде");

    /**
     * The column
     * <code>passport_international.external_interaction.version</code>.
     */
    public final TableField<ExternalInteractionRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.external_interaction.create_dttm</code>.
     */
    public final TableField<ExternalInteractionRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.external_interaction.modify_dttm</code>.
     */
    public final TableField<ExternalInteractionRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.external_interaction.action_ind</code>.
     */
    public final TableField<ExternalInteractionRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>passport_international.external_interaction.request_cval</code>.
     * Запрос в текстовом виде
     */
    public final TableField<ExternalInteractionRecord, String> REQUEST_CVAL = createField(DSL.name("request_cval"), SQLDataType.CLOB, this, "Запрос в текстовом виде");

    /**
     * The column
     * <code>passport_international.external_interaction.interaction_subtype_id</code>.
     * Уникальный тип запроса
     */
    public final TableField<ExternalInteractionRecord, Long> INTERACTION_SUBTYPE_ID = createField(DSL.name("interaction_subtype_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "Уникальный тип запроса");

    /**
     * The column
     * <code>passport_international.external_interaction.response_file_uuid</code>.
     * UUID файла ответа по СМЕВ
     */
    public final TableField<ExternalInteractionRecord, UUID> RESPONSE_FILE_UUID = createField(DSL.name("response_file_uuid"), SQLDataType.UUID, this, "UUID файла ответа по СМЕВ");

    /**
     * The column
     * <code>passport_international.external_interaction.short_smev_answer_cval</code>.
     * Краткий ответ на основании полученного ответа от СМЕВа
     */
    public final TableField<ExternalInteractionRecord, String> SHORT_SMEV_ANSWER_CVAL = createField(DSL.name("short_smev_answer_cval"), SQLDataType.VARCHAR(256), this, "Краткий ответ на основании полученного ответа от СМЕВа");

    /**
     * The column
     * <code>passport_international.external_interaction.migr_source_system_id</code>.
     * Идентификатор системы источник
     */
    public final TableField<ExternalInteractionRecord, Long> MIGR_SOURCE_SYSTEM_ID = createField(DSL.name("migr_source_system_id"), SQLDataType.BIGINT, this, "Идентификатор системы источник");

    /**
     * The column
     * <code>passport_international.external_interaction.migr_source_id</code>.
     * Идентификатор в системе источник
     */
    public final TableField<ExternalInteractionRecord, Long> MIGR_SOURCE_ID = createField(DSL.name("migr_source_id"), SQLDataType.BIGINT, this, "Идентификатор в системе источник");

    private ExternalInteraction(Name alias, Table<ExternalInteractionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExternalInteraction(Name alias, Table<ExternalInteractionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица внешних взаимодействий"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.external_interaction</code> table reference
     */
    public ExternalInteraction(String alias) {
        this(DSL.name(alias), EXTERNAL_INTERACTION);
    }

    /**
     * Create an aliased
     * <code>passport_international.external_interaction</code> table reference
     */
    public ExternalInteraction(Name alias) {
        this(alias, EXTERNAL_INTERACTION);
    }

    /**
     * Create a <code>passport_international.external_interaction</code> table
     * reference
     */
    public ExternalInteraction() {
        this(DSL.name("external_interaction"), null);
    }

    public <O extends Record> ExternalInteraction(Table<O> child, ForeignKey<O, ExternalInteractionRecord> key) {
        super(child, key, EXTERNAL_INTERACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXTERNAL_INTERACTION_CORE_CASE_ID_IX, Indexes.EXTERNAL_INTERACTION_MIGR_IX);
    }

    @Override
    public Identity<ExternalInteractionRecord, Long> getIdentity() {
        return (Identity<ExternalInteractionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExternalInteractionRecord> getPrimaryKey() {
        return Keys.EXTERNAL_INTERACTION_PK;
    }

    @Override
    public List<ForeignKey<ExternalInteractionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXTERNAL_INTERACTION__EXTERNAL_INTERACTION_CORE_CASE_ID_FK);
    }

    private transient CoreCase _coreCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.EXTERNAL_INTERACTION__EXTERNAL_INTERACTION_CORE_CASE_ID_FK);

        return _coreCase;
    }

    @Override
    public ExternalInteraction as(String alias) {
        return new ExternalInteraction(DSL.name(alias), this);
    }

    @Override
    public ExternalInteraction as(Name alias) {
        return new ExternalInteraction(alias, this);
    }

    @Override
    public ExternalInteraction as(Table<?> alias) {
        return new ExternalInteraction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalInteraction rename(String name) {
        return new ExternalInteraction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalInteraction rename(Name name) {
        return new ExternalInteraction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExternalInteraction rename(Table<?> name) {
        return new ExternalInteraction(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, Long, Long, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, Integer, OffsetDateTime, OffsetDateTime, String, String, Long, UUID, String, Long, Long> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Long, ? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super Long, ? super UUID, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Long, ? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super Long, ? super UUID, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
