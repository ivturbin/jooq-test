/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewChargeRecord;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCharge extends TableImpl<ViewChargeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>passport_international.view_charge</code>
     */
    public static final ViewCharge VIEW_CHARGE = new ViewCharge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewChargeRecord> getRecordType() {
        return ViewChargeRecord.class;
    }

    /**
     * The column <code>passport_international.view_charge.charge_id</code>.
     * Идентификатор записи
     */
    public final TableField<ViewChargeRecord, Long> CHARGE_ID = createField(DSL.name("charge_id"), SQLDataType.BIGINT, this, "Идентификатор записи");

    /**
     * The column <code>passport_international.view_charge.core_case_id</code>.
     */
    public final TableField<ViewChargeRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_charge.supplier_bill_uin</code>.
     * Уникальный идентификатор начисления (УИН)
     */
    public final TableField<ViewChargeRecord, String> SUPPLIER_BILL_UIN = createField(DSL.name("supplier_bill_uin"), SQLDataType.VARCHAR(25), this, "Уникальный идентификатор начисления (УИН)");

    /**
     * The column <code>passport_international.view_charge.status_code</code>.
     * Статус начисления
     */
    public final TableField<ViewChargeRecord, String> STATUS_CODE = createField(DSL.name("status_code"), SQLDataType.VARCHAR(128), this, "Статус начисления");

    /**
     * The column
     * <code>passport_international.view_charge.amount_rub_coin</code>.
     * Рассчитанная сумма начисления в копейках
     */
    public final TableField<ViewChargeRecord, Long> AMOUNT_RUB_COIN = createField(DSL.name("amount_rub_coin"), SQLDataType.BIGINT, this, "Рассчитанная сумма начисления в копейках");

    /**
     * The column
     * <code>passport_international.view_charge.balance_rub_coin</code>.
     * Оставшаяся сумма к оплате в копейках
     */
    public final TableField<ViewChargeRecord, Long> BALANCE_RUB_COIN = createField(DSL.name("balance_rub_coin"), SQLDataType.BIGINT, this, "Оставшаяся сумма к оплате в копейках");

    /**
     * The column <code>passport_international.view_charge.create_dttm</code>.
     * Дата время вставки записи
     */
    public final TableField<ViewChargeRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время вставки записи");

    /**
     * The column <code>passport_international.view_charge.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<ViewChargeRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время последнего изменения записи");

    /**
     * The column <code>passport_international.view_charge.action_ind</code>.
     * Индикатор действия
     */
    public final TableField<ViewChargeRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "Индикатор действия");

    /**
     * The column <code>passport_international.view_charge.version</code>.
     */
    public final TableField<ViewChargeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_kind_code</code>.
     */
    public final TableField<ViewChargeRecord, String> PAYER_KIND_CODE = createField(DSL.name("payer_kind_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_person_id</code>.
     */
    public final TableField<ViewChargeRecord, Long> PAYER_PERSON_ID = createField(DSL.name("payer_person_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_full_name</code>.
     */
    public final TableField<ViewChargeRecord, String> PAYER_FULL_NAME = createField(DSL.name("payer_full_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_doc_type_code</code>.
     */
    public final TableField<ViewChargeRecord, String> PAYER_DOC_TYPE_CODE = createField(DSL.name("payer_doc_type_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_doc_series_code</code>.
     */
    public final TableField<ViewChargeRecord, String> PAYER_DOC_SERIES_CODE = createField(DSL.name("payer_doc_series_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>passport_international.view_charge.payer_doc_no</code>.
     */
    public final TableField<ViewChargeRecord, String> PAYER_DOC_NO = createField(DSL.name("payer_doc_no"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_account_no</code>.
     */
    public final TableField<ViewChargeRecord, String> PAYER_ACCOUNT_NO = createField(DSL.name("payer_account_no"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_bank_name</code>.
     */
    public final TableField<ViewChargeRecord, String> PAYER_BANK_NAME = createField(DSL.name("payer_bank_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_bank_bik</code>.
     */
    public final TableField<ViewChargeRecord, String> PAYER_BANK_BIK = createField(DSL.name("payer_bank_bik"), SQLDataType.VARCHAR(9), this, "");

    /**
     * The column
     * <code>passport_international.view_charge.payer_doc_type_id</code>.
     * Идентификатор типа документа удостоверяющего личность плательщика (НСИ)
     */
    public final TableField<ViewChargeRecord, Long> PAYER_DOC_TYPE_ID = createField(DSL.name("payer_doc_type_id"), SQLDataType.BIGINT, this, "Идентификатор типа документа удостоверяющего личность плательщика (НСИ)");

    /**
     * The column <code>passport_international.view_charge.purpose_name</code>.
     * Назначение платежа
     */
    public final TableField<ViewChargeRecord, String> PURPOSE_NAME = createField(DSL.name("purpose_name"), SQLDataType.CLOB, this, "Назначение платежа");

    /**
     * The column <code>passport_international.view_charge.kbk</code>. Код
     * бюджетной классификации (КБK)
     */
    public final TableField<ViewChargeRecord, String> KBK = createField(DSL.name("kbk"), SQLDataType.VARCHAR(20), this, "Код бюджетной классификации (КБK)");

    /**
     * The column
     * <code>passport_international.view_charge.payer_identifier_key</code>.
     * Уникальный идентификатор плательщика
     */
    public final TableField<ViewChargeRecord, String> PAYER_IDENTIFIER_KEY = createField(DSL.name("payer_identifier_key"), SQLDataType.VARCHAR(50), this, "Уникальный идентификатор плательщика");

    /**
     * The column <code>passport_international.view_charge.type_cval</code>. Тип
     * начисления
     */
    public final TableField<ViewChargeRecord, String> TYPE_CVAL = createField(DSL.name("type_cval"), SQLDataType.CLOB, this, "Тип начисления");

    private ViewCharge(Name alias, Table<ViewChargeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCharge(Name alias, Table<ViewChargeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_charge" as  SELECT charge.charge_id,
         charge.case_id AS core_case_id,
         charge.supplier_bill_uin,
         charge.status_code,
         charge.amount_rub_coin,
         charge.balance_rub_coin,
         charge.create_dttm,
         charge.modify_dttm,
         charge.action_ind,
         charge.version,
         charge.payer_kind_code,
         charge.payer_person_id,
         charge.payer_full_name,
         charge.payer_doc_type_code,
         charge.payer_doc_series_code,
         charge.payer_doc_no,
         charge.payer_account_no,
         charge.payer_bank_name,
         charge.payer_bank_bik,
         charge.payer_doc_type_id,
         charge.purpose_name,
         charge.kbk,
         charge.payer_identifier_key,
         charge.type_cval
        FROM charge;
        """));
    }

    /**
     * Create an aliased <code>passport_international.view_charge</code> table
     * reference
     */
    public ViewCharge(String alias) {
        this(DSL.name(alias), VIEW_CHARGE);
    }

    /**
     * Create an aliased <code>passport_international.view_charge</code> table
     * reference
     */
    public ViewCharge(Name alias) {
        this(alias, VIEW_CHARGE);
    }

    /**
     * Create a <code>passport_international.view_charge</code> table reference
     */
    public ViewCharge() {
        this(DSL.name("view_charge"), null);
    }

    public <O extends Record> ViewCharge(Table<O> child, ForeignKey<O, ViewChargeRecord> key) {
        super(child, key, VIEW_CHARGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCharge as(String alias) {
        return new ViewCharge(DSL.name(alias), this);
    }

    @Override
    public ViewCharge as(Name alias) {
        return new ViewCharge(alias, this);
    }

    @Override
    public ViewCharge as(Table<?> alias) {
        return new ViewCharge(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCharge rename(String name) {
        return new ViewCharge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCharge rename(Name name) {
        return new ViewCharge(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCharge rename(Table<?> name) {
        return new ViewCharge(name.getQualifiedName(), null);
    }
}
