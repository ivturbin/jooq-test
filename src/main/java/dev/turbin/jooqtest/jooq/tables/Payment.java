/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.PaymentRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function18;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Информация о платежах
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>passport_international.payment</code>
     */
    public static final Payment PAYMENT = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>passport_international.payment.payment_id</code>.
     * Идентификатор записи
     */
    public final TableField<PaymentRecord, Long> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор записи");

    /**
     * The column <code>passport_international.payment.payment_key</code>.
     * Уникальный идентификатор платежа (УИП)
     */
    public final TableField<PaymentRecord, String> PAYMENT_KEY = createField(DSL.name("payment_key"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Уникальный идентификатор платежа (УИП)");

    /**
     * The column <code>passport_international.payment.core_case_id</code>.
     * Идентификатор дела к которому относится платеж
     */
    public final TableField<PaymentRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор дела к которому относится платеж");

    /**
     * The column <code>passport_international.payment.amount_rub_coin</code>.
     * Сумма начисления в копейках
     */
    public final TableField<PaymentRecord, Long> AMOUNT_RUB_COIN = createField(DSL.name("amount_rub_coin"), SQLDataType.BIGINT.nullable(false), this, "Сумма начисления в копейках");

    /**
     * The column <code>passport_international.payment.purpose_name</code>.
     * Назначение платежа
     */
    public final TableField<PaymentRecord, String> PURPOSE_NAME = createField(DSL.name("purpose_name"), SQLDataType.VARCHAR(256), this, "Назначение платежа");

    /**
     * The column <code>passport_international.payment.payment_dttm</code>. Дата
     * соверешения платежа
     */
    public final TableField<PaymentRecord, OffsetDateTime> PAYMENT_DTTM = createField(DSL.name("payment_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Дата соверешения платежа");

    /**
     * The column <code>passport_international.payment.kbk</code>. Код бюджетной
     * классификации (КБК)
     */
    public final TableField<PaymentRecord, String> KBK = createField(DSL.name("kbk"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Код бюджетной классификации (КБК)");

    /**
     * The column <code>passport_international.payment.oktmo</code>. Код по
     * общероссийскому классификатору территорий муниципальных образований
     * (ОКТМО)
     */
    public final TableField<PaymentRecord, String> OKTMO = createField(DSL.name("oktmo"), SQLDataType.VARCHAR(11).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Код по общероссийскому классификатору территорий муниципальных образований (ОКТМО)");

    /**
     * The column
     * <code>passport_international.payment.transaction_kind_cval</code>. Вид
     * операции Возможные значения: `01` – платежное поручение `06` – инкассовое
     * поручение `16` – платежный ордер
     */
    public final TableField<PaymentRecord, String> TRANSACTION_KIND_CVAL = createField(DSL.name("transaction_kind_cval"), SQLDataType.CLOB, this, "Вид операции Возможные значения: `01` – платежное поручение `06` – инкассовое поручение `16` – платежный ордер");

    /**
     * The column <code>passport_international.payment.supplier_bill_uin</code>.
     * Уникальный идентификатор начисления (УИН), когда платёж сквитирован
     */
    public final TableField<PaymentRecord, String> SUPPLIER_BILL_UIN = createField(DSL.name("supplier_bill_uin"), SQLDataType.VARCHAR(25).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Уникальный идентификатор начисления (УИН), когда платёж сквитирован");

    /**
     * The column <code>passport_international.payment.tax_document_no</code>.
     * Поле номер 108: Показатель номера документа
     */
    public final TableField<PaymentRecord, String> TAX_DOCUMENT_NO = createField(DSL.name("tax_document_no"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Поле номер 108: Показатель номера документа");

    /**
     * The column <code>passport_international.payment.status_bool</code>.
     * Статус платежа true - оплачен, false - не оплачен
     */
    public final TableField<PaymentRecord, Boolean> STATUS_BOOL = createField(DSL.name("status_bool"), SQLDataType.BOOLEAN.nullable(false), this, "Статус платежа true - оплачен, false - не оплачен");

    /**
     * The column <code>passport_international.payment.tax_document_dt</code>.
     * Поле номер 109: Показатель даты документа
     */
    public final TableField<PaymentRecord, LocalDate> TAX_DOCUMENT_DT = createField(DSL.name("tax_document_dt"), SQLDataType.LOCALDATE, this, "Поле номер 109: Показатель даты документа");

    /**
     * The column <code>passport_international.payment.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public final TableField<PaymentRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column <code>passport_international.payment.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<PaymentRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column <code>passport_international.payment.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<PaymentRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column <code>passport_international.payment.version</code>.
     */
    public final TableField<PaymentRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>passport_international.payment.bill_status_ind</code>.
     * Статус квитирования. 1 - Сквитировано *2 - Предварительно сквитировано *
     * 3 - Не сквитировано * 4 - Сквитировано с отсутствующим в системе платежом
     * * 5 - Принудительно сквитировано с платежом 
     */
    public final TableField<PaymentRecord, String> BILL_STATUS_IND = createField(DSL.name("bill_status_ind"), SQLDataType.VARCHAR(1), this, "Статус квитирования. 1 - Сквитировано *2 - Предварительно сквитировано * 3 - Не сквитировано * 4 - Сквитировано с отсутствующим в системе платежом * 5 - Принудительно сквитировано с платежом ");

    private Payment(Name alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Информация о платежах"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.payment</code> table
     * reference
     */
    public Payment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>passport_international.payment</code> table
     * reference
     */
    public Payment(Name alias) {
        this(alias, PAYMENT);
    }

    /**
     * Create a <code>passport_international.payment</code> table reference
     */
    public Payment() {
        this(DSL.name("payment"), null);
    }

    public <O extends Record> Payment(Table<O> child, ForeignKey<O, PaymentRecord> key) {
        super(child, key, PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<PaymentRecord, Long> getIdentity() {
        return (Identity<PaymentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentRecord> getPrimaryKey() {
        return Keys.PAYMENT_PK;
    }

    @Override
    public List<ForeignKey<PaymentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PAYMENT__PAYMENT_CORE_CASE_ID_FK);
    }

    private transient CoreCase _coreCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.PAYMENT__PAYMENT_CORE_CASE_ID_FK);

        return _coreCase;
    }

    @Override
    public Payment as(String alias) {
        return new Payment(DSL.name(alias), this);
    }

    @Override
    public Payment as(Name alias) {
        return new Payment(alias, this);
    }

    @Override
    public Payment as(Table<?> alias) {
        return new Payment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Name name) {
        return new Payment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Table<?> name) {
        return new Payment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, String, Long, Long, String, OffsetDateTime, String, String, String, String, String, Boolean, LocalDate, OffsetDateTime, OffsetDateTime, String, Integer, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function18<? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
