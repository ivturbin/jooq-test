/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCorePersonHiddenRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCorePersonHidden extends TableImpl<ViewCorePersonHiddenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_person_hidden</code>
     */
    public static final ViewCorePersonHidden VIEW_CORE_PERSON_HIDDEN = new ViewCorePersonHidden();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCorePersonHiddenRecord> getRecordType() {
        return ViewCorePersonHiddenRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_person_hidden.core_person_hidden_id</code>.
     */
    public final TableField<ViewCorePersonHiddenRecord, Long> CORE_PERSON_HIDDEN_ID = createField(DSL.name("core_person_hidden_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_person_hidden.hidden_status_bool</code>.
     */
    public final TableField<ViewCorePersonHiddenRecord, Boolean> HIDDEN_STATUS_BOOL = createField(DSL.name("hidden_status_bool"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.view_core_person_hidden.start_dt</code>.
     */
    public final TableField<ViewCorePersonHiddenRecord, LocalDate> START_DT = createField(DSL.name("start_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_core_person_hidden.create_dttm</code>.
     */
    public final TableField<ViewCorePersonHiddenRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_person_hidden.modify_dttm</code>.
     */
    public final TableField<ViewCorePersonHiddenRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_person_hidden.action_ind</code>.
     */
    public final TableField<ViewCorePersonHiddenRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    private ViewCorePersonHidden(Name alias, Table<ViewCorePersonHiddenRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCorePersonHidden(Name alias, Table<ViewCorePersonHiddenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_person_hidden" as  SELECT core_person_hiding.core_person_hiding_id AS core_person_hidden_id,
         core_person_hiding.hidden_status_bool,
         core_person_hiding.start_dt,
         core_person_hiding.create_dttm,
         core_person_hiding.modify_dttm,
         core_person_hiding.action_ind
        FROM core_person_hiding;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_core_person_hidden</code> table
     * reference
     */
    public ViewCorePersonHidden(String alias) {
        this(DSL.name(alias), VIEW_CORE_PERSON_HIDDEN);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_core_person_hidden</code> table
     * reference
     */
    public ViewCorePersonHidden(Name alias) {
        this(alias, VIEW_CORE_PERSON_HIDDEN);
    }

    /**
     * Create a <code>passport_international.view_core_person_hidden</code>
     * table reference
     */
    public ViewCorePersonHidden() {
        this(DSL.name("view_core_person_hidden"), null);
    }

    public <O extends Record> ViewCorePersonHidden(Table<O> child, ForeignKey<O, ViewCorePersonHiddenRecord> key) {
        super(child, key, VIEW_CORE_PERSON_HIDDEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCorePersonHidden as(String alias) {
        return new ViewCorePersonHidden(DSL.name(alias), this);
    }

    @Override
    public ViewCorePersonHidden as(Name alias) {
        return new ViewCorePersonHidden(alias, this);
    }

    @Override
    public ViewCorePersonHidden as(Table<?> alias) {
        return new ViewCorePersonHidden(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCorePersonHidden rename(String name) {
        return new ViewCorePersonHidden(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCorePersonHidden rename(Name name) {
        return new ViewCorePersonHidden(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCorePersonHidden rename(Table<?> name) {
        return new ViewCorePersonHidden(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Boolean, LocalDate, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Boolean, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Boolean, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
