/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.FpCaseRecall;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Дело об изъятии заграничного паспорта
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseRecallRecord extends UpdatableRecordImpl<FpCaseRecallRecord> implements Record10<Long, Long, Long, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>passport_international.fp_case_recall.recall_id</code>.
     * Идентификатор
     */
    public void setRecallId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_recall.recall_id</code>.
     * Идентификатор
     */
    public Long getRecallId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_recall.fp_case_issuance_id</code>.
     * Дело по выдаче заграничного паспорта
     */
    public void setFpCaseIssuanceId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_recall.fp_case_issuance_id</code>.
     * Дело по выдаче заграничного паспорта
     */
    public Long getFpCaseIssuanceId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_recall.recall_reason_id</code>.
     * Причина изъятия
     */
    public void setRecallReasonId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_recall.recall_reason_id</code>.
     * Причина изъятия
     */
    public Long getRecallReasonId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>passport_international.fp_case_recall.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public void setSrcId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_recall.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public Long getSrcId() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_recall.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_recall.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_recall.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_recall.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>passport_international.fp_case_recall.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public void setActionInd(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_recall.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public String getActionInd() {
        return (String) get(6);
    }

    /**
     * Setter for <code>passport_international.fp_case_recall.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public void setEffDttm(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_recall.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for <code>passport_international.fp_case_recall.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public void setExpDttm(OffsetDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_recall.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_recall.handover_date</code>. Дата
     * принятия паспорта на хранение
     */
    public void setHandoverDate(LocalDate value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_recall.handover_date</code>. Дата
     * принятия паспорта на хранение
     */
    public LocalDate getHandoverDate() {
        return (LocalDate) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, LocalDate> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, Long, Long, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, LocalDate> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FpCaseRecall.FP_CASE_RECALL.RECALL_ID;
    }

    @Override
    public Field<Long> field2() {
        return FpCaseRecall.FP_CASE_RECALL.FP_CASE_ISSUANCE_ID;
    }

    @Override
    public Field<Long> field3() {
        return FpCaseRecall.FP_CASE_RECALL.RECALL_REASON_ID;
    }

    @Override
    public Field<Long> field4() {
        return FpCaseRecall.FP_CASE_RECALL.SRC_ID;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return FpCaseRecall.FP_CASE_RECALL.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return FpCaseRecall.FP_CASE_RECALL.MODIFY_DTTM;
    }

    @Override
    public Field<String> field7() {
        return FpCaseRecall.FP_CASE_RECALL.ACTION_IND;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return FpCaseRecall.FP_CASE_RECALL.EFF_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field9() {
        return FpCaseRecall.FP_CASE_RECALL.EXP_DTTM;
    }

    @Override
    public Field<LocalDate> field10() {
        return FpCaseRecall.FP_CASE_RECALL.HANDOVER_DATE;
    }

    @Override
    public Long component1() {
        return getRecallId();
    }

    @Override
    public Long component2() {
        return getFpCaseIssuanceId();
    }

    @Override
    public Long component3() {
        return getRecallReasonId();
    }

    @Override
    public Long component4() {
        return getSrcId();
    }

    @Override
    public OffsetDateTime component5() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component6() {
        return getModifyDttm();
    }

    @Override
    public String component7() {
        return getActionInd();
    }

    @Override
    public OffsetDateTime component8() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime component9() {
        return getExpDttm();
    }

    @Override
    public LocalDate component10() {
        return getHandoverDate();
    }

    @Override
    public Long value1() {
        return getRecallId();
    }

    @Override
    public Long value2() {
        return getFpCaseIssuanceId();
    }

    @Override
    public Long value3() {
        return getRecallReasonId();
    }

    @Override
    public Long value4() {
        return getSrcId();
    }

    @Override
    public OffsetDateTime value5() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value6() {
        return getModifyDttm();
    }

    @Override
    public String value7() {
        return getActionInd();
    }

    @Override
    public OffsetDateTime value8() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime value9() {
        return getExpDttm();
    }

    @Override
    public LocalDate value10() {
        return getHandoverDate();
    }

    @Override
    public FpCaseRecallRecord value1(Long value) {
        setRecallId(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value2(Long value) {
        setFpCaseIssuanceId(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value3(Long value) {
        setRecallReasonId(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value4(Long value) {
        setSrcId(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value5(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value6(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value7(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value8(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value9(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord value10(LocalDate value) {
        setHandoverDate(value);
        return this;
    }

    @Override
    public FpCaseRecallRecord values(Long value1, Long value2, Long value3, Long value4, OffsetDateTime value5, OffsetDateTime value6, String value7, OffsetDateTime value8, OffsetDateTime value9, LocalDate value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FpCaseRecallRecord
     */
    public FpCaseRecallRecord() {
        super(FpCaseRecall.FP_CASE_RECALL);
    }

    /**
     * Create a detached, initialised FpCaseRecallRecord
     */
    public FpCaseRecallRecord(Long recallId, Long fpCaseIssuanceId, Long recallReasonId, Long srcId, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, OffsetDateTime effDttm, OffsetDateTime expDttm, LocalDate handoverDate) {
        super(FpCaseRecall.FP_CASE_RECALL);

        setRecallId(recallId);
        setFpCaseIssuanceId(fpCaseIssuanceId);
        setRecallReasonId(recallReasonId);
        setSrcId(srcId);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setEffDttm(effDttm);
        setExpDttm(expDttm);
        setHandoverDate(handoverDate);
        resetChangedOnNotNull();
    }
}
