/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCoreCountRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCoreCount extends TableImpl<ViewCoreCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_count</code>
     */
    public static final ViewCoreCount VIEW_CORE_COUNT = new ViewCoreCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCoreCountRecord> getRecordType() {
        return ViewCoreCountRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_count.core_count_id</code>.
     */
    public final TableField<ViewCoreCountRecord, Long> CORE_COUNT_ID = createField(DSL.name("core_count_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_count.department_code</code>.
     */
    public final TableField<ViewCoreCountRecord, String> DEPARTMENT_CODE = createField(DSL.name("department_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_core_count.region_code</code>.
     */
    public final TableField<ViewCoreCountRecord, String> REGION_CODE = createField(DSL.name("region_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_core_count.issue_year_version</code>.
     */
    public final TableField<ViewCoreCountRecord, Integer> ISSUE_YEAR_VERSION = createField(DSL.name("issue_year_version"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>passport_international.view_core_count.operation_code</code>.
     */
    public final TableField<ViewCoreCountRecord, String> OPERATION_CODE = createField(DSL.name("operation_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_core_count.last_serial_no_id</code>.
     */
    public final TableField<ViewCoreCountRecord, Long> LAST_SERIAL_NO_ID = createField(DSL.name("last_serial_no_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_count.create_dttm</code>.
     */
    public final TableField<ViewCoreCountRecord, LocalDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column
     * <code>passport_international.view_core_count.modify_dttm</code>.
     */
    public final TableField<ViewCoreCountRecord, LocalDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column
     * <code>passport_international.view_core_count.action_ind</code>.
     */
    public final TableField<ViewCoreCountRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    private ViewCoreCount(Name alias, Table<ViewCoreCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCoreCount(Name alias, Table<ViewCoreCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_count" as  SELECT core_counter.core_counter_id AS core_count_id,
         core_counter.department_code,
         core_counter.region_code,
         core_counter.issue_year AS issue_year_version,
         core_counter.operation_code,
         core_counter.last_serial_num AS last_serial_no_id,
         core_counter.create_dttm,
         core_counter.modify_dttm,
         core_counter.action_ind
        FROM core_counter;
        """));
    }

    /**
     * Create an aliased <code>passport_international.view_core_count</code>
     * table reference
     */
    public ViewCoreCount(String alias) {
        this(DSL.name(alias), VIEW_CORE_COUNT);
    }

    /**
     * Create an aliased <code>passport_international.view_core_count</code>
     * table reference
     */
    public ViewCoreCount(Name alias) {
        this(alias, VIEW_CORE_COUNT);
    }

    /**
     * Create a <code>passport_international.view_core_count</code> table
     * reference
     */
    public ViewCoreCount() {
        this(DSL.name("view_core_count"), null);
    }

    public <O extends Record> ViewCoreCount(Table<O> child, ForeignKey<O, ViewCoreCountRecord> key) {
        super(child, key, VIEW_CORE_COUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCoreCount as(String alias) {
        return new ViewCoreCount(DSL.name(alias), this);
    }

    @Override
    public ViewCoreCount as(Name alias) {
        return new ViewCoreCount(alias, this);
    }

    @Override
    public ViewCoreCount as(Table<?> alias) {
        return new ViewCoreCount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreCount rename(String name) {
        return new ViewCoreCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreCount rename(Name name) {
        return new ViewCoreCount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreCount rename(Table<?> name) {
        return new ViewCoreCount(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Integer, String, Long, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super Integer, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super Integer, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
