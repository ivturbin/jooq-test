/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpInformalLegalPersonRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Данные законного представителя выезд с которым запрещен
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpInformalLegalPerson extends TableImpl<FpInformalLegalPersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_informal_legal_person</code>
     */
    public static final FpInformalLegalPerson FP_INFORMAL_LEGAL_PERSON = new FpInformalLegalPerson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpInformalLegalPersonRecord> getRecordType() {
        return FpInformalLegalPersonRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.fp_informal_legal_person_id</code>.
     * Идентификатор
     */
    public final TableField<FpInformalLegalPersonRecord, Long> FP_INFORMAL_LEGAL_PERSON_ID = createField(DSL.name("fp_informal_legal_person_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.last_name</code>.
     * Фамилия
     */
    public final TableField<FpInformalLegalPersonRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(128), this, "Фамилия");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.first_name</code>.
     * Имя
     */
    public final TableField<FpInformalLegalPersonRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(128), this, "Имя");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.middle_name</code>.
     * Отчество
     */
    public final TableField<FpInformalLegalPersonRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(128), this, "Отчество");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.birthday_dt</code>.
     * Дата рождения
     */
    public final TableField<FpInformalLegalPersonRecord, LocalDate> BIRTHDAY_DT = createField(DSL.name("birthday_dt"), SQLDataType.LOCALDATE, this, "Дата рождения");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.birth_place</code>.
     * Место рождения
     */
    public final TableField<FpInformalLegalPersonRecord, String> BIRTH_PLACE = createField(DSL.name("birth_place"), SQLDataType.CLOB, this, "Место рождения");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.reg_living_address</code>.
     * Адрес регистрации по месту жительства
     */
    public final TableField<FpInformalLegalPersonRecord, String> REG_LIVING_ADDRESS = createField(DSL.name("reg_living_address"), SQLDataType.CLOB, this, "Адрес регистрации по месту жительства");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.citizenship</code>.
     * Гражданство
     */
    public final TableField<FpInformalLegalPersonRecord, Long> CITIZENSHIP = createField(DSL.name("citizenship"), SQLDataType.BIGINT, this, "Гражданство");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.relation_type_id</code>.
     * Степень родства
     */
    public final TableField<FpInformalLegalPersonRecord, Long> RELATION_TYPE_ID = createField(DSL.name("relation_type_id"), SQLDataType.BIGINT, this, "Степень родства");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.action_ind</code>.
     */
    public final TableField<FpInformalLegalPersonRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.create_dttm</code>.
     */
    public final TableField<FpInformalLegalPersonRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.modify_dttm</code>.
     */
    public final TableField<FpInformalLegalPersonRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.eff_dttm</code>.
     */
    public final TableField<FpInformalLegalPersonRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("'1899-12-31 23:30:17+02:30:17'::timestamp with time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.fp_informal_legal_person.exp_dttm</code>.
     */
    public final TableField<FpInformalLegalPersonRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("'9999-12-31 00:00:00+03'::timestamp with time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private FpInformalLegalPerson(Name alias, Table<FpInformalLegalPersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpInformalLegalPerson(Name alias, Table<FpInformalLegalPersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Данные законного представителя выезд с которым запрещен"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_informal_legal_person</code> table
     * reference
     */
    public FpInformalLegalPerson(String alias) {
        this(DSL.name(alias), FP_INFORMAL_LEGAL_PERSON);
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_informal_legal_person</code> table
     * reference
     */
    public FpInformalLegalPerson(Name alias) {
        this(alias, FP_INFORMAL_LEGAL_PERSON);
    }

    /**
     * Create a <code>passport_international.fp_informal_legal_person</code>
     * table reference
     */
    public FpInformalLegalPerson() {
        this(DSL.name("fp_informal_legal_person"), null);
    }

    public <O extends Record> FpInformalLegalPerson(Table<O> child, ForeignKey<O, FpInformalLegalPersonRecord> key) {
        super(child, key, FP_INFORMAL_LEGAL_PERSON);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<FpInformalLegalPersonRecord> getPrimaryKey() {
        return Keys.FP_INFORMAL_LEGAL_PERSON_PK;
    }

    @Override
    public List<ForeignKey<FpInformalLegalPersonRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_INFORMAL_LEGAL_PERSON__FP_INFORMAL_LEGAL_PERSON_FP_RESTRICT_INTERVAL_FK);
    }

    private transient FpRestrictInterval _fpRestrictInterval;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_restrict_interval</code> table.
     */
    public FpRestrictInterval fpRestrictInterval() {
        if (_fpRestrictInterval == null)
            _fpRestrictInterval = new FpRestrictInterval(this, Keys.FP_INFORMAL_LEGAL_PERSON__FP_INFORMAL_LEGAL_PERSON_FP_RESTRICT_INTERVAL_FK);

        return _fpRestrictInterval;
    }

    @Override
    public FpInformalLegalPerson as(String alias) {
        return new FpInformalLegalPerson(DSL.name(alias), this);
    }

    @Override
    public FpInformalLegalPerson as(Name alias) {
        return new FpInformalLegalPerson(alias, this);
    }

    @Override
    public FpInformalLegalPerson as(Table<?> alias) {
        return new FpInformalLegalPerson(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpInformalLegalPerson rename(String name) {
        return new FpInformalLegalPerson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpInformalLegalPerson rename(Name name) {
        return new FpInformalLegalPerson(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpInformalLegalPerson rename(Table<?> name) {
        return new FpInformalLegalPerson(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, String, LocalDate, String, String, Long, Long, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super String, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super String, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
