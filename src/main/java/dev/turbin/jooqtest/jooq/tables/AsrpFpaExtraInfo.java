/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaExtraInfoRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AsrpFpaExtraInfo extends TableImpl<AsrpFpaExtraInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.asrp_fpa_extra_info</code>
     */
    public static final AsrpFpaExtraInfo ASRP_FPA_EXTRA_INFO = new AsrpFpaExtraInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AsrpFpaExtraInfoRecord> getRecordType() {
        return AsrpFpaExtraInfoRecord.class;
    }

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.migr_id</code>.
     * Уникальный идентификатор записи
     */
    public final TableField<AsrpFpaExtraInfoRecord, Long> MIGR_ID = createField(DSL.name("migr_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Уникальный идентификатор записи");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.id_declaration</code>.
     * Идентификатор заявления
     */
    public final TableField<AsrpFpaExtraInfoRecord, Long> ID_DECLARATION = createField(DSL.name("id_declaration"), SQLDataType.BIGINT, this, "Идентификатор заявления");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.num_declaration</code>.
     * Номер заявления
     */
    public final TableField<AsrpFpaExtraInfoRecord, String> NUM_DECLARATION = createField(DSL.name("num_declaration"), SQLDataType.VARCHAR(255), this, "Номер заявления");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.date_declaration</code>.
     * Дата заявления
     */
    public final TableField<AsrpFpaExtraInfoRecord, OffsetDateTime> DATE_DECLARATION = createField(DSL.name("date_declaration"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата заявления");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.date_docs_on</code>.
     * Дата приема заявления
     */
    public final TableField<AsrpFpaExtraInfoRecord, OffsetDateTime> DATE_DOCS_ON = createField(DSL.name("date_docs_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата приема заявления");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.region_code</code>. Код
     * региона
     */
    public final TableField<AsrpFpaExtraInfoRecord, String> REGION_CODE = createField(DSL.name("region_code"), SQLDataType.VARCHAR(255), this, "Код региона");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.type_id</code>. Тип
     * загран паспорта
     */
    public final TableField<AsrpFpaExtraInfoRecord, String> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.VARCHAR(255), this, "Тип загран паспорта");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.purpose_id</code>. Цель
     * выдачи
     */
    public final TableField<AsrpFpaExtraInfoRecord, Long> PURPOSE_ID = createField(DSL.name("purpose_id"), SQLDataType.BIGINT, this, "Цель выдачи");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.reason_obrasch_id</code>.
     * Цель получения
     */
    public final TableField<AsrpFpaExtraInfoRecord, Long> REASON_OBRASCH_ID = createField(DSL.name("reason_obrasch_id"), SQLDataType.BIGINT, this, "Цель получения");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.going_country_id</code>.
     * Страна выезда
     */
    public final TableField<AsrpFpaExtraInfoRecord, Long> GOING_COUNTRY_ID = createField(DSL.name("going_country_id"), SQLDataType.BIGINT, this, "Страна выезда");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.bi_place_str_lat</code>.
     * Место рождения латиницей
     */
    public final TableField<AsrpFpaExtraInfoRecord, String> BI_PLACE_STR_LAT = createField(DSL.name("bi_place_str_lat"), SQLDataType.VARCHAR(255), this, "Место рождения латиницей");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.create_dttm</code>.
     */
    public final TableField<AsrpFpaExtraInfoRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.modify_dttm</code>.
     */
    public final TableField<AsrpFpaExtraInfoRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.action_ind</code>.
     */
    public final TableField<AsrpFpaExtraInfoRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.reason_id</code>.
     * Причина объявления паспорта недействительным
     */
    public final TableField<AsrpFpaExtraInfoRecord, Long> REASON_ID = createField(DSL.name("reason_id"), SQLDataType.BIGINT, this, "Причина объявления паспорта недействительным");

    /**
     * The column
     * <code>passport_international.asrp_fpa_extra_info.core_document_id</code>.
     * Идентификатор выходящего документа
     */
    public final TableField<AsrpFpaExtraInfoRecord, Long> CORE_DOCUMENT_ID = createField(DSL.name("core_document_id"), SQLDataType.BIGINT, this, "Идентификатор выходящего документа");

    private AsrpFpaExtraInfo(Name alias, Table<AsrpFpaExtraInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private AsrpFpaExtraInfo(Name alias, Table<AsrpFpaExtraInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.asrp_fpa_extra_info</code>
     * table reference
     */
    public AsrpFpaExtraInfo(String alias) {
        this(DSL.name(alias), ASRP_FPA_EXTRA_INFO);
    }

    /**
     * Create an aliased <code>passport_international.asrp_fpa_extra_info</code>
     * table reference
     */
    public AsrpFpaExtraInfo(Name alias) {
        this(alias, ASRP_FPA_EXTRA_INFO);
    }

    /**
     * Create a <code>passport_international.asrp_fpa_extra_info</code> table
     * reference
     */
    public AsrpFpaExtraInfo() {
        this(DSL.name("asrp_fpa_extra_info"), null);
    }

    public <O extends Record> AsrpFpaExtraInfo(Table<O> child, ForeignKey<O, AsrpFpaExtraInfoRecord> key) {
        super(child, key, ASRP_FPA_EXTRA_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ASRP_FPA_EXTRA_INFO_UK, Indexes.ID_DECLARATION_IX);
    }

    @Override
    public Identity<AsrpFpaExtraInfoRecord, Long> getIdentity() {
        return (Identity<AsrpFpaExtraInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AsrpFpaExtraInfoRecord> getPrimaryKey() {
        return Keys.ASRP_FPA_EXTRA_INFO_PKEY;
    }

    @Override
    public AsrpFpaExtraInfo as(String alias) {
        return new AsrpFpaExtraInfo(DSL.name(alias), this);
    }

    @Override
    public AsrpFpaExtraInfo as(Name alias) {
        return new AsrpFpaExtraInfo(alias, this);
    }

    @Override
    public AsrpFpaExtraInfo as(Table<?> alias) {
        return new AsrpFpaExtraInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaExtraInfo rename(String name) {
        return new AsrpFpaExtraInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaExtraInfo rename(Name name) {
        return new AsrpFpaExtraInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaExtraInfo rename(Table<?> name) {
        return new AsrpFpaExtraInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, String, OffsetDateTime, OffsetDateTime, String, String, Long, Long, Long, String, OffsetDateTime, OffsetDateTime, String, Long, Long> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
