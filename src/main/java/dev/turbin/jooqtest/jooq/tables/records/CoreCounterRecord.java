/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.CoreCounter;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Таблица счётчиков номеров дел
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreCounterRecord extends UpdatableRecordImpl<CoreCounterRecord> implements Record9<Long, String, String, Integer, String, Long, LocalDateTime, LocalDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.core_counter.core_counter_id</code>.
     * Идентификатор счётчика
     */
    public void setCoreCounterId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_counter.core_counter_id</code>.
     * Идентификатор счётчика
     */
    public Long getCoreCounterId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.core_counter.department_code</code>. Код
     * департамента
     */
    public void setDepartmentCode(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_counter.department_code</code>. Код
     * департамента
     */
    public String getDepartmentCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>passport_international.core_counter.region_code</code>.
     * Код региона
     */
    public void setRegionCode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>passport_international.core_counter.region_code</code>.
     * Код региона
     */
    public String getRegionCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>passport_international.core_counter.issue_year</code>.
     * Год
     */
    public void setIssueYear(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>passport_international.core_counter.issue_year</code>.
     * Год
     */
    public Integer getIssueYear() {
        return (Integer) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.core_counter.operation_code</code>. Код
     * операции
     */
    public void setOperationCode(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_counter.operation_code</code>. Код
     * операции
     */
    public String getOperationCode() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.core_counter.last_serial_num</code>.
     * Значение счётчика
     */
    public void setLastSerialNum(Long value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_counter.last_serial_num</code>.
     * Значение счётчика
     */
    public Long getLastSerialNum() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>passport_international.core_counter.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public void setCreateDttm(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>passport_international.core_counter.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public LocalDateTime getCreateDttm() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>passport_international.core_counter.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public void setModifyDttm(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>passport_international.core_counter.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public LocalDateTime getModifyDttm() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>passport_international.core_counter.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public void setActionInd(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>passport_international.core_counter.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public String getActionInd() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Integer, String, Long, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, String, String, Integer, String, Long, LocalDateTime, LocalDateTime, String> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return CoreCounter.CORE_COUNTER.CORE_COUNTER_ID;
    }

    @Override
    public Field<String> field2() {
        return CoreCounter.CORE_COUNTER.DEPARTMENT_CODE;
    }

    @Override
    public Field<String> field3() {
        return CoreCounter.CORE_COUNTER.REGION_CODE;
    }

    @Override
    public Field<Integer> field4() {
        return CoreCounter.CORE_COUNTER.ISSUE_YEAR;
    }

    @Override
    public Field<String> field5() {
        return CoreCounter.CORE_COUNTER.OPERATION_CODE;
    }

    @Override
    public Field<Long> field6() {
        return CoreCounter.CORE_COUNTER.LAST_SERIAL_NUM;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return CoreCounter.CORE_COUNTER.CREATE_DTTM;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return CoreCounter.CORE_COUNTER.MODIFY_DTTM;
    }

    @Override
    public Field<String> field9() {
        return CoreCounter.CORE_COUNTER.ACTION_IND;
    }

    @Override
    public Long component1() {
        return getCoreCounterId();
    }

    @Override
    public String component2() {
        return getDepartmentCode();
    }

    @Override
    public String component3() {
        return getRegionCode();
    }

    @Override
    public Integer component4() {
        return getIssueYear();
    }

    @Override
    public String component5() {
        return getOperationCode();
    }

    @Override
    public Long component6() {
        return getLastSerialNum();
    }

    @Override
    public LocalDateTime component7() {
        return getCreateDttm();
    }

    @Override
    public LocalDateTime component8() {
        return getModifyDttm();
    }

    @Override
    public String component9() {
        return getActionInd();
    }

    @Override
    public Long value1() {
        return getCoreCounterId();
    }

    @Override
    public String value2() {
        return getDepartmentCode();
    }

    @Override
    public String value3() {
        return getRegionCode();
    }

    @Override
    public Integer value4() {
        return getIssueYear();
    }

    @Override
    public String value5() {
        return getOperationCode();
    }

    @Override
    public Long value6() {
        return getLastSerialNum();
    }

    @Override
    public LocalDateTime value7() {
        return getCreateDttm();
    }

    @Override
    public LocalDateTime value8() {
        return getModifyDttm();
    }

    @Override
    public String value9() {
        return getActionInd();
    }

    @Override
    public CoreCounterRecord value1(Long value) {
        setCoreCounterId(value);
        return this;
    }

    @Override
    public CoreCounterRecord value2(String value) {
        setDepartmentCode(value);
        return this;
    }

    @Override
    public CoreCounterRecord value3(String value) {
        setRegionCode(value);
        return this;
    }

    @Override
    public CoreCounterRecord value4(Integer value) {
        setIssueYear(value);
        return this;
    }

    @Override
    public CoreCounterRecord value5(String value) {
        setOperationCode(value);
        return this;
    }

    @Override
    public CoreCounterRecord value6(Long value) {
        setLastSerialNum(value);
        return this;
    }

    @Override
    public CoreCounterRecord value7(LocalDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public CoreCounterRecord value8(LocalDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public CoreCounterRecord value9(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public CoreCounterRecord values(Long value1, String value2, String value3, Integer value4, String value5, Long value6, LocalDateTime value7, LocalDateTime value8, String value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreCounterRecord
     */
    public CoreCounterRecord() {
        super(CoreCounter.CORE_COUNTER);
    }

    /**
     * Create a detached, initialised CoreCounterRecord
     */
    public CoreCounterRecord(Long coreCounterId, String departmentCode, String regionCode, Integer issueYear, String operationCode, Long lastSerialNum, LocalDateTime createDttm, LocalDateTime modifyDttm, String actionInd) {
        super(CoreCounter.CORE_COUNTER);

        setCoreCounterId(coreCounterId);
        setDepartmentCode(departmentCode);
        setRegionCode(regionCode);
        setIssueYear(issueYear);
        setOperationCode(operationCode);
        setLastSerialNum(lastSerialNum);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        resetChangedOnNotNull();
    }
}
