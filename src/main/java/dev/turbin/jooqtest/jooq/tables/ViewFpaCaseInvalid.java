/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewFpaCaseInvalidRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewFpaCaseInvalid extends TableImpl<ViewFpaCaseInvalidRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_fpa_case_invalid</code>
     */
    public static final ViewFpaCaseInvalid VIEW_FPA_CASE_INVALID = new ViewFpaCaseInvalid();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewFpaCaseInvalidRecord> getRecordType() {
        return ViewFpaCaseInvalidRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.fpa_case_invalid_id</code>.
     */
    public final TableField<ViewFpaCaseInvalidRecord, Long> FPA_CASE_INVALID_ID = createField(DSL.name("fpa_case_invalid_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.reason_id</code>.
     */
    public final TableField<ViewFpaCaseInvalidRecord, Long> REASON_ID = createField(DSL.name("reason_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.basis_type_id</code>.
     */
    public final TableField<ViewFpaCaseInvalidRecord, Long> BASIS_TYPE_ID = createField(DSL.name("basis_type_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.basis_number_no</code>.
     */
    public final TableField<ViewFpaCaseInvalidRecord, String> BASIS_NUMBER_NO = createField(DSL.name("basis_number_no"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.basis_dt</code>.
     */
    public final TableField<ViewFpaCaseInvalidRecord, LocalDate> BASIS_DT = createField(DSL.name("basis_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<ViewFpaCaseInvalidRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<ViewFpaCaseInvalidRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<ViewFpaCaseInvalidRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<ViewFpaCaseInvalidRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<ViewFpaCaseInvalidRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<ViewFpaCaseInvalidRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.date_invalid_dt</code>.
     */
    public final TableField<ViewFpaCaseInvalidRecord, LocalDate> DATE_INVALID_DT = createField(DSL.name("date_invalid_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.sign_id</code>.
     */
    public final TableField<ViewFpaCaseInvalidRecord, Long> SIGN_ID = createField(DSL.name("sign_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_invalid.comment_desc</code>.
     */
    public final TableField<ViewFpaCaseInvalidRecord, String> COMMENT_DESC = createField(DSL.name("comment_desc"), SQLDataType.VARCHAR(512), this, "");

    private ViewFpaCaseInvalid(Name alias, Table<ViewFpaCaseInvalidRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewFpaCaseInvalid(Name alias, Table<ViewFpaCaseInvalidRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_fpa_case_invalid" as  SELECT fp_case_invalidation.inv_id AS fpa_case_invalid_id,
         fp_case_invalidation.inv_reason_id AS reason_id,
         fp_case_invalidation.inv_evidence_type_id AS basis_type_id,
         fp_case_invalidation.inv_evidence_number AS basis_number_no,
         fp_case_invalidation.inv_evidence_dt AS basis_dt,
         fp_case_invalidation.src_id,
         fp_case_invalidation.create_dttm,
         fp_case_invalidation.modify_dttm,
         fp_case_invalidation.exp_dttm,
         fp_case_invalidation.eff_dttm,
         fp_case_invalidation.action_ind,
         fp_case_invalidation.date_invalidation AS date_invalid_dt,
         fp_case_invalidation.signer_id AS sign_id,
         fp_case_invalidation.comment AS comment_desc
        FROM fp_case_invalidation;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_case_invalid</code> table reference
     */
    public ViewFpaCaseInvalid(String alias) {
        this(DSL.name(alias), VIEW_FPA_CASE_INVALID);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_case_invalid</code> table reference
     */
    public ViewFpaCaseInvalid(Name alias) {
        this(alias, VIEW_FPA_CASE_INVALID);
    }

    /**
     * Create a <code>passport_international.view_fpa_case_invalid</code> table
     * reference
     */
    public ViewFpaCaseInvalid() {
        this(DSL.name("view_fpa_case_invalid"), null);
    }

    public <O extends Record> ViewFpaCaseInvalid(Table<O> child, ForeignKey<O, ViewFpaCaseInvalidRecord> key) {
        super(child, key, VIEW_FPA_CASE_INVALID);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewFpaCaseInvalid as(String alias) {
        return new ViewFpaCaseInvalid(DSL.name(alias), this);
    }

    @Override
    public ViewFpaCaseInvalid as(Name alias) {
        return new ViewFpaCaseInvalid(alias, this);
    }

    @Override
    public ViewFpaCaseInvalid as(Table<?> alias) {
        return new ViewFpaCaseInvalid(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaCaseInvalid rename(String name) {
        return new ViewFpaCaseInvalid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaCaseInvalid rename(Name name) {
        return new ViewFpaCaseInvalid(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaCaseInvalid rename(Table<?> name) {
        return new ViewFpaCaseInvalid(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, String, LocalDate, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, LocalDate, Long, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super Long, ? super Long, ? super String, ? super LocalDate, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super LocalDate, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super Long, ? super Long, ? super String, ? super LocalDate, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super LocalDate, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
