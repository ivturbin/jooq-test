/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseLossRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Дело об утрате заграничного паспорта
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseLoss extends TableImpl<FpCaseLossRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_case_loss</code>
     */
    public static final FpCaseLoss FP_CASE_LOSS = new FpCaseLoss();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpCaseLossRecord> getRecordType() {
        return FpCaseLossRecord.class;
    }

    /**
     * The column <code>passport_international.fp_case_loss.loss_id</code>.
     * Идентификатор
     */
    public final TableField<FpCaseLossRecord, Long> LOSS_ID = createField(DSL.name("loss_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор");

    /**
     * The column <code>passport_international.fp_case_loss.lost_dt</code>. Дата
     * утраты
     */
    public final TableField<FpCaseLossRecord, LocalDate> LOST_DT = createField(DSL.name("lost_dt"), SQLDataType.LOCALDATE.nullable(false), this, "Дата утраты");

    /**
     * The column <code>passport_international.fp_case_loss.lost_cert_dt</code>.
     * Дата выдачи справки об утрате
     */
    public final TableField<FpCaseLossRecord, LocalDate> LOST_CERT_DT = createField(DSL.name("lost_cert_dt"), SQLDataType.LOCALDATE, this, "Дата выдачи справки об утрате");

    /**
     * The column
     * <code>passport_international.fp_case_loss.fp_case_issuance_id</code>.
     * Дело по выдаче заграничного паспорта
     */
    public final TableField<FpCaseLossRecord, Long> FP_CASE_ISSUANCE_ID = createField(DSL.name("fp_case_issuance_id"), SQLDataType.BIGINT, this, "Дело по выдаче заграничного паспорта");

    /**
     * The column
     * <code>passport_international.fp_case_loss.lost_cert_number</code>. Номер
     * справки об утрате
     */
    public final TableField<FpCaseLossRecord, String> LOST_CERT_NUMBER = createField(DSL.name("lost_cert_number"), SQLDataType.VARCHAR(128), this, "Номер справки об утрате");

    /**
     * The column <code>passport_international.fp_case_loss.lost_reason</code>.
     * Причина утраты
     */
    public final TableField<FpCaseLossRecord, String> LOST_REASON = createField(DSL.name("lost_reason"), SQLDataType.VARCHAR(500), this, "Причина утраты");

    /**
     * The column
     * <code>passport_international.fp_case_loss.lost_cert_authority</code>.
     * Орган, выдавший справку об утрате
     */
    public final TableField<FpCaseLossRecord, String> LOST_CERT_AUTHORITY = createField(DSL.name("lost_cert_authority"), SQLDataType.VARCHAR(500), this, "Орган, выдавший справку об утрате");

    /**
     * The column <code>passport_international.fp_case_loss.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<FpCaseLossRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column <code>passport_international.fp_case_loss.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<FpCaseLossRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column <code>passport_international.fp_case_loss.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<FpCaseLossRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column <code>passport_international.fp_case_loss.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<FpCaseLossRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column <code>passport_international.fp_case_loss.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpCaseLossRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column <code>passport_international.fp_case_loss.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpCaseLossRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.fp_case_loss.signer_user_id</code>.
     * Подписывающий сотрудник
     */
    public final TableField<FpCaseLossRecord, Long> SIGNER_USER_ID = createField(DSL.name("signer_user_id"), SQLDataType.BIGINT, this, "Подписывающий сотрудник");

    private FpCaseLoss(Name alias, Table<FpCaseLossRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpCaseLoss(Name alias, Table<FpCaseLossRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Дело об утрате заграничного паспорта"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.fp_case_loss</code> table
     * reference
     */
    public FpCaseLoss(String alias) {
        this(DSL.name(alias), FP_CASE_LOSS);
    }

    /**
     * Create an aliased <code>passport_international.fp_case_loss</code> table
     * reference
     */
    public FpCaseLoss(Name alias) {
        this(alias, FP_CASE_LOSS);
    }

    /**
     * Create a <code>passport_international.fp_case_loss</code> table reference
     */
    public FpCaseLoss() {
        this(DSL.name("fp_case_loss"), null);
    }

    public <O extends Record> FpCaseLoss(Table<O> child, ForeignKey<O, FpCaseLossRecord> key) {
        super(child, key, FP_CASE_LOSS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FP_CASE_LOSS_FP_CASE_ISS_ID);
    }

    @Override
    public UniqueKey<FpCaseLossRecord> getPrimaryKey() {
        return Keys.PK_FP_CASE_LOSS;
    }

    @Override
    public List<ForeignKey<FpCaseLossRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_CASE_LOSS__FK_FP_CASE_LOSS_FP_CASE, Keys.FP_CASE_LOSS__FK_FP_CASE_LOSS_FP_CASE_ISSUANCE);
    }

    private transient FpCase _fpCase;
    private transient FpCaseIssuance _fpCaseIssuance;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case</code> table.
     */
    public FpCase fpCase() {
        if (_fpCase == null)
            _fpCase = new FpCase(this, Keys.FP_CASE_LOSS__FK_FP_CASE_LOSS_FP_CASE);

        return _fpCase;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case_issuance</code> table.
     */
    public FpCaseIssuance fpCaseIssuance() {
        if (_fpCaseIssuance == null)
            _fpCaseIssuance = new FpCaseIssuance(this, Keys.FP_CASE_LOSS__FK_FP_CASE_LOSS_FP_CASE_ISSUANCE);

        return _fpCaseIssuance;
    }

    @Override
    public FpCaseLoss as(String alias) {
        return new FpCaseLoss(DSL.name(alias), this);
    }

    @Override
    public FpCaseLoss as(Name alias) {
        return new FpCaseLoss(alias, this);
    }

    @Override
    public FpCaseLoss as(Table<?> alias) {
        return new FpCaseLoss(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseLoss rename(String name) {
        return new FpCaseLoss(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseLoss rename(Name name) {
        return new FpCaseLoss(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseLoss rename(Table<?> name) {
        return new FpCaseLoss(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, LocalDate, LocalDate, Long, String, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, Long> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super LocalDate, ? super LocalDate, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super LocalDate, ? super LocalDate, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
