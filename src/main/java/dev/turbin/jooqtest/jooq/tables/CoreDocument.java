/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreDocumentRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Документ
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreDocument extends TableImpl<CoreDocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_document</code>
     */
    public static final CoreDocument CORE_DOCUMENT = new CoreDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreDocumentRecord> getRecordType() {
        return CoreDocumentRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_document.core_case_id</code>.
     */
    public final TableField<CoreDocumentRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document.core_document_id</code>.
     * Идентификатор
     */
    public final TableField<CoreDocumentRecord, Long> CORE_DOCUMENT_ID = createField(DSL.name("core_document_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор");

    /**
     * The column <code>passport_international.core_document.version</code>.
     * Реализация оптимистической блокировки
     */
    public final TableField<CoreDocumentRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "Реализация оптимистической блокировки");

    /**
     * The column
     * <code>passport_international.core_document.invalid_bool</code>.
     */
    public final TableField<CoreDocumentRecord, Boolean> INVALID_BOOL = createField(DSL.name("invalid_bool"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>passport_international.core_document.type_id</code>. Тип
     * документа
     */
    public final TableField<CoreDocumentRecord, Long> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Тип документа");

    /**
     * The column <code>passport_international.core_document.status_id</code>.
     * Статус документа
     */
    public final TableField<CoreDocumentRecord, Long> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Статус документа");

    /**
     * The column <code>passport_international.core_document.change_dt</code>.
     * Дата изменений
     */
    public final TableField<CoreDocumentRecord, LocalDate> CHANGE_DT = createField(DSL.name("change_dt"), SQLDataType.LOCALDATE.nullable(false), this, "Дата изменений");

    /**
     * The column <code>passport_international.core_document.doc_no</code>.
     * Номер документа
     */
    public final TableField<CoreDocumentRecord, String> DOC_NO = createField(DSL.name("doc_no"), SQLDataType.VARCHAR(128), this, "Номер документа");

    /**
     * The column <code>passport_international.core_document.series_code</code>.
     * Серия документа
     */
    public final TableField<CoreDocumentRecord, String> SERIES_CODE = createField(DSL.name("series_code"), SQLDataType.VARCHAR(128), this, "Серия документа");

    /**
     * The column <code>passport_international.core_document.issued_dt</code>.
     * Дата выдачи
     */
    public final TableField<CoreDocumentRecord, LocalDate> ISSUED_DT = createField(DSL.name("issued_dt"), SQLDataType.LOCALDATE, this, "Дата выдачи");

    /**
     * The column
     * <code>passport_international.core_document.extend_to_dt</code>. Продлен
     * до
     */
    public final TableField<CoreDocumentRecord, LocalDate> EXTEND_TO_DT = createField(DSL.name("extend_to_dt"), SQLDataType.LOCALDATE, this, "Продлен до");

    /**
     * The column
     * <code>passport_international.core_document.valid_from_dt</code>.
     * Действителен с
     */
    public final TableField<CoreDocumentRecord, LocalDate> VALID_FROM_DT = createField(DSL.name("valid_from_dt"), SQLDataType.LOCALDATE, this, "Действителен с");

    /**
     * The column <code>passport_international.core_document.valid_to_dt</code>.
     * Действителен по
     */
    public final TableField<CoreDocumentRecord, LocalDate> VALID_TO_DT = createField(DSL.name("valid_to_dt"), SQLDataType.LOCALDATE, this, "Действителен по");

    /**
     * The column
     * <code>passport_international.core_document.destruction_dt</code>. Дата
     * уничтожения документа
     */
    public final TableField<CoreDocumentRecord, LocalDate> DESTRUCTION_DT = createField(DSL.name("destruction_dt"), SQLDataType.LOCALDATE, this, "Дата уничтожения документа");

    /**
     * The column <code>passport_international.core_document.invalid_dt</code>.
     * Дата инвалидации записи
     */
    public final TableField<CoreDocumentRecord, LocalDate> INVALID_DT = createField(DSL.name("invalid_dt"), SQLDataType.LOCALDATE, this, "Дата инвалидации записи");

    /**
     * The column
     * <code>passport_international.core_document.invalid_user</code>.
     * Пользователь, инвалидировавший запись
     */
    public final TableField<CoreDocumentRecord, String> INVALID_USER = createField(DSL.name("invalid_user"), SQLDataType.VARCHAR(255), this, "Пользователь, инвалидировавший запись");

    /**
     * The column
     * <code>passport_international.core_document.authority_organ_id</code>.
     * Орган, выдавший документ
     */
    public final TableField<CoreDocumentRecord, Long> AUTHORITY_ORGAN_ID = createField(DSL.name("authority_organ_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Орган, выдавший документ");

    /**
     * The column
     * <code>passport_international.core_document.new_document_id</code>.
     * Идентификатор корректного документа
     */
    public final TableField<CoreDocumentRecord, Long> NEW_DOCUMENT_ID = createField(DSL.name("new_document_id"), SQLDataType.BIGINT, this, "Идентификатор корректного документа");

    /**
     * The column
     * <code>passport_international.core_document.blank_series_code</code>.
     * Серия бланка
     */
    public final TableField<CoreDocumentRecord, String> BLANK_SERIES_CODE = createField(DSL.name("blank_series_code"), SQLDataType.VARCHAR(128), this, "Серия бланка");

    /**
     * The column
     * <code>passport_international.core_document.blank_number_code</code>.
     * Номер бланка
     */
    public final TableField<CoreDocumentRecord, String> BLANK_NUMBER_CODE = createField(DSL.name("blank_number_code"), SQLDataType.VARCHAR(128), this, "Номер бланка");

    /**
     * The column
     * <code>passport_international.core_document.authority_code</code>. Код
     * подразделения, выдавшего документ
     */
    public final TableField<CoreDocumentRecord, String> AUTHORITY_CODE = createField(DSL.name("authority_code"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Код подразделения, выдавшего документ");

    /**
     * The column
     * <code>passport_international.core_document.series_doc_no_hash_cval</code>.
     * Хэш серии и номера документа
     */
    public final TableField<CoreDocumentRecord, String> SERIES_DOC_NO_HASH_CVAL = createField(DSL.name("series_doc_no_hash_cval"), SQLDataType.CLOB, this, "Хэш серии и номера документа");

    /**
     * The column
     * <code>passport_international.core_document.series_doc_no_hash_strict_cval</code>.
     * Строгий хэш серии и номера документа
     */
    public final TableField<CoreDocumentRecord, String> SERIES_DOC_NO_HASH_STRICT_CVAL = createField(DSL.name("series_doc_no_hash_strict_cval"), SQLDataType.CLOB, this, "Строгий хэш серии и номера документа");

    /**
     * The column
     * <code>passport_international.core_document.doc_birth_place_desc</code>.
     * Место рождения, как указано в документе
     */
    public final TableField<CoreDocumentRecord, String> DOC_BIRTH_PLACE_DESC = createField(DSL.name("doc_birth_place_desc"), SQLDataType.CLOB, this, "Место рождения, как указано в документе");

    /**
     * The column
     * <code>passport_international.core_document.authority_desc</code>. Кем
     * выдан документ
     */
    public final TableField<CoreDocumentRecord, String> AUTHORITY_DESC = createField(DSL.name("authority_desc"), SQLDataType.CLOB, this, "Кем выдан документ");

    /**
     * The column
     * <code>passport_international.core_document.authorized_officer_cval</code>.
     * Должностное лицо, уполномоченное выдавать документ
     */
    public final TableField<CoreDocumentRecord, String> AUTHORIZED_OFFICER_CVAL = createField(DSL.name("authorized_officer_cval"), SQLDataType.CLOB, this, "Должностное лицо, уполномоченное выдавать документ");

    /**
     * The column
     * <code>passport_international.core_document.parent_authority_organ_id</code>.
     * Головное подразделение органа, выдавшего документ
     */
    public final TableField<CoreDocumentRecord, Long> PARENT_AUTHORITY_ORGAN_ID = createField(DSL.name("parent_authority_organ_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Головное подразделение органа, выдавшего документ");

    /**
     * The column <code>passport_international.core_document.person_id</code>.
     * Связь физического лица и документа
     */
    public final TableField<CoreDocumentRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT, this, "Связь физического лица и документа");

    /**
     * The column <code>passport_international.core_document.src_id</code>.
     * Источник
     */
    public final TableField<CoreDocumentRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Источник");

    /**
     * The column <code>passport_international.core_document.create_dttm</code>.
     * Дата время вставки записи
     */
    public final TableField<CoreDocumentRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи");

    /**
     * The column <code>passport_international.core_document.modify_dttm</code>.
     * Дата время последнего иземения записи
     */
    public final TableField<CoreDocumentRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего иземения записи");

    /**
     * The column <code>passport_international.core_document.action_ind</code>.
     * Индикатор действия
     */
    public final TableField<CoreDocumentRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор действия");

    /**
     * The column <code>passport_international.core_document.eff_dttm</code>.
     * Дата начала действия периода
     */
    public final TableField<CoreDocumentRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("'1899-12-31 23:30:17+02:30:17'::timestamp with time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата начала действия периода");

    /**
     * The column <code>passport_international.core_document.exp_dttm</code>.
     * Дата окончания действия периода
     */
    public final TableField<CoreDocumentRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("'9999-12-31 00:00:00+03'::timestamp with time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата окончания действия периода");

    /**
     * The column <code>passport_international.core_document.create_user</code>.
     * Пользователь, создавший запись
     */
    public final TableField<CoreDocumentRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Пользователь, создавший запись");

    /**
     * The column <code>passport_international.core_document.update_user</code>.
     * Пользователь, сделавший изменение
     */
    public final TableField<CoreDocumentRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Пользователь, сделавший изменение");

    /**
     * The column
     * <code>passport_international.core_document.correction_reason_cval</code>.
     * Причина коррекции
     */
    public final TableField<CoreDocumentRecord, String> CORRECTION_REASON_CVAL = createField(DSL.name("correction_reason_cval"), SQLDataType.CLOB, this, "Причина коррекции");

    /**
     * The column <code>passport_international.core_document.gender_cval</code>.
     * Пол
     */
    public final TableField<CoreDocumentRecord, String> GENDER_CVAL = createField(DSL.name("gender_cval"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("'N/A'::text"), SQLDataType.CLOB)), this, "Пол");

    /**
     * The column <code>passport_international.core_document.birth_dt</code>.
     * Дата рождения
     */
    public final TableField<CoreDocumentRecord, LocalDate> BIRTH_DT = createField(DSL.name("birth_dt"), SQLDataType.LOCALDATE, this, "Дата рождения");

    /**
     * The column
     * <code>passport_international.core_document.destruction_act_id</code>.
     * Индефикатор акта об уничтожении
     */
    public final TableField<CoreDocumentRecord, Long> DESTRUCTION_ACT_ID = createField(DSL.name("destruction_act_id"), SQLDataType.BIGINT, this, "Индефикатор акта об уничтожении");

    /**
     * The column
     * <code>passport_international.core_document.core_person_document_id</code>.
     * ДУЛ, указанные в документе
     */
    public final TableField<CoreDocumentRecord, Long> CORE_PERSON_DOCUMENT_ID = createField(DSL.name("core_person_document_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "ДУЛ, указанные в документе");

    /**
     * The column
     * <code>passport_international.core_document.invalid_case_id</code>.
     * Идентификатор дела о недействительности
     */
    public final TableField<CoreDocumentRecord, Long> INVALID_CASE_ID = createField(DSL.name("invalid_case_id"), SQLDataType.BIGINT, this, "Идентификатор дела о недействительности");

    private CoreDocument(Name alias, Table<CoreDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreDocument(Name alias, Table<CoreDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Документ"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_document</code> table
     * reference
     */
    public CoreDocument(String alias) {
        this(DSL.name(alias), CORE_DOCUMENT);
    }

    /**
     * Create an aliased <code>passport_international.core_document</code> table
     * reference
     */
    public CoreDocument(Name alias) {
        this(alias, CORE_DOCUMENT);
    }

    /**
     * Create a <code>passport_international.core_document</code> table
     * reference
     */
    public CoreDocument() {
        this(DSL.name("core_document"), null);
    }

    public <O extends Record> CoreDocument(Table<O> child, ForeignKey<O, CoreDocumentRecord> key) {
        super(child, key, CORE_DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CD_AUTHORITY_ORGAN_ID_IX, Indexes.CD_NEW_DOCUMENT_ID_IX, Indexes.CORE_DOCUMENT_1_IX, Indexes.CORE_DOCUMENT_2_IX, Indexes.CORE_DOCUMENT_3_IX, Indexes.CORE_DOCUMENT_HASH_IX, Indexes.CORE_DOCUMENT_ISSUED_DT_IX, Indexes.CORE_DOCUMENT_SERIES_NUMBER_TYPE_IX, Indexes.CORE_DOCUMENT_STATUS_IX, Indexes.CORE_DOCUMENT_STRICT_HASH_IX);
    }

    @Override
    public Identity<CoreDocumentRecord, Long> getIdentity() {
        return (Identity<CoreDocumentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreDocumentRecord> getPrimaryKey() {
        return Keys.CORE_DOCUMENT_PK;
    }

    @Override
    public List<UniqueKey<CoreDocumentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CORE_DOCUMENT_95_UQ);
    }

    @Override
    public List<ForeignKey<CoreDocumentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_DOCUMENT__CORE_DOCUMENT_CORE_CASE_FK, Keys.CORE_DOCUMENT__CORE_DOCUMENT_CORE_DOCUMENT_FK, Keys.CORE_DOCUMENT__CORE_DOCUMENT_DESTRUCTION_ACT_FK, Keys.CORE_DOCUMENT__CORE_DOCUMENT_CORE_PERSON_DOCUMENT_FK);
    }

    private transient CoreCase _coreCase;
    private transient CoreDocument _coreDocument;
    private transient DestructionAct _destructionAct;
    private transient CorePersonDocument _corePersonDocument;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.CORE_DOCUMENT__CORE_DOCUMENT_CORE_CASE_FK);

        return _coreCase;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_document</code> table.
     */
    public CoreDocument coreDocument() {
        if (_coreDocument == null)
            _coreDocument = new CoreDocument(this, Keys.CORE_DOCUMENT__CORE_DOCUMENT_CORE_DOCUMENT_FK);

        return _coreDocument;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.destruction_act</code> table.
     */
    public DestructionAct destructionAct() {
        if (_destructionAct == null)
            _destructionAct = new DestructionAct(this, Keys.CORE_DOCUMENT__CORE_DOCUMENT_DESTRUCTION_ACT_FK);

        return _destructionAct;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_person_document</code> table.
     */
    public CorePersonDocument corePersonDocument() {
        if (_corePersonDocument == null)
            _corePersonDocument = new CorePersonDocument(this, Keys.CORE_DOCUMENT__CORE_DOCUMENT_CORE_PERSON_DOCUMENT_FK);

        return _corePersonDocument;
    }

    @Override
    public CoreDocument as(String alias) {
        return new CoreDocument(DSL.name(alias), this);
    }

    @Override
    public CoreDocument as(Name alias) {
        return new CoreDocument(alias, this);
    }

    @Override
    public CoreDocument as(Table<?> alias) {
        return new CoreDocument(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreDocument rename(String name) {
        return new CoreDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreDocument rename(Name name) {
        return new CoreDocument(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreDocument rename(Table<?> name) {
        return new CoreDocument(name.getQualifiedName(), null);
    }
}
