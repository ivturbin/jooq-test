/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreDocumentAuditRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица версионирования core_document
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreDocumentAudit extends TableImpl<CoreDocumentAuditRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_document_audit</code>
     */
    public static final CoreDocumentAudit CORE_DOCUMENT_AUDIT = new CoreDocumentAudit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreDocumentAuditRecord> getRecordType() {
        return CoreDocumentAuditRecord.class;
    }

    /**
     * The column <code>passport_international.core_document_audit.id</code>.
     * Идентификатор
     */
    public final TableField<CoreDocumentAuditRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор");

    /**
     * The column
     * <code>passport_international.core_document_audit.record_id</code>.
     * Иденитификатор версионируемой записи
     */
    public final TableField<CoreDocumentAuditRecord, Long> RECORD_ID = createField(DSL.name("record_id"), SQLDataType.BIGINT, this, "Иденитификатор версионируемой записи");

    /**
     * The column
     * <code>passport_international.core_document_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public final TableField<CoreDocumentAuditRecord, Long> CORRECTION_LOG_ID = createField(DSL.name("correction_log_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор лога коррекции дела");

    /**
     * The column
     * <code>passport_international.core_document_audit.update_user</code>.
     * Пользователь создавший версию
     */
    public final TableField<CoreDocumentAuditRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR, this, "Пользователь создавший версию");

    /**
     * The column
     * <code>passport_international.core_document_audit.eff_dttm</code>. Время
     * начала действия версии effective from
     */
    public final TableField<CoreDocumentAuditRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-12-31 00:00:00'::timestamp without time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Время начала действия версии effective from");

    /**
     * The column
     * <code>passport_international.core_document_audit.exp_dttm</code>. Время
     * окончания действия версии expired
     */
    public final TableField<CoreDocumentAuditRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("(now())::timestamp without time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Время окончания действия версии expired");

    /**
     * The column
     * <code>passport_international.core_document_audit.version</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.invalid_bool</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Boolean> INVALID_BOOL = createField(DSL.name("invalid_bool"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.type_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.status_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.change_dt</code>.
     */
    public final TableField<CoreDocumentAuditRecord, LocalDate> CHANGE_DT = createField(DSL.name("change_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.doc_no</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> DOC_NO = createField(DSL.name("doc_no"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.series_code</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> SERIES_CODE = createField(DSL.name("series_code"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.issued_dt</code>.
     */
    public final TableField<CoreDocumentAuditRecord, LocalDate> ISSUED_DT = createField(DSL.name("issued_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.extend_to_dt</code>.
     */
    public final TableField<CoreDocumentAuditRecord, LocalDate> EXTEND_TO_DT = createField(DSL.name("extend_to_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.valid_from_dt</code>.
     */
    public final TableField<CoreDocumentAuditRecord, LocalDate> VALID_FROM_DT = createField(DSL.name("valid_from_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.valid_to_dt</code>.
     */
    public final TableField<CoreDocumentAuditRecord, LocalDate> VALID_TO_DT = createField(DSL.name("valid_to_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.destruction_dt</code>.
     */
    public final TableField<CoreDocumentAuditRecord, LocalDate> DESTRUCTION_DT = createField(DSL.name("destruction_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.invalid_dt</code>.
     */
    public final TableField<CoreDocumentAuditRecord, LocalDate> INVALID_DT = createField(DSL.name("invalid_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.invalid_user</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> INVALID_USER = createField(DSL.name("invalid_user"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.authority_organ_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> AUTHORITY_ORGAN_ID = createField(DSL.name("authority_organ_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.blank_series_code</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> BLANK_SERIES_CODE = createField(DSL.name("blank_series_code"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.blank_number_code</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> BLANK_NUMBER_CODE = createField(DSL.name("blank_number_code"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.authority_code</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> AUTHORITY_CODE = createField(DSL.name("authority_code"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.series_doc_no_hash_cval</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> SERIES_DOC_NO_HASH_CVAL = createField(DSL.name("series_doc_no_hash_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.series_doc_no_hash_strict_cval</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> SERIES_DOC_NO_HASH_STRICT_CVAL = createField(DSL.name("series_doc_no_hash_strict_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.doc_birth_place_desc</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> DOC_BIRTH_PLACE_DESC = createField(DSL.name("doc_birth_place_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.authority_desc</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> AUTHORITY_DESC = createField(DSL.name("authority_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.authorized_officer_cval</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> AUTHORIZED_OFFICER_CVAL = createField(DSL.name("authorized_officer_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.parent_authority_organ_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> PARENT_AUTHORITY_ORGAN_ID = createField(DSL.name("parent_authority_organ_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.person_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.create_user</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.correction_reason_cval</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> CORRECTION_REASON_CVAL = createField(DSL.name("correction_reason_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.gender_cval</code>.
     */
    public final TableField<CoreDocumentAuditRecord, String> GENDER_CVAL = createField(DSL.name("gender_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.birth_dt</code>.
     */
    public final TableField<CoreDocumentAuditRecord, LocalDate> BIRTH_DT = createField(DSL.name("birth_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.new_document_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> NEW_DOCUMENT_ID = createField(DSL.name("new_document_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.core_person_document_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> CORE_PERSON_DOCUMENT_ID = createField(DSL.name("core_person_document_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.destruction_act_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> DESTRUCTION_ACT_ID = createField(DSL.name("destruction_act_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.core_case_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_document_audit.core_document_id</code>.
     */
    public final TableField<CoreDocumentAuditRecord, Long> CORE_DOCUMENT_ID = createField(DSL.name("core_document_id"), SQLDataType.BIGINT, this, "");

    private CoreDocumentAudit(Name alias, Table<CoreDocumentAuditRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreDocumentAudit(Name alias, Table<CoreDocumentAuditRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица версионирования core_document"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_document_audit</code>
     * table reference
     */
    public CoreDocumentAudit(String alias) {
        this(DSL.name(alias), CORE_DOCUMENT_AUDIT);
    }

    /**
     * Create an aliased <code>passport_international.core_document_audit</code>
     * table reference
     */
    public CoreDocumentAudit(Name alias) {
        this(alias, CORE_DOCUMENT_AUDIT);
    }

    /**
     * Create a <code>passport_international.core_document_audit</code> table
     * reference
     */
    public CoreDocumentAudit() {
        this(DSL.name("core_document_audit"), null);
    }

    public <O extends Record> CoreDocumentAudit(Table<O> child, ForeignKey<O, CoreDocumentAuditRecord> key) {
        super(child, key, CORE_DOCUMENT_AUDIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_DOCUMENT_AUDIT_CORRECTION_LOG_IX, Indexes.CORE_DOCUMENT_AUDIT_EFF_DTTM_IX, Indexes.CORE_DOCUMENT_AUDIT_EXP_DTTM_IX, Indexes.CORE_DOCUMENT_AUDIT_RECORD_ID_IX);
    }

    @Override
    public Identity<CoreDocumentAuditRecord, Long> getIdentity() {
        return (Identity<CoreDocumentAuditRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreDocumentAuditRecord> getPrimaryKey() {
        return Keys.CORE_DOCUMENT_AUDIT_PK;
    }

    @Override
    public List<ForeignKey<CoreDocumentAuditRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_DOCUMENT_AUDIT__CORE_DOCUMENT_AUDIT_FK, Keys.CORE_DOCUMENT_AUDIT__CORE_DOCUMENT_AUDIT_CORRECTION_LOG_FK);
    }

    private transient CoreDocument _coreDocument;
    private transient CorrectionLog _correctionLog;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_document</code> table.
     */
    public CoreDocument coreDocument() {
        if (_coreDocument == null)
            _coreDocument = new CoreDocument(this, Keys.CORE_DOCUMENT_AUDIT__CORE_DOCUMENT_AUDIT_FK);

        return _coreDocument;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.correction_log</code> table.
     */
    public CorrectionLog correctionLog() {
        if (_correctionLog == null)
            _correctionLog = new CorrectionLog(this, Keys.CORE_DOCUMENT_AUDIT__CORE_DOCUMENT_AUDIT_CORRECTION_LOG_FK);

        return _correctionLog;
    }

    @Override
    public CoreDocumentAudit as(String alias) {
        return new CoreDocumentAudit(DSL.name(alias), this);
    }

    @Override
    public CoreDocumentAudit as(Name alias) {
        return new CoreDocumentAudit(alias, this);
    }

    @Override
    public CoreDocumentAudit as(Table<?> alias) {
        return new CoreDocumentAudit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreDocumentAudit rename(String name) {
        return new CoreDocumentAudit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreDocumentAudit rename(Name name) {
        return new CoreDocumentAudit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreDocumentAudit rename(Table<?> name) {
        return new CoreDocumentAudit(name.getQualifiedName(), null);
    }
}
