/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewFpaLegalPersonRestrictRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewFpaLegalPersonRestrict extends TableImpl<ViewFpaLegalPersonRestrictRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_fpa_legal_person_restrict</code>
     */
    public static final ViewFpaLegalPersonRestrict VIEW_FPA_LEGAL_PERSON_RESTRICT = new ViewFpaLegalPersonRestrict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewFpaLegalPersonRestrictRecord> getRecordType() {
        return ViewFpaLegalPersonRestrictRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.fpa_legal_person_restrict_id</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, Long> FPA_LEGAL_PERSON_RESTRICT_ID = createField(DSL.name("fpa_legal_person_restrict_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.last_name_code</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, String> LAST_NAME_CODE = createField(DSL.name("last_name_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.first_name_code</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, String> FIRST_NAME_CODE = createField(DSL.name("first_name_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.middle_name_code</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, String> MIDDLE_NAME_CODE = createField(DSL.name("middle_name_code"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.birthday_dt</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, LocalDate> BIRTHDAY_DT = createField(DSL.name("birthday_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.birth_place_desc</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, String> BIRTH_PLACE_DESC = createField(DSL.name("birth_place_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.reg_living_address_desc</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, String> REG_LIVING_ADDRESS_DESC = createField(DSL.name("reg_living_address_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.citizenship_id</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, Long> CITIZENSHIP_ID = createField(DSL.name("citizenship_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.relation_type_id</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, Long> RELATION_TYPE_ID = createField(DSL.name("relation_type_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.action_ind</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.create_dttm</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.modify_dttm</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.eff_dttm</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_legal_person_restrict.exp_dttm</code>.
     */
    public final TableField<ViewFpaLegalPersonRestrictRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private ViewFpaLegalPersonRestrict(Name alias, Table<ViewFpaLegalPersonRestrictRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewFpaLegalPersonRestrict(Name alias, Table<ViewFpaLegalPersonRestrictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_fpa_legal_person_restrict" as  SELECT fp_informal_legal_person.fp_informal_legal_person_id AS fpa_legal_person_restrict_id,
         fp_informal_legal_person.last_name AS last_name_code,
         fp_informal_legal_person.first_name AS first_name_code,
         fp_informal_legal_person.middle_name AS middle_name_code,
         fp_informal_legal_person.birthday_dt,
         fp_informal_legal_person.birth_place AS birth_place_desc,
         fp_informal_legal_person.reg_living_address AS reg_living_address_desc,
         fp_informal_legal_person.citizenship AS citizenship_id,
         fp_informal_legal_person.relation_type_id,
         fp_informal_legal_person.action_ind,
         fp_informal_legal_person.create_dttm,
         fp_informal_legal_person.modify_dttm,
         fp_informal_legal_person.eff_dttm,
         fp_informal_legal_person.exp_dttm
        FROM fp_informal_legal_person;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_legal_person_restrict</code> table
     * reference
     */
    public ViewFpaLegalPersonRestrict(String alias) {
        this(DSL.name(alias), VIEW_FPA_LEGAL_PERSON_RESTRICT);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_legal_person_restrict</code> table
     * reference
     */
    public ViewFpaLegalPersonRestrict(Name alias) {
        this(alias, VIEW_FPA_LEGAL_PERSON_RESTRICT);
    }

    /**
     * Create a
     * <code>passport_international.view_fpa_legal_person_restrict</code> table
     * reference
     */
    public ViewFpaLegalPersonRestrict() {
        this(DSL.name("view_fpa_legal_person_restrict"), null);
    }

    public <O extends Record> ViewFpaLegalPersonRestrict(Table<O> child, ForeignKey<O, ViewFpaLegalPersonRestrictRecord> key) {
        super(child, key, VIEW_FPA_LEGAL_PERSON_RESTRICT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewFpaLegalPersonRestrict as(String alias) {
        return new ViewFpaLegalPersonRestrict(DSL.name(alias), this);
    }

    @Override
    public ViewFpaLegalPersonRestrict as(Name alias) {
        return new ViewFpaLegalPersonRestrict(alias, this);
    }

    @Override
    public ViewFpaLegalPersonRestrict as(Table<?> alias) {
        return new ViewFpaLegalPersonRestrict(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaLegalPersonRestrict rename(String name) {
        return new ViewFpaLegalPersonRestrict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaLegalPersonRestrict rename(Name name) {
        return new ViewFpaLegalPersonRestrict(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaLegalPersonRestrict rename(Table<?> name) {
        return new ViewFpaLegalPersonRestrict(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, String, LocalDate, String, String, Long, Long, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super String, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super String, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
