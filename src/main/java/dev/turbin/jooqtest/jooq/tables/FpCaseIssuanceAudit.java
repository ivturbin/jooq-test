/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseIssuanceAuditRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица версионирования fp_case_issuance
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseIssuanceAudit extends TableImpl<FpCaseIssuanceAuditRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_case_issuance_audit</code>
     */
    public static final FpCaseIssuanceAudit FP_CASE_ISSUANCE_AUDIT = new FpCaseIssuanceAudit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpCaseIssuanceAuditRecord> getRecordType() {
        return FpCaseIssuanceAuditRecord.class;
    }

    /**
     * The column <code>passport_international.fp_case_issuance_audit.id</code>.
     * Идентификатор "fp_case_issuance_audit" с данными коррекции
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор \"fp_case_issuance_audit\" с данными коррекции");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.record_id</code>.
     * Внешний ключ на запись в таблице-мастере
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> RECORD_ID = createField(DSL.name("record_id"), SQLDataType.BIGINT.nullable(false), this, "Внешний ключ на запись в таблице-мастере");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> CORRECTION_LOG_ID = createField(DSL.name("correction_log_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор лога коррекции дела");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.update_user</code>.
     * Пользователь, скорректировавший дело
     */
    public final TableField<FpCaseIssuanceAuditRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Пользователь, скорректировавший дело");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.eff_dttm</code>. Дата
     * начала действия версии
     */
    public final TableField<FpCaseIssuanceAuditRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-12-31 00:00:00'::timestamp without time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата начала действия версии");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.exp_dttm</code>. Дата
     * окончания действия версии
     */
    public final TableField<FpCaseIssuanceAuditRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("(now())::timestamp without time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата окончания действия версии");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.preferential_category</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Boolean> PREFERENTIAL_CATEGORY = createField(DSL.name("preferential_category"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.application_place_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> APPLICATION_PLACE_ID = createField(DSL.name("application_place_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.secret_access_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> SECRET_ACCESS_ID = createField(DSL.name("secret_access_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.contract_obligation_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> CONTRACT_OBLIGATION_ID = createField(DSL.name("contract_obligation_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.application_reason_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> APPLICATION_REASON_ID = createField(DSL.name("application_reason_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.application_urgent_reason_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> APPLICATION_URGENT_REASON_ID = createField(DSL.name("application_urgent_reason_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.addit_citizenship_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> ADDIT_CITIZENSHIP_ID = createField(DSL.name("addit_citizenship_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.target_country_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> TARGET_COUNTRY_ID = createField(DSL.name("target_country_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.applicant_category_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> APPLICANT_CATEGORY_ID = createField(DSL.name("applicant_category_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.issue_dt</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, LocalDate> ISSUE_DT = createField(DSL.name("issue_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.secret_access_dt</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, LocalDate> SECRET_ACCESS_DT = createField(DSL.name("secret_access_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.contract_obligation_dt</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, LocalDate> CONTRACT_OBLIGATION_DT = createField(DSL.name("contract_obligation_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.blank_receipt_dt</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, LocalDate> BLANK_RECEIPT_DT = createField(DSL.name("blank_receipt_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.secret_access_org_name</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, String> SECRET_ACCESS_ORG_NAME = createField(DSL.name("secret_access_org_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.contract_obligation_org_name</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, String> CONTRACT_OBLIGATION_ORG_NAME = createField(DSL.name("contract_obligation_org_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.signer</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, String> SIGNER = createField(DSL.name("signer"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.reason_issue_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> REASON_ISSUE_ID = createField(DSL.name("reason_issue_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.convicted</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Boolean> CONVICTED = createField(DSL.name("convicted"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.military_contract</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Boolean> MILITARY_CONTRACT = createField(DSL.name("military_contract"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.suspect</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Boolean> SUSPECT = createField(DSL.name("suspect"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.court_obligation_avoided</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Boolean> COURT_OBLIGATION_AVOIDED = createField(DSL.name("court_obligation_avoided"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.bankrupt</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Boolean> BANKRUPT = createField(DSL.name("bankrupt"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.fp_case_issuance_audit.type_applicant_id</code>.
     */
    public final TableField<FpCaseIssuanceAuditRecord, Long> TYPE_APPLICANT_ID = createField(DSL.name("type_applicant_id"), SQLDataType.BIGINT, this, "");

    private FpCaseIssuanceAudit(Name alias, Table<FpCaseIssuanceAuditRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpCaseIssuanceAudit(Name alias, Table<FpCaseIssuanceAuditRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица версионирования fp_case_issuance"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_case_issuance_audit</code> table
     * reference
     */
    public FpCaseIssuanceAudit(String alias) {
        this(DSL.name(alias), FP_CASE_ISSUANCE_AUDIT);
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_case_issuance_audit</code> table
     * reference
     */
    public FpCaseIssuanceAudit(Name alias) {
        this(alias, FP_CASE_ISSUANCE_AUDIT);
    }

    /**
     * Create a <code>passport_international.fp_case_issuance_audit</code> table
     * reference
     */
    public FpCaseIssuanceAudit() {
        this(DSL.name("fp_case_issuance_audit"), null);
    }

    public <O extends Record> FpCaseIssuanceAudit(Table<O> child, ForeignKey<O, FpCaseIssuanceAuditRecord> key) {
        super(child, key, FP_CASE_ISSUANCE_AUDIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FP_CASE_ISSUANCE_AUDIT_CORRECTION_LOG_IX, Indexes.FP_CASE_ISSUANCE_AUDIT_EFF_DTTM_IX, Indexes.FP_CASE_ISSUANCE_AUDIT_EXP_DTTM_IX, Indexes.FP_CASE_ISSUANCE_AUDIT_RECORD_ID_IX);
    }

    @Override
    public Identity<FpCaseIssuanceAuditRecord, Long> getIdentity() {
        return (Identity<FpCaseIssuanceAuditRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FpCaseIssuanceAuditRecord> getPrimaryKey() {
        return Keys.FP_CASE_ISSUANCE_AUDIT_PK;
    }

    @Override
    public List<ForeignKey<FpCaseIssuanceAuditRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_CASE_ISSUANCE_AUDIT__FP_CASE_ISSUANCE_REF_FK, Keys.FP_CASE_ISSUANCE_AUDIT__FP_CASE_ISSUANCE_CORRECTION_LOG_FK);
    }

    private transient FpCaseIssuance _fpCaseIssuance;
    private transient CorrectionLog _correctionLog;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case_issuance</code> table.
     */
    public FpCaseIssuance fpCaseIssuance() {
        if (_fpCaseIssuance == null)
            _fpCaseIssuance = new FpCaseIssuance(this, Keys.FP_CASE_ISSUANCE_AUDIT__FP_CASE_ISSUANCE_REF_FK);

        return _fpCaseIssuance;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.correction_log</code> table.
     */
    public CorrectionLog correctionLog() {
        if (_correctionLog == null)
            _correctionLog = new CorrectionLog(this, Keys.FP_CASE_ISSUANCE_AUDIT__FP_CASE_ISSUANCE_CORRECTION_LOG_FK);

        return _correctionLog;
    }

    @Override
    public FpCaseIssuanceAudit as(String alias) {
        return new FpCaseIssuanceAudit(DSL.name(alias), this);
    }

    @Override
    public FpCaseIssuanceAudit as(Name alias) {
        return new FpCaseIssuanceAudit(alias, this);
    }

    @Override
    public FpCaseIssuanceAudit as(Table<?> alias) {
        return new FpCaseIssuanceAudit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseIssuanceAudit rename(String name) {
        return new FpCaseIssuanceAudit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseIssuanceAudit rename(Name name) {
        return new FpCaseIssuanceAudit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseIssuanceAudit rename(Table<?> name) {
        return new FpCaseIssuanceAudit(name.getQualifiedName(), null);
    }
}
