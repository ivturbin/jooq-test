/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.UploadedApplicationFileRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Файлы (документы) для загруженных заявлений
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UploadedApplicationFile extends TableImpl<UploadedApplicationFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.uploaded_application_file</code>
     */
    public static final UploadedApplicationFile UPLOADED_APPLICATION_FILE = new UploadedApplicationFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UploadedApplicationFileRecord> getRecordType() {
        return UploadedApplicationFileRecord.class;
    }

    /**
     * The column
     * <code>passport_international.uploaded_application_file.uploaded_application_file_id</code>.
     * Идентификатор файла
     */
    public final TableField<UploadedApplicationFileRecord, Long> UPLOADED_APPLICATION_FILE_ID = createField(DSL.name("uploaded_application_file_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор файла");

    /**
     * The column
     * <code>passport_international.uploaded_application_file.application_id</code>.
     * Идентификатор связанного заявления
     */
    public final TableField<UploadedApplicationFileRecord, Long> APPLICATION_ID = createField(DSL.name("application_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор связанного заявления");

    /**
     * The column
     * <code>passport_international.uploaded_application_file.file_type_id</code>.
     * Тип электронного типа документа (НСИ)
     */
    public final TableField<UploadedApplicationFileRecord, Long> FILE_TYPE_ID = createField(DSL.name("file_type_id"), SQLDataType.BIGINT.nullable(false), this, "Тип электронного типа документа (НСИ)");

    /**
     * The column
     * <code>passport_international.uploaded_application_file.file_uid</code>.
     */
    public final TableField<UploadedApplicationFileRecord, UUID> FILE_UID = createField(DSL.name("file_uid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.uploaded_application_file.create_dttm</code>.
     */
    public final TableField<UploadedApplicationFileRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.uploaded_application_file.modify_dttm</code>.
     */
    public final TableField<UploadedApplicationFileRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.uploaded_application_file.action_ind</code>.
     */
    public final TableField<UploadedApplicationFileRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    private UploadedApplicationFile(Name alias, Table<UploadedApplicationFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private UploadedApplicationFile(Name alias, Table<UploadedApplicationFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Файлы (документы) для загруженных заявлений"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.uploaded_application_file</code> table
     * reference
     */
    public UploadedApplicationFile(String alias) {
        this(DSL.name(alias), UPLOADED_APPLICATION_FILE);
    }

    /**
     * Create an aliased
     * <code>passport_international.uploaded_application_file</code> table
     * reference
     */
    public UploadedApplicationFile(Name alias) {
        this(alias, UPLOADED_APPLICATION_FILE);
    }

    /**
     * Create a <code>passport_international.uploaded_application_file</code>
     * table reference
     */
    public UploadedApplicationFile() {
        this(DSL.name("uploaded_application_file"), null);
    }

    public <O extends Record> UploadedApplicationFile(Table<O> child, ForeignKey<O, UploadedApplicationFileRecord> key) {
        super(child, key, UPLOADED_APPLICATION_FILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UPLOADED_APPLICATION_FILE_APPLICATION_ID_IX);
    }

    @Override
    public Identity<UploadedApplicationFileRecord, Long> getIdentity() {
        return (Identity<UploadedApplicationFileRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UploadedApplicationFileRecord> getPrimaryKey() {
        return Keys.UPLOADED_APPLICATION_FILE_PK;
    }

    @Override
    public List<ForeignKey<UploadedApplicationFileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.UPLOADED_APPLICATION_FILE__UPLOADED_APPLICATION_FILE_APPLICATION_ID_FK);
    }

    private transient CoreUploadedApplication _coreUploadedApplication;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_uploaded_application</code> table.
     */
    public CoreUploadedApplication coreUploadedApplication() {
        if (_coreUploadedApplication == null)
            _coreUploadedApplication = new CoreUploadedApplication(this, Keys.UPLOADED_APPLICATION_FILE__UPLOADED_APPLICATION_FILE_APPLICATION_ID_FK);

        return _coreUploadedApplication;
    }

    @Override
    public UploadedApplicationFile as(String alias) {
        return new UploadedApplicationFile(DSL.name(alias), this);
    }

    @Override
    public UploadedApplicationFile as(Name alias) {
        return new UploadedApplicationFile(alias, this);
    }

    @Override
    public UploadedApplicationFile as(Table<?> alias) {
        return new UploadedApplicationFile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UploadedApplicationFile rename(String name) {
        return new UploadedApplicationFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UploadedApplicationFile rename(Name name) {
        return new UploadedApplicationFile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UploadedApplicationFile rename(Table<?> name) {
        return new UploadedApplicationFile(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, UUID, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super Long, ? super UUID, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super Long, ? super UUID, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
