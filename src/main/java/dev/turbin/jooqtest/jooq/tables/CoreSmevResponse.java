/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreSmevResponseRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица для ответов smev
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreSmevResponse extends TableImpl<CoreSmevResponseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_smev_response</code>
     */
    public static final CoreSmevResponse CORE_SMEV_RESPONSE = new CoreSmevResponse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreSmevResponseRecord> getRecordType() {
        return CoreSmevResponseRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_smev_response.smev_response_id</code>.
     * Идентификатор
     */
    public final TableField<CoreSmevResponseRecord, Long> SMEV_RESPONSE_ID = createField(DSL.name("smev_response_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор");

    /**
     * The column
     * <code>passport_international.core_smev_response.core_smev_request_id</code>.
     * Идентификатор записи запроса от smev
     */
    public final TableField<CoreSmevResponseRecord, Long> CORE_SMEV_REQUEST_ID = createField(DSL.name("core_smev_request_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор записи запроса от smev");

    /**
     * The column
     * <code>passport_international.core_smev_response.client_uid</code>. UUID
     * сообщения ответа
     */
    public final TableField<CoreSmevResponseRecord, UUID> CLIENT_UID = createField(DSL.name("client_uid"), SQLDataType.UUID, this, "UUID сообщения ответа");

    /**
     * The column
     * <code>passport_international.core_smev_response.response_dvalue</code>.
     * Тело сообщения
     */
    public final TableField<CoreSmevResponseRecord, String> RESPONSE_DVALUE = createField(DSL.name("response_dvalue"), SQLDataType.CLOB, this, "Тело сообщения");

    /**
     * The column
     * <code>passport_international.core_smev_response.create_dttm</code>. Дата
     * время вставки записи
     */
    public final TableField<CoreSmevResponseRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи");

    /**
     * The column
     * <code>passport_international.core_smev_response.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<CoreSmevResponseRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.core_smev_response.action_ind</code>.
     * Индикатор действия
     */
    public final TableField<CoreSmevResponseRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор действия");

    private CoreSmevResponse(Name alias, Table<CoreSmevResponseRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreSmevResponse(Name alias, Table<CoreSmevResponseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для ответов smev"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_smev_response</code>
     * table reference
     */
    public CoreSmevResponse(String alias) {
        this(DSL.name(alias), CORE_SMEV_RESPONSE);
    }

    /**
     * Create an aliased <code>passport_international.core_smev_response</code>
     * table reference
     */
    public CoreSmevResponse(Name alias) {
        this(alias, CORE_SMEV_RESPONSE);
    }

    /**
     * Create a <code>passport_international.core_smev_response</code> table
     * reference
     */
    public CoreSmevResponse() {
        this(DSL.name("core_smev_response"), null);
    }

    public <O extends Record> CoreSmevResponse(Table<O> child, ForeignKey<O, CoreSmevResponseRecord> key) {
        super(child, key, CORE_SMEV_RESPONSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<CoreSmevResponseRecord, Long> getIdentity() {
        return (Identity<CoreSmevResponseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreSmevResponseRecord> getPrimaryKey() {
        return Keys.CORE_SMEV_RESPONSE_PK;
    }

    @Override
    public List<ForeignKey<CoreSmevResponseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_SMEV_RESPONSE__CORE_SMEV_RESPONSE_REQ_FK);
    }

    private transient CoreSmevRequest _coreSmevRequest;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_smev_request</code> table.
     */
    public CoreSmevRequest coreSmevRequest() {
        if (_coreSmevRequest == null)
            _coreSmevRequest = new CoreSmevRequest(this, Keys.CORE_SMEV_RESPONSE__CORE_SMEV_RESPONSE_REQ_FK);

        return _coreSmevRequest;
    }

    @Override
    public CoreSmevResponse as(String alias) {
        return new CoreSmevResponse(DSL.name(alias), this);
    }

    @Override
    public CoreSmevResponse as(Name alias) {
        return new CoreSmevResponse(alias, this);
    }

    @Override
    public CoreSmevResponse as(Table<?> alias) {
        return new CoreSmevResponse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSmevResponse rename(String name) {
        return new CoreSmevResponse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSmevResponse rename(Name name) {
        return new CoreSmevResponse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSmevResponse rename(Table<?> name) {
        return new CoreSmevResponse(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, UUID, String, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super UUID, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super UUID, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
