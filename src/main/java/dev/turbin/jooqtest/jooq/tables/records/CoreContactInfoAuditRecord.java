/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.CoreContactInfoAudit;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Таблица версионирования core_contact_info
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreContactInfoAuditRecord extends UpdatableRecordImpl<CoreContactInfoAuditRecord> implements Record14<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Integer, String, String, String, String, Boolean, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.id</code>.
     * Идентификатор
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.id</code>.
     * Идентификатор
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.record_id</code>.
     * Иденитификатор версионируемой записи
     */
    public void setRecordId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.record_id</code>.
     * Иденитификатор версионируемой записи
     */
    public Long getRecordId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public void setCorrectionLogId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public Long getCorrectionLogId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.update_user</code>.
     * Пользователь создавший версию
     */
    public void setUpdateUser(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.update_user</code>.
     * Пользователь создавший версию
     */
    public String getUpdateUser() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.eff_dttm</code>.
     * Время начала действия версии effective from
     */
    public void setEffDttm(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.eff_dttm</code>.
     * Время начала действия версии effective from
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.exp_dttm</code>.
     * Время окончания действия версии expired
     */
    public void setExpDttm(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.exp_dttm</code>.
     * Время окончания действия версии expired
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.version</code>.
     */
    public void setVersion(Integer value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.email</code>.
     */
    public void setEmail(String value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.email</code>.
     */
    public String getEmail() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.phone</code>.
     */
    public void setPhone(String value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.phone</code>.
     */
    public String getPhone() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.fax_cval</code>.
     */
    public void setFaxCval(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.fax_cval</code>.
     */
    public String getFaxCval() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.contact_info_desc</code>.
     */
    public void setContactInfoDesc(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.contact_info_desc</code>.
     */
    public String getContactInfoDesc() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.survey_agreement_bool</code>.
     */
    public void setSurveyAgreementBool(Boolean value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.survey_agreement_bool</code>.
     */
    public Boolean getSurveyAgreementBool() {
        return (Boolean) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.core_person_document_id</code>.
     */
    public void setCorePersonDocumentId(Long value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.core_person_document_id</code>.
     */
    public Long getCorePersonDocumentId() {
        return (Long) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.core_contact_info_audit.agree</code>.
     */
    public void setAgree(Boolean value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_contact_info_audit.agree</code>.
     */
    public Boolean getAgree() {
        return (Boolean) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Integer, String, String, String, String, Boolean, Long, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Integer, String, String, String, String, Boolean, Long, Boolean> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.ID;
    }

    @Override
    public Field<Long> field2() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.RECORD_ID;
    }

    @Override
    public Field<Long> field3() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.CORRECTION_LOG_ID;
    }

    @Override
    public Field<String> field4() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.UPDATE_USER;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.EFF_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.EXP_DTTM;
    }

    @Override
    public Field<Integer> field7() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.VERSION;
    }

    @Override
    public Field<String> field8() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.EMAIL;
    }

    @Override
    public Field<String> field9() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.PHONE;
    }

    @Override
    public Field<String> field10() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.FAX_CVAL;
    }

    @Override
    public Field<String> field11() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.CONTACT_INFO_DESC;
    }

    @Override
    public Field<Boolean> field12() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.SURVEY_AGREEMENT_BOOL;
    }

    @Override
    public Field<Long> field13() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.CORE_PERSON_DOCUMENT_ID;
    }

    @Override
    public Field<Boolean> field14() {
        return CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT.AGREE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getRecordId();
    }

    @Override
    public Long component3() {
        return getCorrectionLogId();
    }

    @Override
    public String component4() {
        return getUpdateUser();
    }

    @Override
    public OffsetDateTime component5() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime component6() {
        return getExpDttm();
    }

    @Override
    public Integer component7() {
        return getVersion();
    }

    @Override
    public String component8() {
        return getEmail();
    }

    @Override
    public String component9() {
        return getPhone();
    }

    @Override
    public String component10() {
        return getFaxCval();
    }

    @Override
    public String component11() {
        return getContactInfoDesc();
    }

    @Override
    public Boolean component12() {
        return getSurveyAgreementBool();
    }

    @Override
    public Long component13() {
        return getCorePersonDocumentId();
    }

    @Override
    public Boolean component14() {
        return getAgree();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getRecordId();
    }

    @Override
    public Long value3() {
        return getCorrectionLogId();
    }

    @Override
    public String value4() {
        return getUpdateUser();
    }

    @Override
    public OffsetDateTime value5() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime value6() {
        return getExpDttm();
    }

    @Override
    public Integer value7() {
        return getVersion();
    }

    @Override
    public String value8() {
        return getEmail();
    }

    @Override
    public String value9() {
        return getPhone();
    }

    @Override
    public String value10() {
        return getFaxCval();
    }

    @Override
    public String value11() {
        return getContactInfoDesc();
    }

    @Override
    public Boolean value12() {
        return getSurveyAgreementBool();
    }

    @Override
    public Long value13() {
        return getCorePersonDocumentId();
    }

    @Override
    public Boolean value14() {
        return getAgree();
    }

    @Override
    public CoreContactInfoAuditRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value2(Long value) {
        setRecordId(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value3(Long value) {
        setCorrectionLogId(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value4(String value) {
        setUpdateUser(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value5(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value6(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value7(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value8(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value9(String value) {
        setPhone(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value10(String value) {
        setFaxCval(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value11(String value) {
        setContactInfoDesc(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value12(Boolean value) {
        setSurveyAgreementBool(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value13(Long value) {
        setCorePersonDocumentId(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord value14(Boolean value) {
        setAgree(value);
        return this;
    }

    @Override
    public CoreContactInfoAuditRecord values(Long value1, Long value2, Long value3, String value4, OffsetDateTime value5, OffsetDateTime value6, Integer value7, String value8, String value9, String value10, String value11, Boolean value12, Long value13, Boolean value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreContactInfoAuditRecord
     */
    public CoreContactInfoAuditRecord() {
        super(CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT);
    }

    /**
     * Create a detached, initialised CoreContactInfoAuditRecord
     */
    public CoreContactInfoAuditRecord(Long id, Long recordId, Long correctionLogId, String updateUser, OffsetDateTime effDttm, OffsetDateTime expDttm, Integer version, String email, String phone, String faxCval, String contactInfoDesc, Boolean surveyAgreementBool, Long corePersonDocumentId, Boolean agree) {
        super(CoreContactInfoAudit.CORE_CONTACT_INFO_AUDIT);

        setId(id);
        setRecordId(recordId);
        setCorrectionLogId(correctionLogId);
        setUpdateUser(updateUser);
        setEffDttm(effDttm);
        setExpDttm(expDttm);
        setVersion(version);
        setEmail(email);
        setPhone(phone);
        setFaxCval(faxCval);
        setContactInfoDesc(contactInfoDesc);
        setSurveyAgreementBool(surveyAgreementBool);
        setCorePersonDocumentId(corePersonDocumentId);
        setAgree(agree);
        resetChangedOnNotNull();
    }
}
