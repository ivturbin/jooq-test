/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.Charge;

import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Начисление
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChargeRecord extends UpdatableRecordImpl<ChargeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>passport_international.charge.charge_id</code>.
     * Иднетификатор записи
     */
    public void setChargeId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>passport_international.charge.charge_id</code>.
     * Иднетификатор записи
     */
    public Long getChargeId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>passport_international.charge.case_id</code>.
     * Идентификатор к которому относится начисление
     */
    public void setCaseId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>passport_international.charge.case_id</code>.
     * Идентификатор к которому относится начисление
     */
    public Long getCaseId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>passport_international.charge.supplier_bill_uin</code>.
     * Уникальный идентификатор начисления (УИН)
     */
    public void setSupplierBillUin(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>passport_international.charge.supplier_bill_uin</code>.
     * Уникальный идентификатор начисления (УИН)
     */
    public String getSupplierBillUin() {
        return (String) get(2);
    }

    /**
     * Setter for <code>passport_international.charge.status_code</code>. Статус
     * начисления
     */
    public void setStatusCode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>passport_international.charge.status_code</code>. Статус
     * начисления
     */
    public String getStatusCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>passport_international.charge.amount_rub_coin</code>.
     * Рассчтанаая сумма начисления в копейках
     */
    public void setAmountRubCoin(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>passport_international.charge.amount_rub_coin</code>.
     * Рассчтанаая сумма начисления в копейках
     */
    public Long getAmountRubCoin() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>passport_international.charge.balance_rub_coin</code>.
     * Оставшаяся сумма к оплате в копейках
     */
    public void setBalanceRubCoin(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>passport_international.charge.balance_rub_coin</code>.
     * Оставшаяся сумма к оплате в копейках
     */
    public Long getBalanceRubCoin() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>passport_international.charge.create_dttm</code>. Дата
     * время вставки записи
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>passport_international.charge.create_dttm</code>. Дата
     * время вставки записи
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>passport_international.charge.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>passport_international.charge.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for <code>passport_international.charge.action_ind</code>.
     * Индикатор действия
     */
    public void setActionInd(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>passport_international.charge.action_ind</code>.
     * Индикатор действия
     */
    public String getActionInd() {
        return (String) get(8);
    }

    /**
     * Setter for <code>passport_international.charge.version</code>.
     */
    public void setVersion(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>passport_international.charge.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.charge.payment_document_file</code>.
     * Идентификатор-ссылка на файл платежного документа(квитанции) в файловом
     * хранилище
     */
    public void setPaymentDocumentFile(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.charge.payment_document_file</code>.
     * Идентификатор-ссылка на файл платежного документа(квитанции) в файловом
     * хранилище
     */
    public String getPaymentDocumentFile() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.charge.correlation_id_code</code>.
     * идентификатор запроса создания начисления
     */
    public void setCorrelationIdCode(String value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.charge.correlation_id_code</code>.
     * идентификатор запроса создания начисления
     */
    public String getCorrelationIdCode() {
        return (String) get(11);
    }

    /**
     * Setter for <code>passport_international.charge.payer_kind_code</code>.
     * Тип плательщика. Возможные значения:
     *         PERSON - физическое лицо
     *         BUSINESSMAN - индивидуальный предприниматель (ИП)
     *         RF_ORGANIZATION - юридическое лицо из Российской Федерации
     *         FOREIGN_ORGANIZATION - иностранное юридическое лицо
     */
    public void setPayerKindCode(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>passport_international.charge.payer_kind_code</code>.
     * Тип плательщика. Возможные значения:
     *         PERSON - физическое лицо
     *         BUSINESSMAN - индивидуальный предприниматель (ИП)
     *         RF_ORGANIZATION - юридическое лицо из Российской Федерации
     *         FOREIGN_ORGANIZATION - иностранное юридическое лицо
     */
    public String getPayerKindCode() {
        return (String) get(12);
    }

    /**
     * Setter for <code>passport_international.charge.payer_person_id</code>.
     * Идентификатор плательщика в случае физ лица
     */
    public void setPayerPersonId(Long value) {
        set(13, value);
    }

    /**
     * Getter for <code>passport_international.charge.payer_person_id</code>.
     * Идентификатор плательщика в случае физ лица
     */
    public Long getPayerPersonId() {
        return (Long) get(13);
    }

    /**
     * Setter for <code>passport_international.charge.payer_full_name</code>.
     * ФИО физ лица или наименование организации
     */
    public void setPayerFullName(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>passport_international.charge.payer_full_name</code>.
     * ФИО физ лица или наименование организации
     */
    public String getPayerFullName() {
        return (String) get(14);
    }

    /**
     * Setter for
     * <code>passport_international.charge.payer_doc_type_code</code>. Код типа
     * документа удостоверяющего личность плательщика в системе ГИС ГМП
     */
    public void setPayerDocTypeCode(String value) {
        set(15, value);
    }

    /**
     * Getter for
     * <code>passport_international.charge.payer_doc_type_code</code>. Код типа
     * документа удостоверяющего личность плательщика в системе ГИС ГМП
     */
    public String getPayerDocTypeCode() {
        return (String) get(15);
    }

    /**
     * Setter for
     * <code>passport_international.charge.payer_doc_series_code</code>. Серия
     * документа удостоверяющего личность плательщика
     */
    public void setPayerDocSeriesCode(String value) {
        set(16, value);
    }

    /**
     * Getter for
     * <code>passport_international.charge.payer_doc_series_code</code>. Серия
     * документа удостоверяющего личность плательщика
     */
    public String getPayerDocSeriesCode() {
        return (String) get(16);
    }

    /**
     * Setter for <code>passport_international.charge.payer_doc_no</code>. Номер
     * документа, удостоверяющего личность плательщика
     */
    public void setPayerDocNo(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>passport_international.charge.payer_doc_no</code>. Номер
     * документа, удостоверяющего личность плательщика
     */
    public String getPayerDocNo() {
        return (String) get(17);
    }

    /**
     * Setter for <code>passport_international.charge.payer_account_no</code>.
     * Номер банковского счета плательщика
     */
    public void setPayerAccountNo(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>passport_international.charge.payer_account_no</code>.
     * Номер банковского счета плательщика
     */
    public String getPayerAccountNo() {
        return (String) get(18);
    }

    /**
     * Setter for <code>passport_international.charge.payer_bank_name</code>.
     * Наименование банка плательщика
     */
    public void setPayerBankName(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>passport_international.charge.payer_bank_name</code>.
     * Наименование банка плательщика
     */
    public String getPayerBankName() {
        return (String) get(19);
    }

    /**
     * Setter for <code>passport_international.charge.payer_bank_bik</code>.
     * Банковский идентификационный код (БИК) банка плательщика
     */
    public void setPayerBankBik(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>passport_international.charge.payer_bank_bik</code>.
     * Банковский идентификационный код (БИК) банка плательщика
     */
    public String getPayerBankBik() {
        return (String) get(20);
    }

    /**
     * Setter for <code>passport_international.charge.payer_doc_type_id</code>.
     * Идентификатор типа документа удостоверяющего личность плательщика (НСИ)
     */
    public void setPayerDocTypeId(Long value) {
        set(21, value);
    }

    /**
     * Getter for <code>passport_international.charge.payer_doc_type_id</code>.
     * Идентификатор типа документа удостоверяющего личность плательщика (НСИ)
     */
    public Long getPayerDocTypeId() {
        return (Long) get(21);
    }

    /**
     * Setter for <code>passport_international.charge.purpose_name</code>.
     * Назначение платежа
     */
    public void setPurposeName(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>passport_international.charge.purpose_name</code>.
     * Назначение платежа
     */
    public String getPurposeName() {
        return (String) get(22);
    }

    /**
     * Setter for <code>passport_international.charge.kbk</code>. Код бюджетной
     * классификации (КБK)
     */
    public void setKbk(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>passport_international.charge.kbk</code>. Код бюджетной
     * классификации (КБK)
     */
    public String getKbk() {
        return (String) get(23);
    }

    /**
     * Setter for
     * <code>passport_international.charge.payer_identifier_key</code>.
     * Уникальный идентификатор плательщика
     */
    public void setPayerIdentifierKey(String value) {
        set(24, value);
    }

    /**
     * Getter for
     * <code>passport_international.charge.payer_identifier_key</code>.
     * Уникальный идентификатор плательщика
     */
    public String getPayerIdentifierKey() {
        return (String) get(24);
    }

    /**
     * Setter for <code>passport_international.charge.type_cval</code>. Тип
     * начисления
     */
    public void setTypeCval(String value) {
        set(25, value);
    }

    /**
     * Getter for <code>passport_international.charge.type_cval</code>. Тип
     * начисления
     */
    public String getTypeCval() {
        return (String) get(25);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChargeRecord
     */
    public ChargeRecord() {
        super(Charge.CHARGE);
    }

    /**
     * Create a detached, initialised ChargeRecord
     */
    public ChargeRecord(Long chargeId, Long caseId, String supplierBillUin, String statusCode, Long amountRubCoin, Long balanceRubCoin, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, Integer version, String paymentDocumentFile, String correlationIdCode, String payerKindCode, Long payerPersonId, String payerFullName, String payerDocTypeCode, String payerDocSeriesCode, String payerDocNo, String payerAccountNo, String payerBankName, String payerBankBik, Long payerDocTypeId, String purposeName, String kbk, String payerIdentifierKey, String typeCval) {
        super(Charge.CHARGE);

        setChargeId(chargeId);
        setCaseId(caseId);
        setSupplierBillUin(supplierBillUin);
        setStatusCode(statusCode);
        setAmountRubCoin(amountRubCoin);
        setBalanceRubCoin(balanceRubCoin);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setVersion(version);
        setPaymentDocumentFile(paymentDocumentFile);
        setCorrelationIdCode(correlationIdCode);
        setPayerKindCode(payerKindCode);
        setPayerPersonId(payerPersonId);
        setPayerFullName(payerFullName);
        setPayerDocTypeCode(payerDocTypeCode);
        setPayerDocSeriesCode(payerDocSeriesCode);
        setPayerDocNo(payerDocNo);
        setPayerAccountNo(payerAccountNo);
        setPayerBankName(payerBankName);
        setPayerBankBik(payerBankBik);
        setPayerDocTypeId(payerDocTypeId);
        setPurposeName(purposeName);
        setKbk(kbk);
        setPayerIdentifierKey(payerIdentifierKey);
        setTypeCval(typeCval);
        resetChangedOnNotNull();
    }
}
