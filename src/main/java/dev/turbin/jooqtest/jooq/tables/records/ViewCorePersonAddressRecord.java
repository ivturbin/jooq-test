/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.ViewCorePersonAddress;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record22;
import org.jooq.Row22;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCorePersonAddressRecord extends TableRecordImpl<ViewCorePersonAddressRecord> implements Record22<Long, Boolean, Long, Long, Long, Long, String, LocalDate, LocalDate, LocalDate, String, Long, String, Long, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.core_person_address_id</code>.
     * Идентификатор
     */
    public void setCorePersonAddressId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.core_person_address_id</code>.
     * Идентификатор
     */
    public Long getCorePersonAddressId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.invalid_bool</code>.
     */
    public void setInvalidBool(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.invalid_bool</code>.
     */
    public Boolean getInvalidBool() {
        return (Boolean) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.person_id</code>.
     * Идентификатор физического лица
     */
    public void setPersonId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.person_id</code>.
     * Идентификатор физического лица
     */
    public Long getPersonId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.person_state_id</code>.
     * Состояние лица
     */
    public void setPersonStateId(Long value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.person_state_id</code>.
     * Состояние лица
     */
    public Long getPersonStateId() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.address_id</code>.
     * Адрес
     */
    public void setAddressId(Long value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.address_id</code>.
     * Адрес
     */
    public Long getAddressId() {
        return (Long) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.address_type_id</code>.
     * Тип адреса или регистрации по адресу
     */
    public void setAddressTypeId(Long value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.address_type_id</code>.
     * Тип адреса или регистрации по адресу
     */
    public Long getAddressTypeId() {
        return (Long) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.create_user</code>.
     * Пользователь, создавший запись
     */
    public void setCreateUser(String value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.create_user</code>.
     * Пользователь, создавший запись
     */
    public String getCreateUser() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.from_dt</code>.
     * Дата начала регистрации
     */
    public void setFromDt(LocalDate value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.from_dt</code>.
     * Дата начала регистрации
     */
    public LocalDate getFromDt() {
        return (LocalDate) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.to_dt</code>. Дата
     * окончания регистрации
     */
    public void setToDt(LocalDate value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.to_dt</code>. Дата
     * окончания регистрации
     */
    public LocalDate getToDt() {
        return (LocalDate) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.invalid_dt</code>.
     * Дата инвалидации записи
     */
    public void setInvalidDt(LocalDate value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.invalid_dt</code>.
     * Дата инвалидации записи
     */
    public LocalDate getInvalidDt() {
        return (LocalDate) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.invalid_user</code>.
     */
    public void setInvalidUser(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.invalid_user</code>.
     */
    public String getInvalidUser() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.new_core_person_address_id</code>.
     */
    public void setNewCorePersonAddressId(Long value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.new_core_person_address_id</code>.
     */
    public Long getNewCorePersonAddressId() {
        return (Long) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.unstructured_cval</code>.
     */
    public void setUnstructuredCval(String value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.unstructured_cval</code>.
     */
    public String getUnstructuredCval() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.sono_id</code>.
     * Налоговый орган (соно)
     */
    public void setSonoId(Long value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.sono_id</code>.
     * Налоговый орган (соно)
     */
    public Long getSonoId() {
        return (Long) get(13);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.src_id</code>.
     */
    public void setSrcId(Long value) {
        set(14, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.src_id</code>.
     */
    public Long getSrcId() {
        return (Long) get(14);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(15, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(15);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(16, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(16);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public void setExpDttm(OffsetDateTime value) {
        set(17, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(17);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public void setEffDttm(OffsetDateTime value) {
        set(18, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(18);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.action_ind</code>.
     * Индикатор операции dml(i-insert,d-delete,u-update)
     */
    public void setActionInd(String value) {
        set(19, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.action_ind</code>.
     * Индикатор операции dml(i-insert,d-delete,u-update)
     */
    public String getActionInd() {
        return (String) get(19);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.core_person_doc_id</code>.
     */
    public void setCorePersonDocId(Long value) {
        set(20, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.core_person_doc_id</code>.
     */
    public Long getCorePersonDocId() {
        return (Long) get(20);
    }

    /**
     * Setter for
     * <code>passport_international.view_core_person_address.nsi_address_id</code>.
     * Идентификатор адреса из НСИ
     */
    public void setNsiAddressId(Long value) {
        set(21, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_core_person_address.nsi_address_id</code>.
     * Идентификатор адреса из НСИ
     */
    public Long getNsiAddressId() {
        return (Long) get(21);
    }

    // -------------------------------------------------------------------------
    // Record22 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, Boolean, Long, Long, Long, Long, String, LocalDate, LocalDate, LocalDate, String, Long, String, Long, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, Long, Long> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    @Override
    public Row22<Long, Boolean, Long, Long, Long, Long, String, LocalDate, LocalDate, LocalDate, String, Long, String, Long, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, Long, Long> valuesRow() {
        return (Row22) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.CORE_PERSON_ADDRESS_ID;
    }

    @Override
    public Field<Boolean> field2() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.INVALID_BOOL;
    }

    @Override
    public Field<Long> field3() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.PERSON_ID;
    }

    @Override
    public Field<Long> field4() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.PERSON_STATE_ID;
    }

    @Override
    public Field<Long> field5() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.ADDRESS_ID;
    }

    @Override
    public Field<Long> field6() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.ADDRESS_TYPE_ID;
    }

    @Override
    public Field<String> field7() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.CREATE_USER;
    }

    @Override
    public Field<LocalDate> field8() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.FROM_DT;
    }

    @Override
    public Field<LocalDate> field9() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.TO_DT;
    }

    @Override
    public Field<LocalDate> field10() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.INVALID_DT;
    }

    @Override
    public Field<String> field11() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.INVALID_USER;
    }

    @Override
    public Field<Long> field12() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.NEW_CORE_PERSON_ADDRESS_ID;
    }

    @Override
    public Field<String> field13() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.UNSTRUCTURED_CVAL;
    }

    @Override
    public Field<Long> field14() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.SONO_ID;
    }

    @Override
    public Field<Long> field15() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.SRC_ID;
    }

    @Override
    public Field<OffsetDateTime> field16() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field17() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.MODIFY_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field18() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.EXP_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field19() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.EFF_DTTM;
    }

    @Override
    public Field<String> field20() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.ACTION_IND;
    }

    @Override
    public Field<Long> field21() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.CORE_PERSON_DOC_ID;
    }

    @Override
    public Field<Long> field22() {
        return ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS.NSI_ADDRESS_ID;
    }

    @Override
    public Long component1() {
        return getCorePersonAddressId();
    }

    @Override
    public Boolean component2() {
        return getInvalidBool();
    }

    @Override
    public Long component3() {
        return getPersonId();
    }

    @Override
    public Long component4() {
        return getPersonStateId();
    }

    @Override
    public Long component5() {
        return getAddressId();
    }

    @Override
    public Long component6() {
        return getAddressTypeId();
    }

    @Override
    public String component7() {
        return getCreateUser();
    }

    @Override
    public LocalDate component8() {
        return getFromDt();
    }

    @Override
    public LocalDate component9() {
        return getToDt();
    }

    @Override
    public LocalDate component10() {
        return getInvalidDt();
    }

    @Override
    public String component11() {
        return getInvalidUser();
    }

    @Override
    public Long component12() {
        return getNewCorePersonAddressId();
    }

    @Override
    public String component13() {
        return getUnstructuredCval();
    }

    @Override
    public Long component14() {
        return getSonoId();
    }

    @Override
    public Long component15() {
        return getSrcId();
    }

    @Override
    public OffsetDateTime component16() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component17() {
        return getModifyDttm();
    }

    @Override
    public OffsetDateTime component18() {
        return getExpDttm();
    }

    @Override
    public OffsetDateTime component19() {
        return getEffDttm();
    }

    @Override
    public String component20() {
        return getActionInd();
    }

    @Override
    public Long component21() {
        return getCorePersonDocId();
    }

    @Override
    public Long component22() {
        return getNsiAddressId();
    }

    @Override
    public Long value1() {
        return getCorePersonAddressId();
    }

    @Override
    public Boolean value2() {
        return getInvalidBool();
    }

    @Override
    public Long value3() {
        return getPersonId();
    }

    @Override
    public Long value4() {
        return getPersonStateId();
    }

    @Override
    public Long value5() {
        return getAddressId();
    }

    @Override
    public Long value6() {
        return getAddressTypeId();
    }

    @Override
    public String value7() {
        return getCreateUser();
    }

    @Override
    public LocalDate value8() {
        return getFromDt();
    }

    @Override
    public LocalDate value9() {
        return getToDt();
    }

    @Override
    public LocalDate value10() {
        return getInvalidDt();
    }

    @Override
    public String value11() {
        return getInvalidUser();
    }

    @Override
    public Long value12() {
        return getNewCorePersonAddressId();
    }

    @Override
    public String value13() {
        return getUnstructuredCval();
    }

    @Override
    public Long value14() {
        return getSonoId();
    }

    @Override
    public Long value15() {
        return getSrcId();
    }

    @Override
    public OffsetDateTime value16() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value17() {
        return getModifyDttm();
    }

    @Override
    public OffsetDateTime value18() {
        return getExpDttm();
    }

    @Override
    public OffsetDateTime value19() {
        return getEffDttm();
    }

    @Override
    public String value20() {
        return getActionInd();
    }

    @Override
    public Long value21() {
        return getCorePersonDocId();
    }

    @Override
    public Long value22() {
        return getNsiAddressId();
    }

    @Override
    public ViewCorePersonAddressRecord value1(Long value) {
        setCorePersonAddressId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value2(Boolean value) {
        setInvalidBool(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value3(Long value) {
        setPersonId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value4(Long value) {
        setPersonStateId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value5(Long value) {
        setAddressId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value6(Long value) {
        setAddressTypeId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value7(String value) {
        setCreateUser(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value8(LocalDate value) {
        setFromDt(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value9(LocalDate value) {
        setToDt(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value10(LocalDate value) {
        setInvalidDt(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value11(String value) {
        setInvalidUser(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value12(Long value) {
        setNewCorePersonAddressId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value13(String value) {
        setUnstructuredCval(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value14(Long value) {
        setSonoId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value15(Long value) {
        setSrcId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value16(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value17(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value18(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value19(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value20(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value21(Long value) {
        setCorePersonDocId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord value22(Long value) {
        setNsiAddressId(value);
        return this;
    }

    @Override
    public ViewCorePersonAddressRecord values(Long value1, Boolean value2, Long value3, Long value4, Long value5, Long value6, String value7, LocalDate value8, LocalDate value9, LocalDate value10, String value11, Long value12, String value13, Long value14, Long value15, OffsetDateTime value16, OffsetDateTime value17, OffsetDateTime value18, OffsetDateTime value19, String value20, Long value21, Long value22) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        value21(value21);
        value22(value22);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewCorePersonAddressRecord
     */
    public ViewCorePersonAddressRecord() {
        super(ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS);
    }

    /**
     * Create a detached, initialised ViewCorePersonAddressRecord
     */
    public ViewCorePersonAddressRecord(Long corePersonAddressId, Boolean invalidBool, Long personId, Long personStateId, Long addressId, Long addressTypeId, String createUser, LocalDate fromDt, LocalDate toDt, LocalDate invalidDt, String invalidUser, Long newCorePersonAddressId, String unstructuredCval, Long sonoId, Long srcId, OffsetDateTime createDttm, OffsetDateTime modifyDttm, OffsetDateTime expDttm, OffsetDateTime effDttm, String actionInd, Long corePersonDocId, Long nsiAddressId) {
        super(ViewCorePersonAddress.VIEW_CORE_PERSON_ADDRESS);

        setCorePersonAddressId(corePersonAddressId);
        setInvalidBool(invalidBool);
        setPersonId(personId);
        setPersonStateId(personStateId);
        setAddressId(addressId);
        setAddressTypeId(addressTypeId);
        setCreateUser(createUser);
        setFromDt(fromDt);
        setToDt(toDt);
        setInvalidDt(invalidDt);
        setInvalidUser(invalidUser);
        setNewCorePersonAddressId(newCorePersonAddressId);
        setUnstructuredCval(unstructuredCval);
        setSonoId(sonoId);
        setSrcId(srcId);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setExpDttm(expDttm);
        setEffDttm(effDttm);
        setActionInd(actionInd);
        setCorePersonDocId(corePersonDocId);
        setNsiAddressId(nsiAddressId);
        resetChangedOnNotNull();
    }
}
