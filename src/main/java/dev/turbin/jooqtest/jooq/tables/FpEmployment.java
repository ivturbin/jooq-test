/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpEmploymentRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Трудовая деятельсность в заявлении ЗП
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpEmployment extends TableImpl<FpEmploymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_employment</code>
     */
    public static final FpEmployment FP_EMPLOYMENT = new FpEmployment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpEmploymentRecord> getRecordType() {
        return FpEmploymentRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_employment.fp_case_issuance_id</code>.
     * Дело о выдаче заграничного паспорта
     */
    public final TableField<FpEmploymentRecord, Long> FP_CASE_ISSUANCE_ID = createField(DSL.name("fp_case_issuance_id"), SQLDataType.BIGINT.nullable(false), this, "Дело о выдаче заграничного паспорта");

    /**
     * The column <code>passport_international.fp_employment.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<FpEmploymentRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column <code>passport_international.fp_employment.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<FpEmploymentRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column <code>passport_international.fp_employment.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<FpEmploymentRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column <code>passport_international.fp_employment.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<FpEmploymentRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column <code>passport_international.fp_employment.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpEmploymentRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column <code>passport_international.fp_employment.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpEmploymentRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.fp_employment.employments_order</code>.
     */
    public final TableField<FpEmploymentRecord, Long> EMPLOYMENTS_ORDER = createField(DSL.name("employments_order"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.fp_employment.employments_id</code>.
     */
    public final TableField<FpEmploymentRecord, Long> EMPLOYMENTS_ID = createField(DSL.name("employments_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>passport_international.fp_employment.id</code>.
     */
    public final TableField<FpEmploymentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private FpEmployment(Name alias, Table<FpEmploymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpEmployment(Name alias, Table<FpEmploymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Трудовая деятельсность в заявлении ЗП"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.fp_employment</code> table
     * reference
     */
    public FpEmployment(String alias) {
        this(DSL.name(alias), FP_EMPLOYMENT);
    }

    /**
     * Create an aliased <code>passport_international.fp_employment</code> table
     * reference
     */
    public FpEmployment(Name alias) {
        this(alias, FP_EMPLOYMENT);
    }

    /**
     * Create a <code>passport_international.fp_employment</code> table
     * reference
     */
    public FpEmployment() {
        this(DSL.name("fp_employment"), null);
    }

    public <O extends Record> FpEmployment(Table<O> child, ForeignKey<O, FpEmploymentRecord> key) {
        super(child, key, FP_EMPLOYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<FpEmploymentRecord, Long> getIdentity() {
        return (Identity<FpEmploymentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FpEmploymentRecord> getPrimaryKey() {
        return Keys.FP_EMPLOYMENT_PK;
    }

    @Override
    public List<ForeignKey<FpEmploymentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_EMPLOYMENT__FK_FP_EMPLOYMENT_FP_CASE_ISSUANCE, Keys.FP_EMPLOYMENT__FP_EMPLOYMENT_EMPLOYMENTS_ID_FK);
    }

    private transient FpCaseIssuance _fpCaseIssuance;
    private transient Employment _employment;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case_issuance</code> table.
     */
    public FpCaseIssuance fpCaseIssuance() {
        if (_fpCaseIssuance == null)
            _fpCaseIssuance = new FpCaseIssuance(this, Keys.FP_EMPLOYMENT__FK_FP_EMPLOYMENT_FP_CASE_ISSUANCE);

        return _fpCaseIssuance;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.employment</code> table.
     */
    public Employment employment() {
        if (_employment == null)
            _employment = new Employment(this, Keys.FP_EMPLOYMENT__FP_EMPLOYMENT_EMPLOYMENTS_ID_FK);

        return _employment;
    }

    @Override
    public FpEmployment as(String alias) {
        return new FpEmployment(DSL.name(alias), this);
    }

    @Override
    public FpEmployment as(Name alias) {
        return new FpEmployment(alias, this);
    }

    @Override
    public FpEmployment as(Table<?> alias) {
        return new FpEmployment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpEmployment rename(String name) {
        return new FpEmployment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpEmployment rename(Name name) {
        return new FpEmployment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpEmployment rename(Table<?> name) {
        return new FpEmployment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, Long, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
