/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.CoreComment;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Комментарии к делу
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreCommentRecord extends UpdatableRecordImpl<CoreCommentRecord> implements Record9<Long, Long, String, String, OffsetDateTime, OffsetDateTime, String, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.core_comment.core_comment_id</code>.
     * Идентификатор сообщения
     */
    public void setCoreCommentId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_comment.core_comment_id</code>.
     * Идентификатор сообщения
     */
    public Long getCoreCommentId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>passport_international.core_comment.core_case_id</code>.
     * id базового объекта учета - дела или заявления
     */
    public void setCoreCaseId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>passport_international.core_comment.core_case_id</code>.
     * id базового объекта учета - дела или заявления
     */
    public Long getCoreCaseId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>passport_international.core_comment.create_user</code>.
     * Автор сообщения (для входящих - N/D, для исходящих - оператор, ответивший
     * на сообщение)
     */
    public void setCreateUser(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>passport_international.core_comment.create_user</code>.
     * Автор сообщения (для входящих - N/D, для исходящих - оператор, ответивший
     * на сообщение)
     */
    public String getCreateUser() {
        return (String) get(2);
    }

    /**
     * Setter for <code>passport_international.core_comment.comment_desc</code>.
     * Текст сообщения
     */
    public void setCommentDesc(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>passport_international.core_comment.comment_desc</code>.
     * Текст сообщения
     */
    public String getCommentDesc() {
        return (String) get(3);
    }

    /**
     * Setter for <code>passport_international.core_comment.create_dttm</code>.
     * Дата и время создания записи
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>passport_international.core_comment.create_dttm</code>.
     * Дата и время создания записи
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>passport_international.core_comment.modify_dttm</code>.
     * Дата и время изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>passport_international.core_comment.modify_dttm</code>.
     * Дата и время изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>passport_international.core_comment.action_ind</code>.
     */
    public void setActionInd(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>passport_international.core_comment.action_ind</code>.
     */
    public String getActionInd() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.core_comment.supplier_category_id</code>.
     * Идентификатор поставщика, в системе которого сформирован комментарий,
     * справочник НСИ providerType ЕПГУ - 2562679063982380817 МВД -
     * 2562679063185463055
     */
    public void setSupplierCategoryId(Long value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_comment.supplier_category_id</code>.
     * Идентификатор поставщика, в системе которого сформирован комментарий,
     * справочник НСИ providerType ЕПГУ - 2562679063982380817 МВД -
     * 2562679063185463055
     */
    public Long getSupplierCategoryId() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.core_comment.comment_type_id</code>.
     * Входящее без ответа - 1 Входящее с ответом - 2 Исходящее - 3 Комментарий
     * - 4
     */
    public void setCommentTypeId(Long value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_comment.comment_type_id</code>.
     * Входящее без ответа - 1 Входящее с ответом - 2 Исходящее - 3 Комментарий
     * - 4
     */
    public Long getCommentTypeId() {
        return (Long) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, String, String, OffsetDateTime, OffsetDateTime, String, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Long, String, String, OffsetDateTime, OffsetDateTime, String, Long, Long> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return CoreComment.CORE_COMMENT.CORE_COMMENT_ID;
    }

    @Override
    public Field<Long> field2() {
        return CoreComment.CORE_COMMENT.CORE_CASE_ID;
    }

    @Override
    public Field<String> field3() {
        return CoreComment.CORE_COMMENT.CREATE_USER;
    }

    @Override
    public Field<String> field4() {
        return CoreComment.CORE_COMMENT.COMMENT_DESC;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return CoreComment.CORE_COMMENT.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return CoreComment.CORE_COMMENT.MODIFY_DTTM;
    }

    @Override
    public Field<String> field7() {
        return CoreComment.CORE_COMMENT.ACTION_IND;
    }

    @Override
    public Field<Long> field8() {
        return CoreComment.CORE_COMMENT.SUPPLIER_CATEGORY_ID;
    }

    @Override
    public Field<Long> field9() {
        return CoreComment.CORE_COMMENT.COMMENT_TYPE_ID;
    }

    @Override
    public Long component1() {
        return getCoreCommentId();
    }

    @Override
    public Long component2() {
        return getCoreCaseId();
    }

    @Override
    public String component3() {
        return getCreateUser();
    }

    @Override
    public String component4() {
        return getCommentDesc();
    }

    @Override
    public OffsetDateTime component5() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component6() {
        return getModifyDttm();
    }

    @Override
    public String component7() {
        return getActionInd();
    }

    @Override
    public Long component8() {
        return getSupplierCategoryId();
    }

    @Override
    public Long component9() {
        return getCommentTypeId();
    }

    @Override
    public Long value1() {
        return getCoreCommentId();
    }

    @Override
    public Long value2() {
        return getCoreCaseId();
    }

    @Override
    public String value3() {
        return getCreateUser();
    }

    @Override
    public String value4() {
        return getCommentDesc();
    }

    @Override
    public OffsetDateTime value5() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value6() {
        return getModifyDttm();
    }

    @Override
    public String value7() {
        return getActionInd();
    }

    @Override
    public Long value8() {
        return getSupplierCategoryId();
    }

    @Override
    public Long value9() {
        return getCommentTypeId();
    }

    @Override
    public CoreCommentRecord value1(Long value) {
        setCoreCommentId(value);
        return this;
    }

    @Override
    public CoreCommentRecord value2(Long value) {
        setCoreCaseId(value);
        return this;
    }

    @Override
    public CoreCommentRecord value3(String value) {
        setCreateUser(value);
        return this;
    }

    @Override
    public CoreCommentRecord value4(String value) {
        setCommentDesc(value);
        return this;
    }

    @Override
    public CoreCommentRecord value5(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public CoreCommentRecord value6(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public CoreCommentRecord value7(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public CoreCommentRecord value8(Long value) {
        setSupplierCategoryId(value);
        return this;
    }

    @Override
    public CoreCommentRecord value9(Long value) {
        setCommentTypeId(value);
        return this;
    }

    @Override
    public CoreCommentRecord values(Long value1, Long value2, String value3, String value4, OffsetDateTime value5, OffsetDateTime value6, String value7, Long value8, Long value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreCommentRecord
     */
    public CoreCommentRecord() {
        super(CoreComment.CORE_COMMENT);
    }

    /**
     * Create a detached, initialised CoreCommentRecord
     */
    public CoreCommentRecord(Long coreCommentId, Long coreCaseId, String createUser, String commentDesc, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, Long supplierCategoryId, Long commentTypeId) {
        super(CoreComment.CORE_COMMENT);

        setCoreCommentId(coreCommentId);
        setCoreCaseId(coreCaseId);
        setCreateUser(createUser);
        setCommentDesc(commentDesc);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setSupplierCategoryId(supplierCategoryId);
        setCommentTypeId(commentTypeId);
        resetChangedOnNotNull();
    }
}
