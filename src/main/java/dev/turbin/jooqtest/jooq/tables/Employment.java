/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.EmploymentRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * запись о трудовой деятельности.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employment extends TableImpl<EmploymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>passport_international.employment</code>
     */
    public static final Employment EMPLOYMENT = new Employment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmploymentRecord> getRecordType() {
        return EmploymentRecord.class;
    }

    /**
     * The column <code>passport_international.employment.employment_id</code>.
     * идентификатор.
     */
    public final TableField<EmploymentRecord, Long> EMPLOYMENT_ID = createField(DSL.name("employment_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "идентификатор.");

    /**
     * The column <code>passport_international.employment.version</code>.
     * реализация оптимистической блокировки
     */
    public final TableField<EmploymentRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "реализация оптимистической блокировки");

    /**
     * The column <code>passport_international.employment.start_dt</code>. дата
     * начала трудовой деятельности
     */
    public final TableField<EmploymentRecord, LocalDate> START_DT = createField(DSL.name("start_dt"), SQLDataType.LOCALDATE, this, "дата начала трудовой деятельности");

    /**
     * The column <code>passport_international.employment.end_dt</code>. дата
     * окончания трудовой деятельности
     */
    public final TableField<EmploymentRecord, LocalDate> END_DT = createField(DSL.name("end_dt"), SQLDataType.LOCALDATE, this, "дата окончания трудовой деятельности");

    /**
     * The column <code>passport_international.employment.work_type_id</code>.
     * тип деятельности
     */
    public final TableField<EmploymentRecord, Long> WORK_TYPE_ID = createField(DSL.name("work_type_id"), SQLDataType.BIGINT, this, "тип деятельности");

    /**
     * The column
     * <code>passport_international.employment.organization_name</code>.
     * наименование организации.
     */
    public final TableField<EmploymentRecord, String> ORGANIZATION_NAME = createField(DSL.name("organization_name"), SQLDataType.VARCHAR(256), this, "наименование организации.");

    /**
     * The column
     * <code>passport_international.employment.organization_address</code>.
     * адрес организации.
     */
    public final TableField<EmploymentRecord, String> ORGANIZATION_ADDRESS = createField(DSL.name("organization_address"), SQLDataType.CLOB, this, "адрес организации.");

    /**
     * The column <code>passport_international.employment.position_name</code>.
     * должность.
     */
    public final TableField<EmploymentRecord, String> POSITION_NAME = createField(DSL.name("position_name"), SQLDataType.VARCHAR(256), this, "должность.");

    /**
     * The column <code>passport_international.employment.src_id</code>.
     */
    public final TableField<EmploymentRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>passport_international.employment.create_dttm</code>.
     */
    public final TableField<EmploymentRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>passport_international.employment.modify_dttm</code>.
     */
    public final TableField<EmploymentRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>passport_international.employment.action_ind</code>.
     */
    public final TableField<EmploymentRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>passport_international.employment.eff_dttm</code>.
     */
    public final TableField<EmploymentRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("'1899-12-31 23:30:17+02:30:17'::timestamp with time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>passport_international.employment.exp_dttm</code>.
     */
    public final TableField<EmploymentRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("'9999-12-31 00:00:00+03'::timestamp with time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>passport_international.employment.empl_fax_cval</code>.
     * Факс
     */
    public final TableField<EmploymentRecord, String> EMPL_FAX_CVAL = createField(DSL.name("empl_fax_cval"), SQLDataType.VARCHAR(255), this, "Факс");

    /**
     * The column <code>passport_international.employment.empl_email</code>.
     * Электронная почта
     */
    public final TableField<EmploymentRecord, String> EMPL_EMAIL = createField(DSL.name("empl_email"), SQLDataType.CLOB, this, "Электронная почта");

    /**
     * The column <code>passport_international.employment.empl_phone</code>.
     * Номер телефона
     */
    public final TableField<EmploymentRecord, String> EMPL_PHONE = createField(DSL.name("empl_phone"), SQLDataType.CLOB, this, "Номер телефона");

    /**
     * The column <code>passport_international.employment.till_now</code>.
     * Работает до сих пор
     */
    public final TableField<EmploymentRecord, Boolean> TILL_NOW = createField(DSL.name("till_now"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Работает до сих пор");

    /**
     * The column <code>passport_international.employment.unemployment</code>.
     * Не работал
     */
    public final TableField<EmploymentRecord, Boolean> UNEMPLOYMENT = createField(DSL.name("unemployment"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Не работал");

    private Employment(Name alias, Table<EmploymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employment(Name alias, Table<EmploymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("запись о трудовой деятельности."), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.employment</code> table
     * reference
     */
    public Employment(String alias) {
        this(DSL.name(alias), EMPLOYMENT);
    }

    /**
     * Create an aliased <code>passport_international.employment</code> table
     * reference
     */
    public Employment(Name alias) {
        this(alias, EMPLOYMENT);
    }

    /**
     * Create a <code>passport_international.employment</code> table reference
     */
    public Employment() {
        this(DSL.name("employment"), null);
    }

    public <O extends Record> Employment(Table<O> child, ForeignKey<O, EmploymentRecord> key) {
        super(child, key, EMPLOYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EMPLOYMENT_WORK_TYPE_ID_IX);
    }

    @Override
    public Identity<EmploymentRecord, Long> getIdentity() {
        return (Identity<EmploymentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmploymentRecord> getPrimaryKey() {
        return Keys.EMPLOYMENT_PK;
    }

    @Override
    public Employment as(String alias) {
        return new Employment(DSL.name(alias), this);
    }

    @Override
    public Employment as(Name alias) {
        return new Employment(alias, this);
    }

    @Override
    public Employment as(Table<?> alias) {
        return new Employment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employment rename(String name) {
        return new Employment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employment rename(Name name) {
        return new Employment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employment rename(Table<?> name) {
        return new Employment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, Integer, LocalDate, LocalDate, Long, String, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, String, String, String, Boolean, Boolean> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Long, ? super Integer, ? super LocalDate, ? super LocalDate, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Long, ? super Integer, ? super LocalDate, ? super LocalDate, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
