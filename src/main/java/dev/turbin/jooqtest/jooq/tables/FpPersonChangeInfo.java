/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonChangeInfoRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Сведения об изменении персональных данных
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpPersonChangeInfo extends TableImpl<FpPersonChangeInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_person_change_info</code>
     */
    public static final FpPersonChangeInfo FP_PERSON_CHANGE_INFO = new FpPersonChangeInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpPersonChangeInfoRecord> getRecordType() {
        return FpPersonChangeInfoRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_person_change_info.person_info_change_id</code>.
     * Идентификатор записи
     */
    public final TableField<FpPersonChangeInfoRecord, Long> PERSON_INFO_CHANGE_ID = createField(DSL.name("person_info_change_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор записи");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.first_name</code>. Имя
     */
    public final TableField<FpPersonChangeInfoRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(256).nullable(false), this, "Имя");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.middle_name</code>.
     * Отчество
     */
    public final TableField<FpPersonChangeInfoRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(256), this, "Отчество");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.last_name</code>.
     * Фамилия
     */
    public final TableField<FpPersonChangeInfoRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(256).nullable(false), this, "Фамилия");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.gender_id</code>. Пол
     */
    public final TableField<FpPersonChangeInfoRecord, Long> GENDER_ID = createField(DSL.name("gender_id"), SQLDataType.BIGINT.nullable(false), this, "Пол");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.change_dt</code>. Дата
     * изменения
     */
    public final TableField<FpPersonChangeInfoRecord, LocalDate> CHANGE_DT = createField(DSL.name("change_dt"), SQLDataType.LOCALDATE.nullable(false), this, "Дата изменения");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.place_change_desc</code>.
     * Место изменения
     */
    public final TableField<FpPersonChangeInfoRecord, String> PLACE_CHANGE_DESC = createField(DSL.name("place_change_desc"), SQLDataType.CLOB, this, "Место изменения");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.person_id</code>.
     * Идентификатор физического лица
     */
    public final TableField<FpPersonChangeInfoRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор физического лица");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.src_id</code>.
     */
    public final TableField<FpPersonChangeInfoRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.create_dttm</code>.
     */
    public final TableField<FpPersonChangeInfoRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.modify_dttm</code>.
     */
    public final TableField<FpPersonChangeInfoRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.fp_person_change_info.action_ind</code>.
     */
    public final TableField<FpPersonChangeInfoRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    private FpPersonChangeInfo(Name alias, Table<FpPersonChangeInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpPersonChangeInfo(Name alias, Table<FpPersonChangeInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Сведения об изменении персональных данных"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_person_change_info</code> table reference
     */
    public FpPersonChangeInfo(String alias) {
        this(DSL.name(alias), FP_PERSON_CHANGE_INFO);
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_person_change_info</code> table reference
     */
    public FpPersonChangeInfo(Name alias) {
        this(alias, FP_PERSON_CHANGE_INFO);
    }

    /**
     * Create a <code>passport_international.fp_person_change_info</code> table
     * reference
     */
    public FpPersonChangeInfo() {
        this(DSL.name("fp_person_change_info"), null);
    }

    public <O extends Record> FpPersonChangeInfo(Table<O> child, ForeignKey<O, FpPersonChangeInfoRecord> key) {
        super(child, key, FP_PERSON_CHANGE_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<FpPersonChangeInfoRecord, Long> getIdentity() {
        return (Identity<FpPersonChangeInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FpPersonChangeInfoRecord> getPrimaryKey() {
        return Keys.FP_PERSON_CHANGE_INFO_PK;
    }

    @Override
    public FpPersonChangeInfo as(String alias) {
        return new FpPersonChangeInfo(DSL.name(alias), this);
    }

    @Override
    public FpPersonChangeInfo as(Name alias) {
        return new FpPersonChangeInfo(alias, this);
    }

    @Override
    public FpPersonChangeInfo as(Table<?> alias) {
        return new FpPersonChangeInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonChangeInfo rename(String name) {
        return new FpPersonChangeInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonChangeInfo rename(Name name) {
        return new FpPersonChangeInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonChangeInfo rename(Table<?> name) {
        return new FpPersonChangeInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, String, String, Long, LocalDate, String, Long, Long, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super LocalDate, ? super String, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super LocalDate, ? super String, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
