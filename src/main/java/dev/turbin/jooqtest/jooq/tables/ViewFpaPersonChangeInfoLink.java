/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewFpaPersonChangeInfoLinkRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewFpaPersonChangeInfoLink extends TableImpl<ViewFpaPersonChangeInfoLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_fpa_person_change_info_link</code>
     */
    public static final ViewFpaPersonChangeInfoLink VIEW_FPA_PERSON_CHANGE_INFO_LINK = new ViewFpaPersonChangeInfoLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewFpaPersonChangeInfoLinkRecord> getRecordType() {
        return ViewFpaPersonChangeInfoLinkRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info_link.fpa_person_change_info_link_id</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoLinkRecord, Long> FPA_PERSON_CHANGE_INFO_LINK_ID = createField(DSL.name("fpa_person_change_info_link_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info_link.fpa_person_change_info_id</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoLinkRecord, Long> FPA_PERSON_CHANGE_INFO_ID = createField(DSL.name("fpa_person_change_info_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info_link.fpa_case_issue_id</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoLinkRecord, Long> FPA_CASE_ISSUE_ID = createField(DSL.name("fpa_case_issue_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info_link.delete_bool</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoLinkRecord, Boolean> DELETE_BOOL = createField(DSL.name("delete_bool"), SQLDataType.BOOLEAN, this, "");

    private ViewFpaPersonChangeInfoLink(Name alias, Table<ViewFpaPersonChangeInfoLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewFpaPersonChangeInfoLink(Name alias, Table<ViewFpaPersonChangeInfoLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_fpa_person_change_info_link" as  SELECT fp_person_change_info_link.person_info_change_link_id AS fpa_person_change_info_link_id,
         fp_person_change_info_link.person_info_change_id AS fpa_person_change_info_id,
         fp_person_change_info_link.fp_case_issuance_id AS fpa_case_issue_id,
         fp_person_change_info_link.deleted AS delete_bool
        FROM fp_person_change_info_link;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_person_change_info_link</code>
     * table reference
     */
    public ViewFpaPersonChangeInfoLink(String alias) {
        this(DSL.name(alias), VIEW_FPA_PERSON_CHANGE_INFO_LINK);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_person_change_info_link</code>
     * table reference
     */
    public ViewFpaPersonChangeInfoLink(Name alias) {
        this(alias, VIEW_FPA_PERSON_CHANGE_INFO_LINK);
    }

    /**
     * Create a
     * <code>passport_international.view_fpa_person_change_info_link</code>
     * table reference
     */
    public ViewFpaPersonChangeInfoLink() {
        this(DSL.name("view_fpa_person_change_info_link"), null);
    }

    public <O extends Record> ViewFpaPersonChangeInfoLink(Table<O> child, ForeignKey<O, ViewFpaPersonChangeInfoLinkRecord> key) {
        super(child, key, VIEW_FPA_PERSON_CHANGE_INFO_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewFpaPersonChangeInfoLink as(String alias) {
        return new ViewFpaPersonChangeInfoLink(DSL.name(alias), this);
    }

    @Override
    public ViewFpaPersonChangeInfoLink as(Name alias) {
        return new ViewFpaPersonChangeInfoLink(alias, this);
    }

    @Override
    public ViewFpaPersonChangeInfoLink as(Table<?> alias) {
        return new ViewFpaPersonChangeInfoLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonChangeInfoLink rename(String name) {
        return new ViewFpaPersonChangeInfoLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonChangeInfoLink rename(Name name) {
        return new ViewFpaPersonChangeInfoLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonChangeInfoLink rename(Table<?> name) {
        return new ViewFpaPersonChangeInfoLink(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
