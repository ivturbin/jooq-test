/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.ExportHistorySrc;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * История выгрузок информации по делам во внешние системы (Смигрировано с ППОТ)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExportHistorySrcRecord extends UpdatableRecordImpl<ExportHistorySrcRecord> implements Record15<Long, Long, String, String, Long, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String, OffsetDateTime, OffsetDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.export_history_src.export_history_src_id</code>.
     * Идентификатор
     */
    public void setExportHistorySrcId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.export_history_src_id</code>.
     * Идентификатор
     */
    public Long getExportHistorySrcId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.case_id</code>.
     * Идентификатор дела
     */
    public void setCaseId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.case_id</code>.
     * Идентификатор дела
     */
    public Long getCaseId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.invalid_ind</code>.
     * Данные корректны, если 0
     */
    public void setInvalidInd(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.invalid_ind</code>.
     * Данные корректны, если 0
     */
    public String getInvalidInd() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.type_cval</code>. Тип
     * экспортируемых данных
     */
    public void setTypeCval(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.type_cval</code>. Тип
     * экспортируемых данных
     */
    public String getTypeCval() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.department_id</code>.
     * Подразделение, в котором создан объект
     */
    public void setDepartmentId(Long value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.department_id</code>.
     * Подразделение, в котором создан объект
     */
    public Long getDepartmentId() {
        return (Long) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.status_cval</code>.
     * Статус обработки данных
     */
    public void setStatusCval(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.status_cval</code>.
     * Статус обработки данных
     */
    public String getStatusCval() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.create_user</code>.
     * Пользователь, создавший исходный объект
     */
    public void setCreateUser(String value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.create_user</code>.
     * Пользователь, создавший исходный объект
     */
    public String getCreateUser() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.event_dt</code>. Дата
     * события
     */
    public void setEventDt(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.event_dt</code>. Дата
     * события
     */
    public OffsetDateTime getEventDt() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.finish_dt</code>. Дата
     * завершения экспорта
     */
    public void setFinishDt(OffsetDateTime value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.finish_dt</code>. Дата
     * завершения экспорта
     */
    public OffsetDateTime getFinishDt() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.invalid_dt</code>. Дата
     * инвалидации записи
     */
    public void setInvalidDt(OffsetDateTime value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.invalid_dt</code>. Дата
     * инвалидации записи
     */
    public OffsetDateTime getInvalidDt() {
        return (OffsetDateTime) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.invalid_user</code>.
     * Пользователь, инвалидировавший запись
     */
    public void setInvalidUser(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.invalid_user</code>.
     * Пользователь, инвалидировавший запись
     */
    public String getInvalidUser() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.comment_cval</code>.
     * Комментарий к экспортированным данным
     */
    public void setCommentCval(String value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.comment_cval</code>.
     * Комментарий к экспортированным данным
     */
    public String getCommentCval() {
        return (String) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.create_dttm</code>. Дата
     * создания записи
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.create_dttm</code>. Дата
     * создания записи
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.modify_dttm</code>. Дата
     * последней инициализации события на выгрузку данных
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.modify_dttm</code>. Дата
     * последней инициализации события на выгрузку данных
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(13);
    }

    /**
     * Setter for
     * <code>passport_international.export_history_src.action_ind</code>.
     * Индикатор действия
     */
    public void setActionInd(String value) {
        set(14, value);
    }

    /**
     * Getter for
     * <code>passport_international.export_history_src.action_ind</code>.
     * Индикатор действия
     */
    public String getActionInd() {
        return (String) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, String, String, Long, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    @Override
    public Row15<Long, Long, String, String, Long, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String, OffsetDateTime, OffsetDateTime, String> valuesRow() {
        return (Row15) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.EXPORT_HISTORY_SRC_ID;
    }

    @Override
    public Field<Long> field2() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.CASE_ID;
    }

    @Override
    public Field<String> field3() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.INVALID_IND;
    }

    @Override
    public Field<String> field4() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.TYPE_CVAL;
    }

    @Override
    public Field<Long> field5() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.DEPARTMENT_ID;
    }

    @Override
    public Field<String> field6() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.STATUS_CVAL;
    }

    @Override
    public Field<String> field7() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.CREATE_USER;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.EVENT_DT;
    }

    @Override
    public Field<OffsetDateTime> field9() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.FINISH_DT;
    }

    @Override
    public Field<OffsetDateTime> field10() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.INVALID_DT;
    }

    @Override
    public Field<String> field11() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.INVALID_USER;
    }

    @Override
    public Field<String> field12() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.COMMENT_CVAL;
    }

    @Override
    public Field<OffsetDateTime> field13() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field14() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.MODIFY_DTTM;
    }

    @Override
    public Field<String> field15() {
        return ExportHistorySrc.EXPORT_HISTORY_SRC.ACTION_IND;
    }

    @Override
    public Long component1() {
        return getExportHistorySrcId();
    }

    @Override
    public Long component2() {
        return getCaseId();
    }

    @Override
    public String component3() {
        return getInvalidInd();
    }

    @Override
    public String component4() {
        return getTypeCval();
    }

    @Override
    public Long component5() {
        return getDepartmentId();
    }

    @Override
    public String component6() {
        return getStatusCval();
    }

    @Override
    public String component7() {
        return getCreateUser();
    }

    @Override
    public OffsetDateTime component8() {
        return getEventDt();
    }

    @Override
    public OffsetDateTime component9() {
        return getFinishDt();
    }

    @Override
    public OffsetDateTime component10() {
        return getInvalidDt();
    }

    @Override
    public String component11() {
        return getInvalidUser();
    }

    @Override
    public String component12() {
        return getCommentCval();
    }

    @Override
    public OffsetDateTime component13() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component14() {
        return getModifyDttm();
    }

    @Override
    public String component15() {
        return getActionInd();
    }

    @Override
    public Long value1() {
        return getExportHistorySrcId();
    }

    @Override
    public Long value2() {
        return getCaseId();
    }

    @Override
    public String value3() {
        return getInvalidInd();
    }

    @Override
    public String value4() {
        return getTypeCval();
    }

    @Override
    public Long value5() {
        return getDepartmentId();
    }

    @Override
    public String value6() {
        return getStatusCval();
    }

    @Override
    public String value7() {
        return getCreateUser();
    }

    @Override
    public OffsetDateTime value8() {
        return getEventDt();
    }

    @Override
    public OffsetDateTime value9() {
        return getFinishDt();
    }

    @Override
    public OffsetDateTime value10() {
        return getInvalidDt();
    }

    @Override
    public String value11() {
        return getInvalidUser();
    }

    @Override
    public String value12() {
        return getCommentCval();
    }

    @Override
    public OffsetDateTime value13() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value14() {
        return getModifyDttm();
    }

    @Override
    public String value15() {
        return getActionInd();
    }

    @Override
    public ExportHistorySrcRecord value1(Long value) {
        setExportHistorySrcId(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value2(Long value) {
        setCaseId(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value3(String value) {
        setInvalidInd(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value4(String value) {
        setTypeCval(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value5(Long value) {
        setDepartmentId(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value6(String value) {
        setStatusCval(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value7(String value) {
        setCreateUser(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value8(OffsetDateTime value) {
        setEventDt(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value9(OffsetDateTime value) {
        setFinishDt(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value10(OffsetDateTime value) {
        setInvalidDt(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value11(String value) {
        setInvalidUser(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value12(String value) {
        setCommentCval(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value13(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value14(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord value15(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public ExportHistorySrcRecord values(Long value1, Long value2, String value3, String value4, Long value5, String value6, String value7, OffsetDateTime value8, OffsetDateTime value9, OffsetDateTime value10, String value11, String value12, OffsetDateTime value13, OffsetDateTime value14, String value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExportHistorySrcRecord
     */
    public ExportHistorySrcRecord() {
        super(ExportHistorySrc.EXPORT_HISTORY_SRC);
    }

    /**
     * Create a detached, initialised ExportHistorySrcRecord
     */
    public ExportHistorySrcRecord(Long exportHistorySrcId, Long caseId, String invalidInd, String typeCval, Long departmentId, String statusCval, String createUser, OffsetDateTime eventDt, OffsetDateTime finishDt, OffsetDateTime invalidDt, String invalidUser, String commentCval, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd) {
        super(ExportHistorySrc.EXPORT_HISTORY_SRC);

        setExportHistorySrcId(exportHistorySrcId);
        setCaseId(caseId);
        setInvalidInd(invalidInd);
        setTypeCval(typeCval);
        setDepartmentId(departmentId);
        setStatusCval(statusCval);
        setCreateUser(createUser);
        setEventDt(eventDt);
        setFinishDt(finishDt);
        setInvalidDt(invalidDt);
        setInvalidUser(invalidUser);
        setCommentCval(commentCval);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        resetChangedOnNotNull();
    }
}
