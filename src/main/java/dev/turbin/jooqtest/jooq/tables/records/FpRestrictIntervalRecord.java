/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.FpRestrictInterval;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Даты и страны ограниченные на выезд
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpRestrictIntervalRecord extends UpdatableRecordImpl<FpRestrictIntervalRecord> implements Record13<Long, Long, LocalDate, LocalDate, Boolean, String, Long, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.fp_restrict_interval_id</code>.
     * Идентификатор
     */
    public void setFpRestrictIntervalId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.fp_restrict_interval_id</code>.
     * Идентификатор
     */
    public Long getFpRestrictIntervalId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.fp_base_restrict_id</code>.
     * Идентификатор ограничения
     */
    public void setFpBaseRestrictId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.fp_base_restrict_id</code>.
     * Идентификатор ограничения
     */
    public Long getFpBaseRestrictId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.start_dt</code>. Дата
     * начала действия ограничений на выезд
     */
    public void setStartDt(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.start_dt</code>. Дата
     * начала действия ограничений на выезд
     */
    public LocalDate getStartDt() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.end_dt</code>. Дата
     * окончания действия ограничений на выезд
     */
    public void setEndDt(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.end_dt</code>. Дата
     * окончания действия ограничений на выезд
     */
    public LocalDate getEndDt() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.before_adulthood</code>.
     * Действие ограничения до совершеннолетия
     */
    public void setBeforeAdulthood(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.before_adulthood</code>.
     * Действие ограничения до совершеннолетия
     */
    public Boolean getBeforeAdulthood() {
        return (Boolean) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.countries</code>.
     * Страны на которые распространяется ограничение
     */
    public void setCountries(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.countries</code>.
     * Страны на которые распространяется ограничение
     */
    public String getCountries() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.status_id</code>.
     * Статус ограничения
     */
    public void setStatusId(Long value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.status_id</code>.
     * Статус ограничения
     */
    public Long getStatusId() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.action_ind</code>.
     */
    public void setActionInd(String value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.action_ind</code>.
     */
    public String getActionInd() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.create_dttm</code>.
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.create_dttm</code>.
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.modify_dttm</code>.
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.modify_dttm</code>.
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.eff_dttm</code>.
     */
    public void setEffDttm(OffsetDateTime value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.eff_dttm</code>.
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.exp_dttm</code>.
     */
    public void setExpDttm(OffsetDateTime value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.exp_dttm</code>.
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval.correlation_id</code>.
     * Идентификатор сообщения о созданном сигнале
     */
    public void setCorrelationId(UUID value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval.correlation_id</code>.
     * Идентификатор сообщения о созданном сигнале
     */
    public UUID getCorrelationId() {
        return (UUID) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, LocalDate, LocalDate, Boolean, String, Long, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, UUID> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Long, Long, LocalDate, LocalDate, Boolean, String, Long, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, UUID> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.FP_RESTRICT_INTERVAL_ID;
    }

    @Override
    public Field<Long> field2() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.FP_BASE_RESTRICT_ID;
    }

    @Override
    public Field<LocalDate> field3() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.START_DT;
    }

    @Override
    public Field<LocalDate> field4() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.END_DT;
    }

    @Override
    public Field<Boolean> field5() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.BEFORE_ADULTHOOD;
    }

    @Override
    public Field<String> field6() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.COUNTRIES;
    }

    @Override
    public Field<Long> field7() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.STATUS_ID;
    }

    @Override
    public Field<String> field8() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.ACTION_IND;
    }

    @Override
    public Field<OffsetDateTime> field9() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field10() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.MODIFY_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field11() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.EFF_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field12() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.EXP_DTTM;
    }

    @Override
    public Field<UUID> field13() {
        return FpRestrictInterval.FP_RESTRICT_INTERVAL.CORRELATION_ID;
    }

    @Override
    public Long component1() {
        return getFpRestrictIntervalId();
    }

    @Override
    public Long component2() {
        return getFpBaseRestrictId();
    }

    @Override
    public LocalDate component3() {
        return getStartDt();
    }

    @Override
    public LocalDate component4() {
        return getEndDt();
    }

    @Override
    public Boolean component5() {
        return getBeforeAdulthood();
    }

    @Override
    public String component6() {
        return getCountries();
    }

    @Override
    public Long component7() {
        return getStatusId();
    }

    @Override
    public String component8() {
        return getActionInd();
    }

    @Override
    public OffsetDateTime component9() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component10() {
        return getModifyDttm();
    }

    @Override
    public OffsetDateTime component11() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime component12() {
        return getExpDttm();
    }

    @Override
    public UUID component13() {
        return getCorrelationId();
    }

    @Override
    public Long value1() {
        return getFpRestrictIntervalId();
    }

    @Override
    public Long value2() {
        return getFpBaseRestrictId();
    }

    @Override
    public LocalDate value3() {
        return getStartDt();
    }

    @Override
    public LocalDate value4() {
        return getEndDt();
    }

    @Override
    public Boolean value5() {
        return getBeforeAdulthood();
    }

    @Override
    public String value6() {
        return getCountries();
    }

    @Override
    public Long value7() {
        return getStatusId();
    }

    @Override
    public String value8() {
        return getActionInd();
    }

    @Override
    public OffsetDateTime value9() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value10() {
        return getModifyDttm();
    }

    @Override
    public OffsetDateTime value11() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime value12() {
        return getExpDttm();
    }

    @Override
    public UUID value13() {
        return getCorrelationId();
    }

    @Override
    public FpRestrictIntervalRecord value1(Long value) {
        setFpRestrictIntervalId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value2(Long value) {
        setFpBaseRestrictId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value3(LocalDate value) {
        setStartDt(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value4(LocalDate value) {
        setEndDt(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value5(Boolean value) {
        setBeforeAdulthood(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value6(String value) {
        setCountries(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value7(Long value) {
        setStatusId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value8(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value9(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value10(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value11(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value12(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord value13(UUID value) {
        setCorrelationId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalRecord values(Long value1, Long value2, LocalDate value3, LocalDate value4, Boolean value5, String value6, Long value7, String value8, OffsetDateTime value9, OffsetDateTime value10, OffsetDateTime value11, OffsetDateTime value12, UUID value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FpRestrictIntervalRecord
     */
    public FpRestrictIntervalRecord() {
        super(FpRestrictInterval.FP_RESTRICT_INTERVAL);
    }

    /**
     * Create a detached, initialised FpRestrictIntervalRecord
     */
    public FpRestrictIntervalRecord(Long fpRestrictIntervalId, Long fpBaseRestrictId, LocalDate startDt, LocalDate endDt, Boolean beforeAdulthood, String countries, Long statusId, String actionInd, OffsetDateTime createDttm, OffsetDateTime modifyDttm, OffsetDateTime effDttm, OffsetDateTime expDttm, UUID correlationId) {
        super(FpRestrictInterval.FP_RESTRICT_INTERVAL);

        setFpRestrictIntervalId(fpRestrictIntervalId);
        setFpBaseRestrictId(fpBaseRestrictId);
        setStartDt(startDt);
        setEndDt(endDt);
        setBeforeAdulthood(beforeAdulthood);
        setCountries(countries);
        setStatusId(statusId);
        setActionInd(actionInd);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setEffDttm(effDttm);
        setExpDttm(expDttm);
        setCorrelationId(correlationId);
        resetChangedOnNotNull();
    }
}
