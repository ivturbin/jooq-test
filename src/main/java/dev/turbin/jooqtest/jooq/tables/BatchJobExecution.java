/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.BatchJobExecutionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchJobExecution extends TableImpl<BatchJobExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.batch_job_execution</code>
     */
    public static final BatchJobExecution BATCH_JOB_EXECUTION = new BatchJobExecution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchJobExecutionRecord> getRecordType() {
        return BatchJobExecutionRecord.class;
    }

    /**
     * The column
     * <code>passport_international.batch_job_execution.job_execution_id</code>.
     */
    public final TableField<BatchJobExecutionRecord, Long> JOB_EXECUTION_ID = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.version</code>.
     */
    public final TableField<BatchJobExecutionRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.job_instance_id</code>.
     */
    public final TableField<BatchJobExecutionRecord, Long> JOB_INSTANCE_ID = createField(DSL.name("job_instance_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.create_time</code>.
     */
    public final TableField<BatchJobExecutionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.start_time</code>.
     */
    public final TableField<BatchJobExecutionRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.end_time</code>.
     */
    public final TableField<BatchJobExecutionRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.status</code>.
     */
    public final TableField<BatchJobExecutionRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.exit_code</code>.
     */
    public final TableField<BatchJobExecutionRecord, String> EXIT_CODE = createField(DSL.name("exit_code"), SQLDataType.VARCHAR(2500), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.exit_message</code>.
     */
    public final TableField<BatchJobExecutionRecord, String> EXIT_MESSAGE = createField(DSL.name("exit_message"), SQLDataType.VARCHAR(2500), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.last_updated</code>.
     */
    public final TableField<BatchJobExecutionRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution.job_configuration_location</code>.
     */
    public final TableField<BatchJobExecutionRecord, String> JOB_CONFIGURATION_LOCATION = createField(DSL.name("job_configuration_location"), SQLDataType.VARCHAR(2500), this, "");

    private BatchJobExecution(Name alias, Table<BatchJobExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchJobExecution(Name alias, Table<BatchJobExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.batch_job_execution</code>
     * table reference
     */
    public BatchJobExecution(String alias) {
        this(DSL.name(alias), BATCH_JOB_EXECUTION);
    }

    /**
     * Create an aliased <code>passport_international.batch_job_execution</code>
     * table reference
     */
    public BatchJobExecution(Name alias) {
        this(alias, BATCH_JOB_EXECUTION);
    }

    /**
     * Create a <code>passport_international.batch_job_execution</code> table
     * reference
     */
    public BatchJobExecution() {
        this(DSL.name("batch_job_execution"), null);
    }

    public <O extends Record> BatchJobExecution(Table<O> child, ForeignKey<O, BatchJobExecutionRecord> key) {
        super(child, key, BATCH_JOB_EXECUTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<BatchJobExecutionRecord> getPrimaryKey() {
        return Keys.BATCH_JOB_EXECUTION_PKEY;
    }

    @Override
    public List<ForeignKey<BatchJobExecutionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BATCH_JOB_EXECUTION__JOB_INST_EXEC_FK);
    }

    private transient BatchJobInstance _batchJobInstance;

    /**
     * Get the implicit join path to the
     * <code>passport_international.batch_job_instance</code> table.
     */
    public BatchJobInstance batchJobInstance() {
        if (_batchJobInstance == null)
            _batchJobInstance = new BatchJobInstance(this, Keys.BATCH_JOB_EXECUTION__JOB_INST_EXEC_FK);

        return _batchJobInstance;
    }

    @Override
    public BatchJobExecution as(String alias) {
        return new BatchJobExecution(DSL.name(alias), this);
    }

    @Override
    public BatchJobExecution as(Name alias) {
        return new BatchJobExecution(alias, this);
    }

    @Override
    public BatchJobExecution as(Table<?> alias) {
        return new BatchJobExecution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecution rename(String name) {
        return new BatchJobExecution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecution rename(Name name) {
        return new BatchJobExecution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecution rename(Table<?> name) {
        return new BatchJobExecution(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, LocalDateTime, LocalDateTime, LocalDateTime, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
