/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.BatchJobExecutionParamsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchJobExecutionParams extends TableImpl<BatchJobExecutionParamsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.batch_job_execution_params</code>
     */
    public static final BatchJobExecutionParams BATCH_JOB_EXECUTION_PARAMS = new BatchJobExecutionParams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchJobExecutionParamsRecord> getRecordType() {
        return BatchJobExecutionParamsRecord.class;
    }

    /**
     * The column
     * <code>passport_international.batch_job_execution_params.job_execution_id</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, Long> JOB_EXECUTION_ID = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_params.type_cd</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, String> TYPE_CD = createField(DSL.name("type_cd"), SQLDataType.VARCHAR(6).nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_params.key_name</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, String> KEY_NAME = createField(DSL.name("key_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_params.string_val</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, String> STRING_VAL = createField(DSL.name("string_val"), SQLDataType.VARCHAR(250), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_params.date_val</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, LocalDateTime> DATE_VAL = createField(DSL.name("date_val"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_params.long_val</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, Long> LONG_VAL = createField(DSL.name("long_val"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_params.double_val</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, Double> DOUBLE_VAL = createField(DSL.name("double_val"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_params.identifying</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, String> IDENTIFYING = createField(DSL.name("identifying"), SQLDataType.CHAR(1).nullable(false), this, "");

    private BatchJobExecutionParams(Name alias, Table<BatchJobExecutionParamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchJobExecutionParams(Name alias, Table<BatchJobExecutionParamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.batch_job_execution_params</code> table
     * reference
     */
    public BatchJobExecutionParams(String alias) {
        this(DSL.name(alias), BATCH_JOB_EXECUTION_PARAMS);
    }

    /**
     * Create an aliased
     * <code>passport_international.batch_job_execution_params</code> table
     * reference
     */
    public BatchJobExecutionParams(Name alias) {
        this(alias, BATCH_JOB_EXECUTION_PARAMS);
    }

    /**
     * Create a <code>passport_international.batch_job_execution_params</code>
     * table reference
     */
    public BatchJobExecutionParams() {
        this(DSL.name("batch_job_execution_params"), null);
    }

    public <O extends Record> BatchJobExecutionParams(Table<O> child, ForeignKey<O, BatchJobExecutionParamsRecord> key) {
        super(child, key, BATCH_JOB_EXECUTION_PARAMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<ForeignKey<BatchJobExecutionParamsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BATCH_JOB_EXECUTION_PARAMS__JOB_EXEC_PARAMS_FK);
    }

    private transient BatchJobExecution _batchJobExecution;

    /**
     * Get the implicit join path to the
     * <code>passport_international.batch_job_execution</code> table.
     */
    public BatchJobExecution batchJobExecution() {
        if (_batchJobExecution == null)
            _batchJobExecution = new BatchJobExecution(this, Keys.BATCH_JOB_EXECUTION_PARAMS__JOB_EXEC_PARAMS_FK);

        return _batchJobExecution;
    }

    @Override
    public BatchJobExecutionParams as(String alias) {
        return new BatchJobExecutionParams(DSL.name(alias), this);
    }

    @Override
    public BatchJobExecutionParams as(Name alias) {
        return new BatchJobExecutionParams(alias, this);
    }

    @Override
    public BatchJobExecutionParams as(Table<?> alias) {
        return new BatchJobExecutionParams(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecutionParams rename(String name) {
        return new BatchJobExecutionParams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecutionParams rename(Name name) {
        return new BatchJobExecutionParams(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecutionParams rename(Table<?> name) {
        return new BatchJobExecutionParams(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, LocalDateTime, Long, Double, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Long, ? super Double, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Long, ? super Double, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
