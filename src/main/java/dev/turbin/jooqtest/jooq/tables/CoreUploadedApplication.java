/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreUploadedApplicationRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Загруженные заявления
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreUploadedApplication extends TableImpl<CoreUploadedApplicationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_uploaded_application</code>
     */
    public static final CoreUploadedApplication CORE_UPLOADED_APPLICATION = new CoreUploadedApplication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreUploadedApplicationRecord> getRecordType() {
        return CoreUploadedApplicationRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_uploaded_application.core_uploaded_application_id</code>.
     * Идентификатор загруженного заявления
     */
    public final TableField<CoreUploadedApplicationRecord, Long> CORE_UPLOADED_APPLICATION_ID = createField(DSL.name("core_uploaded_application_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор загруженного заявления");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.application_no</code>.
     * Номер заявления
     */
    public final TableField<CoreUploadedApplicationRecord, String> APPLICATION_NO = createField(DSL.name("application_no"), SQLDataType.VARCHAR(128).nullable(false), this, "Номер заявления");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.case_type_id</code>.
     * Тип дела
     */
    public final TableField<CoreUploadedApplicationRecord, Long> CASE_TYPE_ID = createField(DSL.name("case_type_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Тип дела");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.reception_dt</code>.
     * Дата заявления
     */
    public final TableField<CoreUploadedApplicationRecord, LocalDate> RECEPTION_DT = createField(DSL.name("reception_dt"), SQLDataType.LOCALDATE.nullable(false), this, "Дата заявления");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.last_name</code>.
     * Фамилия заявителя
     */
    public final TableField<CoreUploadedApplicationRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(256).nullable(false), this, "Фамилия заявителя");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.first_name</code>.
     * Имя заявителя
     */
    public final TableField<CoreUploadedApplicationRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(256).nullable(false), this, "Имя заявителя");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.middle_name</code>.
     * Отчество заявителя
     */
    public final TableField<CoreUploadedApplicationRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(256), this, "Отчество заявителя");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.series_code</code>.
     * Серия ДУЛ заявителя
     */
    public final TableField<CoreUploadedApplicationRecord, String> SERIES_CODE = createField(DSL.name("series_code"), SQLDataType.VARCHAR(128), this, "Серия ДУЛ заявителя");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.doc_no</code>.
     * Номер ДУЛ заявителя
     */
    public final TableField<CoreUploadedApplicationRecord, String> DOC_NO = createField(DSL.name("doc_no"), SQLDataType.VARCHAR(128).nullable(false), this, "Номер ДУЛ заявителя");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.supplier_category_id</code>.
     * Категория поставщика
     */
    public final TableField<CoreUploadedApplicationRecord, Long> SUPPLIER_CATEGORY_ID = createField(DSL.name("supplier_category_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Категория поставщика");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.supplier_id</code>.
     * Поставщик
     */
    public final TableField<CoreUploadedApplicationRecord, Long> SUPPLIER_ID = createField(DSL.name("supplier_id"), SQLDataType.BIGINT, this, "Поставщик");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.department_id</code>.
     * Подразделение
     */
    public final TableField<CoreUploadedApplicationRecord, Long> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Подразделение");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.application_cval</code>.
     * Данные заявления
     */
    public final TableField<CoreUploadedApplicationRecord, String> APPLICATION_CVAL = createField(DSL.name("application_cval"), SQLDataType.CLOB.nullable(false), this, "Данные заявления");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.application_status_id</code>.
     * Статус обработки заявления
     */
    public final TableField<CoreUploadedApplicationRecord, Long> APPLICATION_STATUS_ID = createField(DSL.name("application_status_id"), SQLDataType.BIGINT.nullable(false), this, "Статус обработки заявления");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.processed_user</code>.
     * Пользователь, обработавший заявление
     */
    public final TableField<CoreUploadedApplicationRecord, String> PROCESSED_USER = createField(DSL.name("processed_user"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Пользователь, обработавший заявление");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.core_case_id</code>.
     * Связь с созданным делом после обработки
     */
    public final TableField<CoreUploadedApplicationRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "Связь с созданным делом после обработки");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.create_dttm</code>.
     * Дата и время загрузки заявления
     */
    public final TableField<CoreUploadedApplicationRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата и время загрузки заявления");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.modify_dttm</code>.
     */
    public final TableField<CoreUploadedApplicationRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.action_ind</code>.
     */
    public final TableField<CoreUploadedApplicationRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.rejection_reason_desc</code>.
     * Причина отказа
     */
    public final TableField<CoreUploadedApplicationRecord, String> REJECTION_REASON_DESC = createField(DSL.name("rejection_reason_desc"), SQLDataType.CLOB, this, "Причина отказа");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.reserved_case_id</code>.
     * Зарезервированный идентификатор дела
     */
    public final TableField<CoreUploadedApplicationRecord, Long> RESERVED_CASE_ID = createField(DSL.name("reserved_case_id"), SQLDataType.BIGINT.nullable(false), this, "Зарезервированный идентификатор дела");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.precase_json</code>.
     * Данные заявления, обогащенные НСИ
     */
    public final TableField<CoreUploadedApplicationRecord, JSONB> PRECASE_JSON = createField(DSL.name("precase_json"), SQLDataType.JSONB, this, "Данные заявления, обогащенные НСИ");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.external_supplier_id</code>.
     */
    public final TableField<CoreUploadedApplicationRecord, Long> EXTERNAL_SUPPLIER_ID = createField(DSL.name("external_supplier_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.external_case_id</code>.
     */
    public final TableField<CoreUploadedApplicationRecord, Long> EXTERNAL_CASE_ID = createField(DSL.name("external_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.core_smev_request_id</code>.
     * Идентификатор запроса от smev
     */
    public final TableField<CoreUploadedApplicationRecord, Long> CORE_SMEV_REQUEST_ID = createField(DSL.name("core_smev_request_id"), SQLDataType.BIGINT, this, "Идентификатор запроса от smev");

    /**
     * The column
     * <code>passport_international.core_uploaded_application.region_id</code>.
     * Регион
     */
    public final TableField<CoreUploadedApplicationRecord, Long> REGION_ID = createField(DSL.name("region_id"), SQLDataType.BIGINT, this, "Регион");

    private CoreUploadedApplication(Name alias, Table<CoreUploadedApplicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreUploadedApplication(Name alias, Table<CoreUploadedApplicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Загруженные заявления"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.core_uploaded_application</code> table
     * reference
     */
    public CoreUploadedApplication(String alias) {
        this(DSL.name(alias), CORE_UPLOADED_APPLICATION);
    }

    /**
     * Create an aliased
     * <code>passport_international.core_uploaded_application</code> table
     * reference
     */
    public CoreUploadedApplication(Name alias) {
        this(alias, CORE_UPLOADED_APPLICATION);
    }

    /**
     * Create a <code>passport_international.core_uploaded_application</code>
     * table reference
     */
    public CoreUploadedApplication() {
        this(DSL.name("core_uploaded_application"), null);
    }

    public <O extends Record> CoreUploadedApplication(Table<O> child, ForeignKey<O, CoreUploadedApplicationRecord> key) {
        super(child, key, CORE_UPLOADED_APPLICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_UPLOADED_APPLICATION_1_IX, Indexes.CORE_UPLOADED_APPLICATION_2_IX, Indexes.CORE_UPLOADED_APPLICATION_APPLICATION_NO_UK, Indexes.CORE_UPLOADED_APPLICATION_CASE_TYPE_IX, Indexes.CORE_UPLOADED_APPLICATION_CREATE_DTTM_IX, Indexes.CORE_UPLOADED_APPLICATION_DEPARTMENT_ID_IX, Indexes.CORE_UPLOADED_APPLICATION_DOC_NO_IX, Indexes.CORE_UPLOADED_APPLICATION_RECEPTION_DT_IX, Indexes.CORE_UPLOADED_APPLICATION_SUPPLIER_CATEGORY_ID_IX, Indexes.CUA_RESERVED_CASE_ID_UK);
    }

    @Override
    public Identity<CoreUploadedApplicationRecord, Long> getIdentity() {
        return (Identity<CoreUploadedApplicationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreUploadedApplicationRecord> getPrimaryKey() {
        return Keys.CORE_UPLOADED_APPLICATION_PK;
    }

    @Override
    public List<ForeignKey<CoreUploadedApplicationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_UPLOADED_APPLICATION__CORE_UPLOADED_APPLICATION_CORE_CASE_ID_FK, Keys.CORE_UPLOADED_APPLICATION__CORE_UPLOADED_APPLICATION_CORE_SMEV_REQUEST_ID_FKEY);
    }

    private transient CoreCase _coreCase;
    private transient CoreSmevRequest _coreSmevRequest;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.CORE_UPLOADED_APPLICATION__CORE_UPLOADED_APPLICATION_CORE_CASE_ID_FK);

        return _coreCase;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_smev_request</code> table.
     */
    public CoreSmevRequest coreSmevRequest() {
        if (_coreSmevRequest == null)
            _coreSmevRequest = new CoreSmevRequest(this, Keys.CORE_UPLOADED_APPLICATION__CORE_UPLOADED_APPLICATION_CORE_SMEV_REQUEST_ID_FKEY);

        return _coreSmevRequest;
    }

    @Override
    public CoreUploadedApplication as(String alias) {
        return new CoreUploadedApplication(DSL.name(alias), this);
    }

    @Override
    public CoreUploadedApplication as(Name alias) {
        return new CoreUploadedApplication(alias, this);
    }

    @Override
    public CoreUploadedApplication as(Table<?> alias) {
        return new CoreUploadedApplication(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUploadedApplication rename(String name) {
        return new CoreUploadedApplication(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUploadedApplication rename(Name name) {
        return new CoreUploadedApplication(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreUploadedApplication rename(Table<?> name) {
        return new CoreUploadedApplication(name.getQualifiedName(), null);
    }
}
