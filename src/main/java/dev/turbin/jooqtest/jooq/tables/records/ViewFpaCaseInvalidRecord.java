/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.ViewFpaCaseInvalid;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewFpaCaseInvalidRecord extends TableRecordImpl<ViewFpaCaseInvalidRecord> implements Record14<Long, Long, Long, String, LocalDate, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, LocalDate, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.fpa_case_invalid_id</code>.
     */
    public void setFpaCaseInvalidId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.fpa_case_invalid_id</code>.
     */
    public Long getFpaCaseInvalidId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.reason_id</code>.
     */
    public void setReasonId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.reason_id</code>.
     */
    public Long getReasonId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.basis_type_id</code>.
     */
    public void setBasisTypeId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.basis_type_id</code>.
     */
    public Long getBasisTypeId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.basis_number_no</code>.
     */
    public void setBasisNumberNo(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.basis_number_no</code>.
     */
    public String getBasisNumberNo() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.basis_dt</code>.
     */
    public void setBasisDt(LocalDate value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.basis_dt</code>.
     */
    public LocalDate getBasisDt() {
        return (LocalDate) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public void setSrcId(Long value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public Long getSrcId() {
        return (Long) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public void setExpDttm(OffsetDateTime value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public void setEffDttm(OffsetDateTime value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public void setActionInd(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public String getActionInd() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.date_invalid_dt</code>.
     */
    public void setDateInvalidDt(LocalDate value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.date_invalid_dt</code>.
     */
    public LocalDate getDateInvalidDt() {
        return (LocalDate) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.sign_id</code>.
     */
    public void setSignId(Long value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.sign_id</code>.
     */
    public Long getSignId() {
        return (Long) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.view_fpa_case_invalid.comment_desc</code>.
     */
    public void setCommentDesc(String value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.view_fpa_case_invalid.comment_desc</code>.
     */
    public String getCommentDesc() {
        return (String) get(13);
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, String, LocalDate, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, LocalDate, Long, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Long, Long, Long, String, LocalDate, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, LocalDate, Long, String> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.FPA_CASE_INVALID_ID;
    }

    @Override
    public Field<Long> field2() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.REASON_ID;
    }

    @Override
    public Field<Long> field3() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.BASIS_TYPE_ID;
    }

    @Override
    public Field<String> field4() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.BASIS_NUMBER_NO;
    }

    @Override
    public Field<LocalDate> field5() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.BASIS_DT;
    }

    @Override
    public Field<Long> field6() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.SRC_ID;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.MODIFY_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field9() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.EXP_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field10() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.EFF_DTTM;
    }

    @Override
    public Field<String> field11() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.ACTION_IND;
    }

    @Override
    public Field<LocalDate> field12() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.DATE_INVALID_DT;
    }

    @Override
    public Field<Long> field13() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.SIGN_ID;
    }

    @Override
    public Field<String> field14() {
        return ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID.COMMENT_DESC;
    }

    @Override
    public Long component1() {
        return getFpaCaseInvalidId();
    }

    @Override
    public Long component2() {
        return getReasonId();
    }

    @Override
    public Long component3() {
        return getBasisTypeId();
    }

    @Override
    public String component4() {
        return getBasisNumberNo();
    }

    @Override
    public LocalDate component5() {
        return getBasisDt();
    }

    @Override
    public Long component6() {
        return getSrcId();
    }

    @Override
    public OffsetDateTime component7() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component8() {
        return getModifyDttm();
    }

    @Override
    public OffsetDateTime component9() {
        return getExpDttm();
    }

    @Override
    public OffsetDateTime component10() {
        return getEffDttm();
    }

    @Override
    public String component11() {
        return getActionInd();
    }

    @Override
    public LocalDate component12() {
        return getDateInvalidDt();
    }

    @Override
    public Long component13() {
        return getSignId();
    }

    @Override
    public String component14() {
        return getCommentDesc();
    }

    @Override
    public Long value1() {
        return getFpaCaseInvalidId();
    }

    @Override
    public Long value2() {
        return getReasonId();
    }

    @Override
    public Long value3() {
        return getBasisTypeId();
    }

    @Override
    public String value4() {
        return getBasisNumberNo();
    }

    @Override
    public LocalDate value5() {
        return getBasisDt();
    }

    @Override
    public Long value6() {
        return getSrcId();
    }

    @Override
    public OffsetDateTime value7() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value8() {
        return getModifyDttm();
    }

    @Override
    public OffsetDateTime value9() {
        return getExpDttm();
    }

    @Override
    public OffsetDateTime value10() {
        return getEffDttm();
    }

    @Override
    public String value11() {
        return getActionInd();
    }

    @Override
    public LocalDate value12() {
        return getDateInvalidDt();
    }

    @Override
    public Long value13() {
        return getSignId();
    }

    @Override
    public String value14() {
        return getCommentDesc();
    }

    @Override
    public ViewFpaCaseInvalidRecord value1(Long value) {
        setFpaCaseInvalidId(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value2(Long value) {
        setReasonId(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value3(Long value) {
        setBasisTypeId(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value4(String value) {
        setBasisNumberNo(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value5(LocalDate value) {
        setBasisDt(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value6(Long value) {
        setSrcId(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value7(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value8(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value9(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value10(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value11(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value12(LocalDate value) {
        setDateInvalidDt(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value13(Long value) {
        setSignId(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord value14(String value) {
        setCommentDesc(value);
        return this;
    }

    @Override
    public ViewFpaCaseInvalidRecord values(Long value1, Long value2, Long value3, String value4, LocalDate value5, Long value6, OffsetDateTime value7, OffsetDateTime value8, OffsetDateTime value9, OffsetDateTime value10, String value11, LocalDate value12, Long value13, String value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewFpaCaseInvalidRecord
     */
    public ViewFpaCaseInvalidRecord() {
        super(ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID);
    }

    /**
     * Create a detached, initialised ViewFpaCaseInvalidRecord
     */
    public ViewFpaCaseInvalidRecord(Long fpaCaseInvalidId, Long reasonId, Long basisTypeId, String basisNumberNo, LocalDate basisDt, Long srcId, OffsetDateTime createDttm, OffsetDateTime modifyDttm, OffsetDateTime expDttm, OffsetDateTime effDttm, String actionInd, LocalDate dateInvalidDt, Long signId, String commentDesc) {
        super(ViewFpaCaseInvalid.VIEW_FPA_CASE_INVALID);

        setFpaCaseInvalidId(fpaCaseInvalidId);
        setReasonId(reasonId);
        setBasisTypeId(basisTypeId);
        setBasisNumberNo(basisNumberNo);
        setBasisDt(basisDt);
        setSrcId(srcId);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setExpDttm(expDttm);
        setEffDttm(effDttm);
        setActionInd(actionInd);
        setDateInvalidDt(dateInvalidDt);
        setSignId(signId);
        setCommentDesc(commentDesc);
        resetChangedOnNotNull();
    }
}
