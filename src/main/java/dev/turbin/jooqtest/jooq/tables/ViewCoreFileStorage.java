/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCoreFileStorageRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCoreFileStorage extends TableImpl<ViewCoreFileStorageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_file_storage</code>
     */
    public static final ViewCoreFileStorage VIEW_CORE_FILE_STORAGE = new ViewCoreFileStorage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCoreFileStorageRecord> getRecordType() {
        return ViewCoreFileStorageRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_file_storage.core_file_storage_id</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, Long> CORE_FILE_STORAGE_ID = createField(DSL.name("core_file_storage_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.file_uid</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, UUID> FILE_UID = createField(DSL.name("file_uid"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.file_type_id</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, Long> FILE_TYPE_ID = createField(DSL.name("file_type_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.doc_no</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, String> DOC_NO = createField(DSL.name("doc_no"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.file_desc</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, String> FILE_DESC = createField(DSL.name("file_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.file_dt</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, LocalDate> FILE_DT = createField(DSL.name("file_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.core_case_id</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.create_user</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.modify_user</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, String> MODIFY_USER = createField(DSL.name("modify_user"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.create_dttm</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.modify_dttm</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.action_ind</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.core_doc_id</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, Long> CORE_DOC_ID = createField(DSL.name("core_doc_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_file_storage.migration_file_link_desc</code>.
     */
    public final TableField<ViewCoreFileStorageRecord, String> MIGRATION_FILE_LINK_DESC = createField(DSL.name("migration_file_link_desc"), SQLDataType.CLOB, this, "");

    private ViewCoreFileStorage(Name alias, Table<ViewCoreFileStorageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCoreFileStorage(Name alias, Table<ViewCoreFileStorageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_file_storage" as  SELECT core_file_storage.core_file_storage_id,
         core_file_storage.file_uid,
         core_file_storage.file_type_id,
         core_file_storage.doc_no,
         core_file_storage.file_desc,
         core_file_storage.file_dt,
         core_file_storage.core_case_id,
         core_file_storage.create_user,
         core_file_storage.modify_user,
         core_file_storage.create_dttm,
         core_file_storage.modify_dttm,
         core_file_storage.action_ind,
         core_file_storage.core_document_id AS core_doc_id,
         core_file_storage.migr_file_link_cval AS migration_file_link_desc
        FROM core_file_storage;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_core_file_storage</code> table
     * reference
     */
    public ViewCoreFileStorage(String alias) {
        this(DSL.name(alias), VIEW_CORE_FILE_STORAGE);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_core_file_storage</code> table
     * reference
     */
    public ViewCoreFileStorage(Name alias) {
        this(alias, VIEW_CORE_FILE_STORAGE);
    }

    /**
     * Create a <code>passport_international.view_core_file_storage</code> table
     * reference
     */
    public ViewCoreFileStorage() {
        this(DSL.name("view_core_file_storage"), null);
    }

    public <O extends Record> ViewCoreFileStorage(Table<O> child, ForeignKey<O, ViewCoreFileStorageRecord> key) {
        super(child, key, VIEW_CORE_FILE_STORAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCoreFileStorage as(String alias) {
        return new ViewCoreFileStorage(DSL.name(alias), this);
    }

    @Override
    public ViewCoreFileStorage as(Name alias) {
        return new ViewCoreFileStorage(alias, this);
    }

    @Override
    public ViewCoreFileStorage as(Table<?> alias) {
        return new ViewCoreFileStorage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreFileStorage rename(String name) {
        return new ViewCoreFileStorage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreFileStorage rename(Name name) {
        return new ViewCoreFileStorage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreFileStorage rename(Table<?> name) {
        return new ViewCoreFileStorage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, UUID, Long, String, String, LocalDate, Long, String, String, OffsetDateTime, OffsetDateTime, String, Long, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super UUID, ? super Long, ? super String, ? super String, ? super LocalDate, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super UUID, ? super Long, ? super String, ? super String, ? super LocalDate, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
