/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.AsrpFpaKidsInfoRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AsrpFpaKidsInfo extends TableImpl<AsrpFpaKidsInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.asrp_fpa_kids_info</code>
     */
    public static final AsrpFpaKidsInfo ASRP_FPA_KIDS_INFO = new AsrpFpaKidsInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AsrpFpaKidsInfoRecord> getRecordType() {
        return AsrpFpaKidsInfoRecord.class;
    }

    /**
     * The column
     * <code>passport_international.asrp_fpa_kids_info.migr_id</code>.
     * Уникальный идентификатор записи
     */
    public final TableField<AsrpFpaKidsInfoRecord, Long> MIGR_ID = createField(DSL.name("migr_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Уникальный идентификатор записи");

    /**
     * The column
     * <code>passport_international.asrp_fpa_kids_info.mainperf_id</code>.
     * Идентификатор ФЛ
     */
    public final TableField<AsrpFpaKidsInfoRecord, Long> MAINPERF_ID = createField(DSL.name("mainperf_id"), SQLDataType.BIGINT, this, "Идентификатор ФЛ");

    /**
     * The column <code>passport_international.asrp_fpa_kids_info.family</code>.
     * Фамилия
     */
    public final TableField<AsrpFpaKidsInfoRecord, String> FAMILY = createField(DSL.name("family"), SQLDataType.VARCHAR(255), this, "Фамилия");

    /**
     * The column <code>passport_international.asrp_fpa_kids_info.name</code>.
     * Имя
     */
    public final TableField<AsrpFpaKidsInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "Имя");

    /**
     * The column
     * <code>passport_international.asrp_fpa_kids_info.father_name</code>.
     * Отчество
     */
    public final TableField<AsrpFpaKidsInfoRecord, String> FATHER_NAME = createField(DSL.name("father_name"), SQLDataType.VARCHAR(255), this, "Отчество");

    /**
     * The column <code>passport_international.asrp_fpa_kids_info.gender</code>.
     * Пол
     */
    public final TableField<AsrpFpaKidsInfoRecord, Long> GENDER = createField(DSL.name("gender"), SQLDataType.BIGINT, this, "Пол");

    /**
     * The column
     * <code>passport_international.asrp_fpa_kids_info.bi_place</code>. Место
     * рождения
     */
    public final TableField<AsrpFpaKidsInfoRecord, String> BI_PLACE = createField(DSL.name("bi_place"), SQLDataType.VARCHAR(255), this, "Место рождения");

    /**
     * The column
     * <code>passport_international.asrp_fpa_kids_info.birthday</code>. Дата
     * рождения
     */
    public final TableField<AsrpFpaKidsInfoRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE, this, "Дата рождения");

    /**
     * The column
     * <code>passport_international.asrp_fpa_kids_info.create_dttm</code>.
     */
    public final TableField<AsrpFpaKidsInfoRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.asrp_fpa_kids_info.modify_dttm</code>.
     */
    public final TableField<AsrpFpaKidsInfoRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.asrp_fpa_kids_info.action_ind</code>.
     */
    public final TableField<AsrpFpaKidsInfoRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    private AsrpFpaKidsInfo(Name alias, Table<AsrpFpaKidsInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private AsrpFpaKidsInfo(Name alias, Table<AsrpFpaKidsInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.asrp_fpa_kids_info</code>
     * table reference
     */
    public AsrpFpaKidsInfo(String alias) {
        this(DSL.name(alias), ASRP_FPA_KIDS_INFO);
    }

    /**
     * Create an aliased <code>passport_international.asrp_fpa_kids_info</code>
     * table reference
     */
    public AsrpFpaKidsInfo(Name alias) {
        this(alias, ASRP_FPA_KIDS_INFO);
    }

    /**
     * Create a <code>passport_international.asrp_fpa_kids_info</code> table
     * reference
     */
    public AsrpFpaKidsInfo() {
        this(DSL.name("asrp_fpa_kids_info"), null);
    }

    public <O extends Record> AsrpFpaKidsInfo(Table<O> child, ForeignKey<O, AsrpFpaKidsInfoRecord> key) {
        super(child, key, ASRP_FPA_KIDS_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<AsrpFpaKidsInfoRecord, Long> getIdentity() {
        return (Identity<AsrpFpaKidsInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AsrpFpaKidsInfoRecord> getPrimaryKey() {
        return Keys.ASRP_FPA_KIDS_INFO_PKEY;
    }

    @Override
    public AsrpFpaKidsInfo as(String alias) {
        return new AsrpFpaKidsInfo(DSL.name(alias), this);
    }

    @Override
    public AsrpFpaKidsInfo as(Name alias) {
        return new AsrpFpaKidsInfo(alias, this);
    }

    @Override
    public AsrpFpaKidsInfo as(Table<?> alias) {
        return new AsrpFpaKidsInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaKidsInfo rename(String name) {
        return new AsrpFpaKidsInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaKidsInfo rename(Name name) {
        return new AsrpFpaKidsInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsrpFpaKidsInfo rename(Table<?> name) {
        return new AsrpFpaKidsInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, String, String, String, Long, String, LocalDate, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
