/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonDocumentRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ДУЛ для модуля загранпаспорта
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpPersonDocument extends TableImpl<FpPersonDocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_person_document</code>
     */
    public static final FpPersonDocument FP_PERSON_DOCUMENT = new FpPersonDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpPersonDocumentRecord> getRecordType() {
        return FpPersonDocumentRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_person_document.fpa_person_document_id</code>.
     * Индефикатор ДЛУ
     */
    public final TableField<FpPersonDocumentRecord, Long> FPA_PERSON_DOCUMENT_ID = createField(DSL.name("fpa_person_document_id"), SQLDataType.BIGINT.nullable(false), this, "Индефикатор ДЛУ");

    /**
     * The column
     * <code>passport_international.fp_person_document.first_name_lat</code>.
     * Имя латиница
     */
    public final TableField<FpPersonDocumentRecord, String> FIRST_NAME_LAT = createField(DSL.name("first_name_lat"), SQLDataType.VARCHAR(256), this, "Имя латиница");

    /**
     * The column
     * <code>passport_international.fp_person_document.last_name_lat</code>.
     * Фамилия латиница
     */
    public final TableField<FpPersonDocumentRecord, String> LAST_NAME_LAT = createField(DSL.name("last_name_lat"), SQLDataType.VARCHAR(256), this, "Фамилия латиница");

    /**
     * The column
     * <code>passport_international.fp_person_document.middle_name_lat</code>.
     * Отчество латиница
     */
    public final TableField<FpPersonDocumentRecord, String> MIDDLE_NAME_LAT = createField(DSL.name("middle_name_lat"), SQLDataType.VARCHAR(256), this, "Отчество латиница");

    /**
     * The column <code>passport_international.fp_person_document.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<FpPersonDocumentRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.fp_person_document.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public final TableField<FpPersonDocumentRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.fp_person_document.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<FpPersonDocumentRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.fp_person_document.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<FpPersonDocumentRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.fp_person_document.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<FpPersonDocumentRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.fp_person_document.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<FpPersonDocumentRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    private FpPersonDocument(Name alias, Table<FpPersonDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpPersonDocument(Name alias, Table<FpPersonDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ДУЛ для модуля загранпаспорта"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.fp_person_document</code>
     * table reference
     */
    public FpPersonDocument(String alias) {
        this(DSL.name(alias), FP_PERSON_DOCUMENT);
    }

    /**
     * Create an aliased <code>passport_international.fp_person_document</code>
     * table reference
     */
    public FpPersonDocument(Name alias) {
        this(alias, FP_PERSON_DOCUMENT);
    }

    /**
     * Create a <code>passport_international.fp_person_document</code> table
     * reference
     */
    public FpPersonDocument() {
        this(DSL.name("fp_person_document"), null);
    }

    public <O extends Record> FpPersonDocument(Table<O> child, ForeignKey<O, FpPersonDocumentRecord> key) {
        super(child, key, FP_PERSON_DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<FpPersonDocumentRecord> getPrimaryKey() {
        return Keys.FP_PERSON_DOCUMENT_PK;
    }

    @Override
    public List<ForeignKey<FpPersonDocumentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_PERSON_DOCUMENT__FP_PERSON_DOCUMENT_CORE_PERSON_DOCUMENT);
    }

    private transient CorePersonDocument _corePersonDocument;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_person_document</code> table.
     */
    public CorePersonDocument corePersonDocument() {
        if (_corePersonDocument == null)
            _corePersonDocument = new CorePersonDocument(this, Keys.FP_PERSON_DOCUMENT__FP_PERSON_DOCUMENT_CORE_PERSON_DOCUMENT);

        return _corePersonDocument;
    }

    @Override
    public FpPersonDocument as(String alias) {
        return new FpPersonDocument(DSL.name(alias), this);
    }

    @Override
    public FpPersonDocument as(Name alias) {
        return new FpPersonDocument(alias, this);
    }

    @Override
    public FpPersonDocument as(Table<?> alias) {
        return new FpPersonDocument(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonDocument rename(String name) {
        return new FpPersonDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonDocument rename(Name name) {
        return new FpPersonDocument(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonDocument rename(Table<?> name) {
        return new FpPersonDocument(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
