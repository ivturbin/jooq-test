/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewPaymentRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function18;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewPayment extends TableImpl<ViewPaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_payment</code>
     */
    public static final ViewPayment VIEW_PAYMENT = new ViewPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewPaymentRecord> getRecordType() {
        return ViewPaymentRecord.class;
    }

    /**
     * The column <code>passport_international.view_payment.payment_id</code>.
     */
    public final TableField<ViewPaymentRecord, Long> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>passport_international.view_payment.payment_key</code>.
     */
    public final TableField<ViewPaymentRecord, String> PAYMENT_KEY = createField(DSL.name("payment_key"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>passport_international.view_payment.core_case_id</code>.
     */
    public final TableField<ViewPaymentRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_payment.amount_rub_coin</code>.
     */
    public final TableField<ViewPaymentRecord, Long> AMOUNT_RUB_COIN = createField(DSL.name("amount_rub_coin"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>passport_international.view_payment.purpose_name</code>.
     */
    public final TableField<ViewPaymentRecord, String> PURPOSE_NAME = createField(DSL.name("purpose_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>passport_international.view_payment.payment_dttm</code>.
     */
    public final TableField<ViewPaymentRecord, OffsetDateTime> PAYMENT_DTTM = createField(DSL.name("payment_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>passport_international.view_payment.kbk_cval</code>.
     */
    public final TableField<ViewPaymentRecord, String> KBK_CVAL = createField(DSL.name("kbk_cval"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>passport_international.view_payment.oktmo_cval</code>.
     */
    public final TableField<ViewPaymentRecord, String> OKTMO_CVAL = createField(DSL.name("oktmo_cval"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column
     * <code>passport_international.view_payment.transaction_kind_cval</code>.
     */
    public final TableField<ViewPaymentRecord, String> TRANSACTION_KIND_CVAL = createField(DSL.name("transaction_kind_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.view_payment.supplier_bill_uin</code>.
     */
    public final TableField<ViewPaymentRecord, String> SUPPLIER_BILL_UIN = createField(DSL.name("supplier_bill_uin"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>passport_international.view_payment.tax_doc_no</code>.
     */
    public final TableField<ViewPaymentRecord, String> TAX_DOC_NO = createField(DSL.name("tax_doc_no"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>passport_international.view_payment.status_bool</code>.
     */
    public final TableField<ViewPaymentRecord, Boolean> STATUS_BOOL = createField(DSL.name("status_bool"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>passport_international.view_payment.tax_doc_dt</code>.
     */
    public final TableField<ViewPaymentRecord, LocalDate> TAX_DOC_DT = createField(DSL.name("tax_doc_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>passport_international.view_payment.create_dttm</code>.
     */
    public final TableField<ViewPaymentRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>passport_international.view_payment.modify_dttm</code>.
     */
    public final TableField<ViewPaymentRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>passport_international.view_payment.action_ind</code>.
     */
    public final TableField<ViewPaymentRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>passport_international.view_payment.version</code>.
     */
    public final TableField<ViewPaymentRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>passport_international.view_payment.bill_status_ind</code>.
     */
    public final TableField<ViewPaymentRecord, String> BILL_STATUS_IND = createField(DSL.name("bill_status_ind"), SQLDataType.VARCHAR(1), this, "");

    private ViewPayment(Name alias, Table<ViewPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewPayment(Name alias, Table<ViewPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_payment" as  SELECT payment.payment_id,
         payment.payment_key,
         payment.core_case_id,
         payment.amount_rub_coin,
         payment.purpose_name,
         payment.payment_dttm,
         payment.kbk AS kbk_cval,
         payment.oktmo AS oktmo_cval,
         payment.transaction_kind_cval,
         payment.supplier_bill_uin,
         payment.tax_document_no AS tax_doc_no,
         payment.status_bool,
         payment.tax_document_dt AS tax_doc_dt,
         payment.create_dttm,
         payment.modify_dttm,
         payment.action_ind,
         payment.version,
         payment.bill_status_ind
        FROM payment;
        """));
    }

    /**
     * Create an aliased <code>passport_international.view_payment</code> table
     * reference
     */
    public ViewPayment(String alias) {
        this(DSL.name(alias), VIEW_PAYMENT);
    }

    /**
     * Create an aliased <code>passport_international.view_payment</code> table
     * reference
     */
    public ViewPayment(Name alias) {
        this(alias, VIEW_PAYMENT);
    }

    /**
     * Create a <code>passport_international.view_payment</code> table reference
     */
    public ViewPayment() {
        this(DSL.name("view_payment"), null);
    }

    public <O extends Record> ViewPayment(Table<O> child, ForeignKey<O, ViewPaymentRecord> key) {
        super(child, key, VIEW_PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewPayment as(String alias) {
        return new ViewPayment(DSL.name(alias), this);
    }

    @Override
    public ViewPayment as(Name alias) {
        return new ViewPayment(alias, this);
    }

    @Override
    public ViewPayment as(Table<?> alias) {
        return new ViewPayment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewPayment rename(String name) {
        return new ViewPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewPayment rename(Name name) {
        return new ViewPayment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewPayment rename(Table<?> name) {
        return new ViewPayment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, String, Long, Long, String, OffsetDateTime, String, String, String, String, String, Boolean, LocalDate, OffsetDateTime, OffsetDateTime, String, Integer, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function18<? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
