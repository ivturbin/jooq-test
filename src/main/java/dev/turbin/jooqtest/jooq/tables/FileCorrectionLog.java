/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FileCorrectionLogRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица ссылок на ФХ для документов-оснований коррекции
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileCorrectionLog extends TableImpl<FileCorrectionLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.file_correction_log</code>
     */
    public static final FileCorrectionLog FILE_CORRECTION_LOG = new FileCorrectionLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileCorrectionLogRecord> getRecordType() {
        return FileCorrectionLogRecord.class;
    }

    /**
     * The column
     * <code>passport_international.file_correction_log.file_correction_log_id</code>.
     * Идентификатор файла причины изменения
     */
    public final TableField<FileCorrectionLogRecord, Long> FILE_CORRECTION_LOG_ID = createField(DSL.name("file_correction_log_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор файла причины изменения");

    /**
     * The column
     * <code>passport_international.file_correction_log.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public final TableField<FileCorrectionLogRecord, Long> CORRECTION_LOG_ID = createField(DSL.name("correction_log_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор лога коррекции дела");

    /**
     * The column
     * <code>passport_international.file_correction_log.document_id</code>.
     * Ссылка на ФХ для прикрепляемых документов
     */
    public final TableField<FileCorrectionLogRecord, Long> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.BIGINT.nullable(false), this, "Ссылка на ФХ для прикрепляемых документов");

    /**
     * The column
     * <code>passport_international.file_correction_log.create_dttm</code>. Дата
     * время вставки записи
     */
    public final TableField<FileCorrectionLogRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи");

    /**
     * The column
     * <code>passport_international.file_correction_log.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<FileCorrectionLogRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.file_correction_log.action_ind</code>.
     * Индикатор действия
     */
    public final TableField<FileCorrectionLogRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор действия");

    private FileCorrectionLog(Name alias, Table<FileCorrectionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileCorrectionLog(Name alias, Table<FileCorrectionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица ссылок на ФХ для документов-оснований коррекции"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.file_correction_log</code>
     * table reference
     */
    public FileCorrectionLog(String alias) {
        this(DSL.name(alias), FILE_CORRECTION_LOG);
    }

    /**
     * Create an aliased <code>passport_international.file_correction_log</code>
     * table reference
     */
    public FileCorrectionLog(Name alias) {
        this(alias, FILE_CORRECTION_LOG);
    }

    /**
     * Create a <code>passport_international.file_correction_log</code> table
     * reference
     */
    public FileCorrectionLog() {
        this(DSL.name("file_correction_log"), null);
    }

    public <O extends Record> FileCorrectionLog(Table<O> child, ForeignKey<O, FileCorrectionLogRecord> key) {
        super(child, key, FILE_CORRECTION_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILE_CORRECTION_LOG_CORRECTION_LOG_IX);
    }

    @Override
    public Identity<FileCorrectionLogRecord, Long> getIdentity() {
        return (Identity<FileCorrectionLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FileCorrectionLogRecord> getPrimaryKey() {
        return Keys.FILE_CORRECTION_LOG_PK;
    }

    @Override
    public List<ForeignKey<FileCorrectionLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FILE_CORRECTION_LOG__FILE_CORRECTION_LOG_CORRECTION_LOG_FK);
    }

    private transient CorrectionLog _correctionLog;

    /**
     * Get the implicit join path to the
     * <code>passport_international.correction_log</code> table.
     */
    public CorrectionLog correctionLog() {
        if (_correctionLog == null)
            _correctionLog = new CorrectionLog(this, Keys.FILE_CORRECTION_LOG__FILE_CORRECTION_LOG_CORRECTION_LOG_FK);

        return _correctionLog;
    }

    @Override
    public FileCorrectionLog as(String alias) {
        return new FileCorrectionLog(DSL.name(alias), this);
    }

    @Override
    public FileCorrectionLog as(Name alias) {
        return new FileCorrectionLog(alias, this);
    }

    @Override
    public FileCorrectionLog as(Table<?> alias) {
        return new FileCorrectionLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileCorrectionLog rename(String name) {
        return new FileCorrectionLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileCorrectionLog rename(Name name) {
        return new FileCorrectionLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileCorrectionLog rename(Table<?> name) {
        return new FileCorrectionLog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
