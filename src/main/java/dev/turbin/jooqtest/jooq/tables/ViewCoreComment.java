/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCoreCommentRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCoreComment extends TableImpl<ViewCoreCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_comment</code>
     */
    public static final ViewCoreComment VIEW_CORE_COMMENT = new ViewCoreComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCoreCommentRecord> getRecordType() {
        return ViewCoreCommentRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_comment.core_comment_id</code>.
     */
    public final TableField<ViewCoreCommentRecord, Long> CORE_COMMENT_ID = createField(DSL.name("core_comment_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_comment.core_case_id</code>.
     */
    public final TableField<ViewCoreCommentRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_comment.create_user</code>.
     */
    public final TableField<ViewCoreCommentRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>passport_international.view_core_comment.comment_desc</code>.
     */
    public final TableField<ViewCoreCommentRecord, String> COMMENT_DESC = createField(DSL.name("comment_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.view_core_comment.create_dttm</code>.
     */
    public final TableField<ViewCoreCommentRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_comment.modify_dttm</code>.
     */
    public final TableField<ViewCoreCommentRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_comment.action_ind</code>.
     */
    public final TableField<ViewCoreCommentRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    private ViewCoreComment(Name alias, Table<ViewCoreCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCoreComment(Name alias, Table<ViewCoreCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_comment" as  SELECT core_comment.core_comment_id,
         core_comment.core_case_id,
         core_comment.create_user,
         core_comment.comment_desc,
         core_comment.create_dttm,
         core_comment.modify_dttm,
         core_comment.action_ind
        FROM core_comment;
        """));
    }

    /**
     * Create an aliased <code>passport_international.view_core_comment</code>
     * table reference
     */
    public ViewCoreComment(String alias) {
        this(DSL.name(alias), VIEW_CORE_COMMENT);
    }

    /**
     * Create an aliased <code>passport_international.view_core_comment</code>
     * table reference
     */
    public ViewCoreComment(Name alias) {
        this(alias, VIEW_CORE_COMMENT);
    }

    /**
     * Create a <code>passport_international.view_core_comment</code> table
     * reference
     */
    public ViewCoreComment() {
        this(DSL.name("view_core_comment"), null);
    }

    public <O extends Record> ViewCoreComment(Table<O> child, ForeignKey<O, ViewCoreCommentRecord> key) {
        super(child, key, VIEW_CORE_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCoreComment as(String alias) {
        return new ViewCoreComment(DSL.name(alias), this);
    }

    @Override
    public ViewCoreComment as(Name alias) {
        return new ViewCoreComment(alias, this);
    }

    @Override
    public ViewCoreComment as(Table<?> alias) {
        return new ViewCoreComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreComment rename(String name) {
        return new ViewCoreComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreComment rename(Name name) {
        return new ViewCoreComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreComment rename(Table<?> name) {
        return new ViewCoreComment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, String, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
