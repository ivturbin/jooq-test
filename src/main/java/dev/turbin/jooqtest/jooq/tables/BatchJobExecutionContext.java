/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.BatchJobExecutionContextRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchJobExecutionContext extends TableImpl<BatchJobExecutionContextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.batch_job_execution_context</code>
     */
    public static final BatchJobExecutionContext BATCH_JOB_EXECUTION_CONTEXT = new BatchJobExecutionContext();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchJobExecutionContextRecord> getRecordType() {
        return BatchJobExecutionContextRecord.class;
    }

    /**
     * The column
     * <code>passport_international.batch_job_execution_context.job_execution_id</code>.
     */
    public final TableField<BatchJobExecutionContextRecord, Long> JOB_EXECUTION_ID = createField(DSL.name("job_execution_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_context.short_context</code>.
     */
    public final TableField<BatchJobExecutionContextRecord, String> SHORT_CONTEXT = createField(DSL.name("short_context"), SQLDataType.VARCHAR(2500).nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.batch_job_execution_context.serialized_context</code>.
     */
    public final TableField<BatchJobExecutionContextRecord, String> SERIALIZED_CONTEXT = createField(DSL.name("serialized_context"), SQLDataType.CLOB, this, "");

    private BatchJobExecutionContext(Name alias, Table<BatchJobExecutionContextRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchJobExecutionContext(Name alias, Table<BatchJobExecutionContextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.batch_job_execution_context</code> table
     * reference
     */
    public BatchJobExecutionContext(String alias) {
        this(DSL.name(alias), BATCH_JOB_EXECUTION_CONTEXT);
    }

    /**
     * Create an aliased
     * <code>passport_international.batch_job_execution_context</code> table
     * reference
     */
    public BatchJobExecutionContext(Name alias) {
        this(alias, BATCH_JOB_EXECUTION_CONTEXT);
    }

    /**
     * Create a <code>passport_international.batch_job_execution_context</code>
     * table reference
     */
    public BatchJobExecutionContext() {
        this(DSL.name("batch_job_execution_context"), null);
    }

    public <O extends Record> BatchJobExecutionContext(Table<O> child, ForeignKey<O, BatchJobExecutionContextRecord> key) {
        super(child, key, BATCH_JOB_EXECUTION_CONTEXT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<BatchJobExecutionContextRecord> getPrimaryKey() {
        return Keys.BATCH_JOB_EXECUTION_CONTEXT_PKEY;
    }

    @Override
    public List<ForeignKey<BatchJobExecutionContextRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BATCH_JOB_EXECUTION_CONTEXT__JOB_EXEC_CTX_FK);
    }

    private transient BatchJobExecution _batchJobExecution;

    /**
     * Get the implicit join path to the
     * <code>passport_international.batch_job_execution</code> table.
     */
    public BatchJobExecution batchJobExecution() {
        if (_batchJobExecution == null)
            _batchJobExecution = new BatchJobExecution(this, Keys.BATCH_JOB_EXECUTION_CONTEXT__JOB_EXEC_CTX_FK);

        return _batchJobExecution;
    }

    @Override
    public BatchJobExecutionContext as(String alias) {
        return new BatchJobExecutionContext(DSL.name(alias), this);
    }

    @Override
    public BatchJobExecutionContext as(Name alias) {
        return new BatchJobExecutionContext(alias, this);
    }

    @Override
    public BatchJobExecutionContext as(Table<?> alias) {
        return new BatchJobExecutionContext(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecutionContext rename(String name) {
        return new BatchJobExecutionContext(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecutionContext rename(Name name) {
        return new BatchJobExecutionContext(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobExecutionContext rename(Table<?> name) {
        return new BatchJobExecutionContext(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
