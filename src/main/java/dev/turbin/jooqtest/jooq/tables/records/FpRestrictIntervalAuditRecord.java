/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.FpRestrictIntervalAudit;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Таблица версионирования fp_restrict_interval
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpRestrictIntervalAuditRecord extends UpdatableRecordImpl<FpRestrictIntervalAuditRecord> implements Record12<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, LocalDate, LocalDate, Boolean, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.id</code>.
     * Идентификатор "fp_restrict_interval_audit" с данными коррекции
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.id</code>.
     * Идентификатор "fp_restrict_interval_audit" с данными коррекции
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.record_id</code>.
     * Внешний ключ на запись в таблице-мастере
     */
    public void setRecordId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.record_id</code>.
     * Внешний ключ на запись в таблице-мастере
     */
    public Long getRecordId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public void setCorrectionLogId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public Long getCorrectionLogId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.update_user</code>.
     * Пользователь, скорректировавший дело
     */
    public void setUpdateUser(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.update_user</code>.
     * Пользователь, скорректировавший дело
     */
    public String getUpdateUser() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.eff_dttm</code>.
     * Дата начала действия версии
     */
    public void setEffDttm(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.eff_dttm</code>.
     * Дата начала действия версии
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.exp_dttm</code>.
     * Дата окончания действия версии
     */
    public void setExpDttm(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.exp_dttm</code>.
     * Дата окончания действия версии
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.fp_base_restrict_id</code>.
     */
    public void setFpBaseRestrictId(Long value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.fp_base_restrict_id</code>.
     */
    public Long getFpBaseRestrictId() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.start_dt</code>.
     */
    public void setStartDt(LocalDate value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.start_dt</code>.
     */
    public LocalDate getStartDt() {
        return (LocalDate) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.end_dt</code>.
     */
    public void setEndDt(LocalDate value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.end_dt</code>.
     */
    public LocalDate getEndDt() {
        return (LocalDate) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.before_adulthood</code>.
     */
    public void setBeforeAdulthood(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.before_adulthood</code>.
     */
    public Boolean getBeforeAdulthood() {
        return (Boolean) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.countries</code>.
     */
    public void setCountries(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.countries</code>.
     */
    public String getCountries() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.fp_restrict_interval_audit.status_id</code>.
     */
    public void setStatusId(Long value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_restrict_interval_audit.status_id</code>.
     */
    public Long getStatusId() {
        return (Long) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, LocalDate, LocalDate, Boolean, String, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, LocalDate, LocalDate, Boolean, String, Long> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.ID;
    }

    @Override
    public Field<Long> field2() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.RECORD_ID;
    }

    @Override
    public Field<Long> field3() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.CORRECTION_LOG_ID;
    }

    @Override
    public Field<String> field4() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.UPDATE_USER;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.EFF_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.EXP_DTTM;
    }

    @Override
    public Field<Long> field7() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.FP_BASE_RESTRICT_ID;
    }

    @Override
    public Field<LocalDate> field8() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.START_DT;
    }

    @Override
    public Field<LocalDate> field9() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.END_DT;
    }

    @Override
    public Field<Boolean> field10() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.BEFORE_ADULTHOOD;
    }

    @Override
    public Field<String> field11() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.COUNTRIES;
    }

    @Override
    public Field<Long> field12() {
        return FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT.STATUS_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getRecordId();
    }

    @Override
    public Long component3() {
        return getCorrectionLogId();
    }

    @Override
    public String component4() {
        return getUpdateUser();
    }

    @Override
    public OffsetDateTime component5() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime component6() {
        return getExpDttm();
    }

    @Override
    public Long component7() {
        return getFpBaseRestrictId();
    }

    @Override
    public LocalDate component8() {
        return getStartDt();
    }

    @Override
    public LocalDate component9() {
        return getEndDt();
    }

    @Override
    public Boolean component10() {
        return getBeforeAdulthood();
    }

    @Override
    public String component11() {
        return getCountries();
    }

    @Override
    public Long component12() {
        return getStatusId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getRecordId();
    }

    @Override
    public Long value3() {
        return getCorrectionLogId();
    }

    @Override
    public String value4() {
        return getUpdateUser();
    }

    @Override
    public OffsetDateTime value5() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime value6() {
        return getExpDttm();
    }

    @Override
    public Long value7() {
        return getFpBaseRestrictId();
    }

    @Override
    public LocalDate value8() {
        return getStartDt();
    }

    @Override
    public LocalDate value9() {
        return getEndDt();
    }

    @Override
    public Boolean value10() {
        return getBeforeAdulthood();
    }

    @Override
    public String value11() {
        return getCountries();
    }

    @Override
    public Long value12() {
        return getStatusId();
    }

    @Override
    public FpRestrictIntervalAuditRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value2(Long value) {
        setRecordId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value3(Long value) {
        setCorrectionLogId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value4(String value) {
        setUpdateUser(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value5(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value6(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value7(Long value) {
        setFpBaseRestrictId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value8(LocalDate value) {
        setStartDt(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value9(LocalDate value) {
        setEndDt(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value10(Boolean value) {
        setBeforeAdulthood(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value11(String value) {
        setCountries(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord value12(Long value) {
        setStatusId(value);
        return this;
    }

    @Override
    public FpRestrictIntervalAuditRecord values(Long value1, Long value2, Long value3, String value4, OffsetDateTime value5, OffsetDateTime value6, Long value7, LocalDate value8, LocalDate value9, Boolean value10, String value11, Long value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FpRestrictIntervalAuditRecord
     */
    public FpRestrictIntervalAuditRecord() {
        super(FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT);
    }

    /**
     * Create a detached, initialised FpRestrictIntervalAuditRecord
     */
    public FpRestrictIntervalAuditRecord(Long id, Long recordId, Long correctionLogId, String updateUser, OffsetDateTime effDttm, OffsetDateTime expDttm, Long fpBaseRestrictId, LocalDate startDt, LocalDate endDt, Boolean beforeAdulthood, String countries, Long statusId) {
        super(FpRestrictIntervalAudit.FP_RESTRICT_INTERVAL_AUDIT);

        setId(id);
        setRecordId(recordId);
        setCorrectionLogId(correctionLogId);
        setUpdateUser(updateUser);
        setEffDttm(effDttm);
        setExpDttm(expDttm);
        setFpBaseRestrictId(fpBaseRestrictId);
        setStartDt(startDt);
        setEndDt(endDt);
        setBeforeAdulthood(beforeAdulthood);
        setCountries(countries);
        setStatusId(statusId);
        resetChangedOnNotNull();
    }
}
