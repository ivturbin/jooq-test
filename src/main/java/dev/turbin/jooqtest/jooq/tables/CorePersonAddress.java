/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonAddressRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Регистрация физического лица по адресу
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePersonAddress extends TableImpl<CorePersonAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_person_address</code>
     */
    public static final CorePersonAddress CORE_PERSON_ADDRESS = new CorePersonAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorePersonAddressRecord> getRecordType() {
        return CorePersonAddressRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_person_address.core_person_address_id</code>.
     * Идентификатор
     */
    public final TableField<CorePersonAddressRecord, Long> CORE_PERSON_ADDRESS_ID = createField(DSL.name("core_person_address_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор");

    /**
     * The column
     * <code>passport_international.core_person_address.invalid</code>. Данные
     * корректны, если 0
     */
    public final TableField<CorePersonAddressRecord, Boolean> INVALID = createField(DSL.name("invalid"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Данные корректны, если 0");

    /**
     * The column
     * <code>passport_international.core_person_address.person_id</code>.
     * Идентификатор физического лица
     */
    public final TableField<CorePersonAddressRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT, this, "Идентификатор физического лица");

    /**
     * The column
     * <code>passport_international.core_person_address.person_state_id</code>.
     * Состояние лица
     */
    public final TableField<CorePersonAddressRecord, Long> PERSON_STATE_ID = createField(DSL.name("person_state_id"), SQLDataType.BIGINT, this, "Состояние лица");

    /**
     * The column
     * <code>passport_international.core_person_address.address_id</code>. Адрес
     */
    public final TableField<CorePersonAddressRecord, Long> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.BIGINT, this, "Адрес");

    /**
     * The column
     * <code>passport_international.core_person_address.address_type_id</code>.
     * Тип адреса или регистрации по адресу
     */
    public final TableField<CorePersonAddressRecord, Long> ADDRESS_TYPE_ID = createField(DSL.name("address_type_id"), SQLDataType.BIGINT.nullable(false), this, "Тип адреса или регистрации по адресу");

    /**
     * The column
     * <code>passport_international.core_person_address.create_user</code>.
     * Пользователь, создавший запись
     */
    public final TableField<CorePersonAddressRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "Пользователь, создавший запись");

    /**
     * The column
     * <code>passport_international.core_person_address.from_dt</code>. Дата
     * начала регистрации
     */
    public final TableField<CorePersonAddressRecord, LocalDate> FROM_DT = createField(DSL.name("from_dt"), SQLDataType.LOCALDATE, this, "Дата начала регистрации");

    /**
     * The column <code>passport_international.core_person_address.to_dt</code>.
     * Дата окончания регистрации
     */
    public final TableField<CorePersonAddressRecord, LocalDate> TO_DT = createField(DSL.name("to_dt"), SQLDataType.LOCALDATE, this, "Дата окончания регистрации");

    /**
     * The column
     * <code>passport_international.core_person_address.invalid_dt</code>. Дата
     * инвалидации записи
     */
    public final TableField<CorePersonAddressRecord, LocalDate> INVALID_DT = createField(DSL.name("invalid_dt"), SQLDataType.LOCALDATE, this, "Дата инвалидации записи");

    /**
     * The column
     * <code>passport_international.core_person_address.user_invalid</code>.
     * Пользователь, инвалидировавший запись
     */
    public final TableField<CorePersonAddressRecord, String> USER_INVALID = createField(DSL.name("user_invalid"), SQLDataType.VARCHAR(255), this, "Пользователь, инвалидировавший запись");

    /**
     * The column
     * <code>passport_international.core_person_address.new_address_id</code>.
     * Указатель на новую корректную регистрацию
     */
    public final TableField<CorePersonAddressRecord, Long> NEW_ADDRESS_ID = createField(DSL.name("new_address_id"), SQLDataType.BIGINT, this, "Указатель на новую корректную регистрацию");

    /**
     * The column
     * <code>passport_international.core_person_address.unstructured</code>.
     * Неструктурированная часть адреса
     */
    public final TableField<CorePersonAddressRecord, String> UNSTRUCTURED = createField(DSL.name("unstructured"), SQLDataType.CLOB, this, "Неструктурированная часть адреса");

    /**
     * The column
     * <code>passport_international.core_person_address.sono_id</code>.
     * Налоговый орган (соно)
     */
    public final TableField<CorePersonAddressRecord, Long> SONO_ID = createField(DSL.name("sono_id"), SQLDataType.BIGINT, this, "Налоговый орган (соно)");

    /**
     * The column
     * <code>passport_international.core_person_address.src_id</code>.
     */
    public final TableField<CorePersonAddressRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>passport_international.core_person_address.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public final TableField<CorePersonAddressRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.core_person_address.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<CorePersonAddressRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.core_person_address.action_ind</code>.
     * Индикатор операции dml(i-insert,d-delete,u-update)
     */
    public final TableField<CorePersonAddressRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции dml(i-insert,d-delete,u-update)");

    /**
     * The column
     * <code>passport_international.core_person_address.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<CorePersonAddressRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.core_person_address.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<CorePersonAddressRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.core_person_address.person_document_id</code>.
     * Личные данные ФЛ
     */
    public final TableField<CorePersonAddressRecord, Long> PERSON_DOCUMENT_ID = createField(DSL.name("person_document_id"), SQLDataType.BIGINT.nullable(false), this, "Личные данные ФЛ");

    /**
     * The column
     * <code>passport_international.core_person_address.nsi_address_id</code>.
     * Идентификатор адреса из НСИ
     */
    public final TableField<CorePersonAddressRecord, Long> NSI_ADDRESS_ID = createField(DSL.name("nsi_address_id"), SQLDataType.BIGINT, this, "Идентификатор адреса из НСИ");

    /**
     * The column
     * <code>passport_international.core_person_address.address_status_id</code>.
     * Статус адреса
     */
    public final TableField<CorePersonAddressRecord, Long> ADDRESS_STATUS_ID = createField(DSL.name("address_status_id"), SQLDataType.BIGINT, this, "Статус адреса");

    /**
     * The column
     * <code>passport_international.core_person_address.system_id</code>.
     * Идентификатор подсистемы, который завел адрес
     */
    public final TableField<CorePersonAddressRecord, Long> SYSTEM_ID = createField(DSL.name("system_id"), SQLDataType.BIGINT, this, "Идентификатор подсистемы, который завел адрес");

    /**
     * The column
     * <code>passport_international.core_person_address.department_id</code>.
     * Орган, поставивший на учет
     */
    public final TableField<CorePersonAddressRecord, Long> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.BIGINT, this, "Орган, поставивший на учет");

    private CorePersonAddress(Name alias, Table<CorePersonAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorePersonAddress(Name alias, Table<CorePersonAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Регистрация физического лица по адресу"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_person_address</code>
     * table reference
     */
    public CorePersonAddress(String alias) {
        this(DSL.name(alias), CORE_PERSON_ADDRESS);
    }

    /**
     * Create an aliased <code>passport_international.core_person_address</code>
     * table reference
     */
    public CorePersonAddress(Name alias) {
        this(alias, CORE_PERSON_ADDRESS);
    }

    /**
     * Create a <code>passport_international.core_person_address</code> table
     * reference
     */
    public CorePersonAddress() {
        this(DSL.name("core_person_address"), null);
    }

    public <O extends Record> CorePersonAddress(Table<O> child, ForeignKey<O, CorePersonAddressRecord> key) {
        super(child, key, CORE_PERSON_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_PERSON_ADDRESS_SONO_ID_IX, Indexes.COREPERSONADDRESS_ADDRESSID_IX, Indexes.COREPERSONADDRESS_ADDRTYPEID_IX, Indexes.COREPERSONADDRESS_NEW_ADDRESS_IX, Indexes.COREPERSONADDRESS_PERSON_IX, Indexes.CPA_PERSON_STATE_IX);
    }

    @Override
    public Identity<CorePersonAddressRecord, Long> getIdentity() {
        return (Identity<CorePersonAddressRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CorePersonAddressRecord> getPrimaryKey() {
        return Keys.CORE_PERSON_ADDRESS_PK;
    }

    @Override
    public CorePersonAddress as(String alias) {
        return new CorePersonAddress(DSL.name(alias), this);
    }

    @Override
    public CorePersonAddress as(Name alias) {
        return new CorePersonAddress(alias, this);
    }

    @Override
    public CorePersonAddress as(Table<?> alias) {
        return new CorePersonAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonAddress rename(String name) {
        return new CorePersonAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonAddress rename(Name name) {
        return new CorePersonAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonAddress rename(Table<?> name) {
        return new CorePersonAddress(name.getQualifiedName(), null);
    }
}
