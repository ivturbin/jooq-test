/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.DestructionActRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Акт уничтожения бланков заграна
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DestructionAct extends TableImpl<DestructionActRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.destruction_act</code>
     */
    public static final DestructionAct DESTRUCTION_ACT = new DestructionAct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DestructionActRecord> getRecordType() {
        return DestructionActRecord.class;
    }

    /**
     * The column
     * <code>passport_international.destruction_act.destruction_act_id</code>.
     * Индификатор акта
     */
    public final TableField<DestructionActRecord, Long> DESTRUCTION_ACT_ID = createField(DSL.name("destruction_act_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Индификатор акта");

    /**
     * The column
     * <code>passport_international.destruction_act.number_act</code>. Номер
     * акта
     */
    public final TableField<DestructionActRecord, String> NUMBER_ACT = createField(DSL.name("number_act"), SQLDataType.VARCHAR(128).nullable(false), this, "Номер акта");

    /**
     * The column <code>passport_international.destruction_act.create_dt</code>.
     * Дата создания акта
     */
    public final TableField<DestructionActRecord, LocalDate> CREATE_DT = createField(DSL.name("create_dt"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATE)), this, "Дата создания акта");

    /**
     * The column <code>passport_international.destruction_act.make_dt</code>.
     * Дата составления акта
     */
    public final TableField<DestructionActRecord, LocalDate> MAKE_DT = createField(DSL.name("make_dt"), SQLDataType.LOCALDATE, this, "Дата составления акта");

    /**
     * The column <code>passport_international.destruction_act.status_id</code>.
     * В каком статусе находится акт
     */
    public final TableField<DestructionActRecord, Long> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.BIGINT.nullable(false), this, "В каком статусе находится акт");

    /**
     * The column
     * <code>passport_international.destruction_act.department_code</code>. Код
     * подразделения
     */
    public final TableField<DestructionActRecord, String> DEPARTMENT_CODE = createField(DSL.name("department_code"), SQLDataType.VARCHAR(128).nullable(false), this, "Код подразделения");

    /**
     * The column <code>passport_international.destruction_act.region_id</code>.
     */
    public final TableField<DestructionActRecord, Long> REGION_ID = createField(DSL.name("region_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.destruction_act.head_organization</code>.
     * Руководитель
     */
    public final TableField<DestructionActRecord, String> HEAD_ORGANIZATION = createField(DSL.name("head_organization"), SQLDataType.VARCHAR(255), this, "Руководитель");

    /**
     * The column <code>passport_international.destruction_act.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<DestructionActRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.destruction_act.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public final TableField<DestructionActRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.destruction_act.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<DestructionActRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.destruction_act.action_ind</code>. Индикатор
     * операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<DestructionActRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column <code>passport_international.destruction_act.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<DestructionActRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column <code>passport_international.destruction_act.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<DestructionActRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    private DestructionAct(Name alias, Table<DestructionActRecord> aliased) {
        this(alias, aliased, null);
    }

    private DestructionAct(Name alias, Table<DestructionActRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Акт уничтожения бланков заграна"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.destruction_act</code>
     * table reference
     */
    public DestructionAct(String alias) {
        this(DSL.name(alias), DESTRUCTION_ACT);
    }

    /**
     * Create an aliased <code>passport_international.destruction_act</code>
     * table reference
     */
    public DestructionAct(Name alias) {
        this(alias, DESTRUCTION_ACT);
    }

    /**
     * Create a <code>passport_international.destruction_act</code> table
     * reference
     */
    public DestructionAct() {
        this(DSL.name("destruction_act"), null);
    }

    public <O extends Record> DestructionAct(Table<O> child, ForeignKey<O, DestructionActRecord> key) {
        super(child, key, DESTRUCTION_ACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<DestructionActRecord, Long> getIdentity() {
        return (Identity<DestructionActRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DestructionActRecord> getPrimaryKey() {
        return Keys.DESTRUCTION_ACT_PK;
    }

    @Override
    public DestructionAct as(String alias) {
        return new DestructionAct(DSL.name(alias), this);
    }

    @Override
    public DestructionAct as(Name alias) {
        return new DestructionAct(alias, this);
    }

    @Override
    public DestructionAct as(Table<?> alias) {
        return new DestructionAct(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DestructionAct rename(String name) {
        return new DestructionAct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DestructionAct rename(Name name) {
        return new DestructionAct(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DestructionAct rename(Table<?> name) {
        return new DestructionAct(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, LocalDate, LocalDate, Long, String, Long, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super String, ? super LocalDate, ? super LocalDate, ? super Long, ? super String, ? super Long, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super String, ? super LocalDate, ? super LocalDate, ? super Long, ? super String, ? super Long, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
