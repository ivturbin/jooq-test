/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCoreRequestRecord;

import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCoreRequest extends TableImpl<ViewCoreRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_request</code>
     */
    public static final ViewCoreRequest VIEW_CORE_REQUEST = new ViewCoreRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCoreRequestRecord> getRecordType() {
        return ViewCoreRequestRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_request.core_request_id</code>.
     */
    public final TableField<ViewCoreRequestRecord, Long> CORE_REQUEST_ID = createField(DSL.name("core_request_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.message_uid</code>.
     */
    public final TableField<ViewCoreRequestRecord, UUID> MESSAGE_UID = createField(DSL.name("message_uid"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.status_id</code>.
     */
    public final TableField<ViewCoreRequestRecord, Long> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.sender_name</code>.
     */
    public final TableField<ViewCoreRequestRecord, String> SENDER_NAME = createField(DSL.name("sender_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.content_value_cval</code>.
     */
    public final TableField<ViewCoreRequestRecord, String> CONTENT_VALUE_CVAL = createField(DSL.name("content_value_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.create_dttm</code>.
     */
    public final TableField<ViewCoreRequestRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.modify_dttm</code>.
     */
    public final TableField<ViewCoreRequestRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.action_ind</code>.
     */
    public final TableField<ViewCoreRequestRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.core_case_id</code>.
     */
    public final TableField<ViewCoreRequestRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.request_uid</code>.
     */
    public final TableField<ViewCoreRequestRecord, UUID> REQUEST_UID = createField(DSL.name("request_uid"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.initiator_bool</code>.
     */
    public final TableField<ViewCoreRequestRecord, Boolean> INITIATOR_BOOL = createField(DSL.name("initiator_bool"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.view_core_request.external_interaction_id</code>.
     */
    public final TableField<ViewCoreRequestRecord, Long> EXTERNAL_INTERACTION_ID = createField(DSL.name("external_interaction_id"), SQLDataType.BIGINT, this, "");

    private ViewCoreRequest(Name alias, Table<ViewCoreRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCoreRequest(Name alias, Table<ViewCoreRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_request" as  SELECT core_smev_request.smev_request_id AS core_request_id,
         core_smev_request.message_uid,
         core_smev_request.status_id,
         core_smev_request.sender_name,
         core_smev_request.content_dvalue AS content_value_cval,
         core_smev_request.create_dttm,
         core_smev_request.modify_dttm,
         core_smev_request.action_ind,
         core_smev_request.core_case_id,
         core_smev_request.client_uid AS request_uid,
         core_smev_request.initiator_bool,
         core_smev_request.external_interaction_id
        FROM core_smev_request;
        """));
    }

    /**
     * Create an aliased <code>passport_international.view_core_request</code>
     * table reference
     */
    public ViewCoreRequest(String alias) {
        this(DSL.name(alias), VIEW_CORE_REQUEST);
    }

    /**
     * Create an aliased <code>passport_international.view_core_request</code>
     * table reference
     */
    public ViewCoreRequest(Name alias) {
        this(alias, VIEW_CORE_REQUEST);
    }

    /**
     * Create a <code>passport_international.view_core_request</code> table
     * reference
     */
    public ViewCoreRequest() {
        this(DSL.name("view_core_request"), null);
    }

    public <O extends Record> ViewCoreRequest(Table<O> child, ForeignKey<O, ViewCoreRequestRecord> key) {
        super(child, key, VIEW_CORE_REQUEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCoreRequest as(String alias) {
        return new ViewCoreRequest(DSL.name(alias), this);
    }

    @Override
    public ViewCoreRequest as(Name alias) {
        return new ViewCoreRequest(alias, this);
    }

    @Override
    public ViewCoreRequest as(Table<?> alias) {
        return new ViewCoreRequest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreRequest rename(String name) {
        return new ViewCoreRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreRequest rename(Name name) {
        return new ViewCoreRequest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreRequest rename(Table<?> name) {
        return new ViewCoreRequest(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, UUID, Long, String, String, OffsetDateTime, OffsetDateTime, String, Long, UUID, Boolean, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super UUID, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? super UUID, ? super Boolean, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super UUID, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? super UUID, ? super Boolean, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
