/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseIssuanceRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Дело о выдаче заграничного паспорта
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseIssuance extends TableImpl<FpCaseIssuanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_case_issuance</code>
     */
    public static final FpCaseIssuance FP_CASE_ISSUANCE = new FpCaseIssuance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpCaseIssuanceRecord> getRecordType() {
        return FpCaseIssuanceRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_case_issuance.issuance_id</code>.
     * Идентификатор
     */
    public final TableField<FpCaseIssuanceRecord, Long> ISSUANCE_ID = createField(DSL.name("issuance_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.preferential_category</code>.
     * Признак льготной категории заявителя, если 1
     */
    public final TableField<FpCaseIssuanceRecord, Boolean> PREFERENTIAL_CATEGORY = createField(DSL.name("preferential_category"), SQLDataType.BOOLEAN.nullable(false), this, "Признак льготной категории заявителя, если 1");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.application_place_id</code>.
     * Тип места обращения
     */
    public final TableField<FpCaseIssuanceRecord, Long> APPLICATION_PLACE_ID = createField(DSL.name("application_place_id"), SQLDataType.BIGINT.nullable(false), this, "Тип места обращения");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.secret_access_id</code>.
     * Имеется ли допуск к секретным сведениям
     */
    public final TableField<FpCaseIssuanceRecord, Long> SECRET_ACCESS_ID = createField(DSL.name("secret_access_id"), SQLDataType.BIGINT, this, "Имеется ли допуск к секретным сведениям");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.contract_obligation_id</code>.
     * Имеются ли контрактные обязательства
     */
    public final TableField<FpCaseIssuanceRecord, Long> CONTRACT_OBLIGATION_ID = createField(DSL.name("contract_obligation_id"), SQLDataType.BIGINT, this, "Имеются ли контрактные обязательства");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.application_reason_id</code>.
     * Цель получения (ЗАПОЛНЕНИЕ ПОЛЯ ОТМЕНЕНО)
     */
    public final TableField<FpCaseIssuanceRecord, Long> APPLICATION_REASON_ID = createField(DSL.name("application_reason_id"), SQLDataType.BIGINT, this, "Цель получения (ЗАПОЛНЕНИЕ ПОЛЯ ОТМЕНЕНО)");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.application_urgent_reason_id</code>.
     * Причина срочности
     */
    public final TableField<FpCaseIssuanceRecord, Long> APPLICATION_URGENT_REASON_ID = createField(DSL.name("application_urgent_reason_id"), SQLDataType.BIGINT, this, "Причина срочности");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.addit_citizenship_id</code>.
     * Дополнительное гражданство
     */
    public final TableField<FpCaseIssuanceRecord, Long> ADDIT_CITIZENSHIP_ID = createField(DSL.name("addit_citizenship_id"), SQLDataType.BIGINT, this, "Дополнительное гражданство");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.target_country_id</code>.
     * Страна выезда на ПМЖ
     */
    public final TableField<FpCaseIssuanceRecord, Long> TARGET_COUNTRY_ID = createField(DSL.name("target_country_id"), SQLDataType.BIGINT, this, "Страна выезда на ПМЖ");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.applicant_category_id</code>.
     * Категория заявителя
     */
    public final TableField<FpCaseIssuanceRecord, Long> APPLICANT_CATEGORY_ID = createField(DSL.name("applicant_category_id"), SQLDataType.BIGINT, this, "Категория заявителя");

    /**
     * The column <code>passport_international.fp_case_issuance.issue_dt</code>.
     * Дата фактической выдачи паспорта
     */
    public final TableField<FpCaseIssuanceRecord, LocalDate> ISSUE_DT = createField(DSL.name("issue_dt"), SQLDataType.LOCALDATE, this, "Дата фактической выдачи паспорта");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.secret_access_dt</code>.
     * Дата оформления допуска к секретным сведениям
     */
    public final TableField<FpCaseIssuanceRecord, LocalDate> SECRET_ACCESS_DT = createField(DSL.name("secret_access_dt"), SQLDataType.LOCALDATE, this, "Дата оформления допуска к секретным сведениям");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.contract_obligation_dt</code>.
     * Дата оформления контрактных обязательств
     */
    public final TableField<FpCaseIssuanceRecord, LocalDate> CONTRACT_OBLIGATION_DT = createField(DSL.name("contract_obligation_dt"), SQLDataType.LOCALDATE, this, "Дата оформления контрактных обязательств");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.blank_receipt_dt</code>.
     * Дата получения бланка
     */
    public final TableField<FpCaseIssuanceRecord, LocalDate> BLANK_RECEIPT_DT = createField(DSL.name("blank_receipt_dt"), SQLDataType.LOCALDATE, this, "Дата получения бланка");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.secret_access_org_name</code>.
     * Название организации, для которой был оформлен допуск к секретным
     * сведениям
     */
    public final TableField<FpCaseIssuanceRecord, String> SECRET_ACCESS_ORG_NAME = createField(DSL.name("secret_access_org_name"), SQLDataType.VARCHAR(256), this, "Название организации, для которой был оформлен допуск к секретным сведениям");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.contract_obligation_org_name</code>.
     * Название организации, с которой были оформлены контрактные обязательства
     */
    public final TableField<FpCaseIssuanceRecord, String> CONTRACT_OBLIGATION_ORG_NAME = createField(DSL.name("contract_obligation_org_name"), SQLDataType.VARCHAR(256), this, "Название организации, с которой были оформлены контрактные обязательства");

    /**
     * The column <code>passport_international.fp_case_issuance.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<FpCaseIssuanceRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public final TableField<FpCaseIssuanceRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<FpCaseIssuanceRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<FpCaseIssuanceRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column <code>passport_international.fp_case_issuance.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpCaseIssuanceRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column <code>passport_international.fp_case_issuance.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpCaseIssuanceRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column <code>passport_international.fp_case_issuance.signer</code>.
     * Подписывающий сотрудник
     */
    public final TableField<FpCaseIssuanceRecord, String> SIGNER = createField(DSL.name("signer"), SQLDataType.VARCHAR(255), this, "Подписывающий сотрудник");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.reason_issue_id</code>.
     * Причина выдачи заграна
     */
    public final TableField<FpCaseIssuanceRecord, Long> REASON_ISSUE_ID = createField(DSL.name("reason_issue_id"), SQLDataType.BIGINT, this, "Причина выдачи заграна");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.convicted</code>. Осужден
     */
    public final TableField<FpCaseIssuanceRecord, Boolean> CONVICTED = createField(DSL.name("convicted"), SQLDataType.BOOLEAN, this, "Осужден");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.military_contract</code>.
     * Призван на военную службу
     */
    public final TableField<FpCaseIssuanceRecord, Boolean> MILITARY_CONTRACT = createField(DSL.name("military_contract"), SQLDataType.BOOLEAN, this, "Призван на военную службу");

    /**
     * The column <code>passport_international.fp_case_issuance.suspect</code>.
     * Подозреваемый в преступлении
     */
    public final TableField<FpCaseIssuanceRecord, Boolean> SUSPECT = createField(DSL.name("suspect"), SQLDataType.BOOLEAN, this, "Подозреваемый в преступлении");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.court_obligation_avoided</code>.
     * Уклоняется от обязательств наложенных судом
     */
    public final TableField<FpCaseIssuanceRecord, Boolean> COURT_OBLIGATION_AVOIDED = createField(DSL.name("court_obligation_avoided"), SQLDataType.BOOLEAN, this, "Уклоняется от обязательств наложенных судом");

    /**
     * The column <code>passport_international.fp_case_issuance.bankrupt</code>.
     * Банкрот
     */
    public final TableField<FpCaseIssuanceRecord, Boolean> BANKRUPT = createField(DSL.name("bankrupt"), SQLDataType.BOOLEAN, this, "Банкрот");

    /**
     * The column
     * <code>passport_international.fp_case_issuance.type_applicant_id</code>.
     * Вид заявления (от совершенолетнего или от несовершеннолетнего)
     */
    public final TableField<FpCaseIssuanceRecord, Long> TYPE_APPLICANT_ID = createField(DSL.name("type_applicant_id"), SQLDataType.BIGINT, this, "Вид заявления (от совершенолетнего или от несовершеннолетнего)");

    private FpCaseIssuance(Name alias, Table<FpCaseIssuanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpCaseIssuance(Name alias, Table<FpCaseIssuanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Дело о выдаче заграничного паспорта"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.fp_case_issuance</code>
     * table reference
     */
    public FpCaseIssuance(String alias) {
        this(DSL.name(alias), FP_CASE_ISSUANCE);
    }

    /**
     * Create an aliased <code>passport_international.fp_case_issuance</code>
     * table reference
     */
    public FpCaseIssuance(Name alias) {
        this(alias, FP_CASE_ISSUANCE);
    }

    /**
     * Create a <code>passport_international.fp_case_issuance</code> table
     * reference
     */
    public FpCaseIssuance() {
        this(DSL.name("fp_case_issuance"), null);
    }

    public <O extends Record> FpCaseIssuance(Table<O> child, ForeignKey<O, FpCaseIssuanceRecord> key) {
        super(child, key, FP_CASE_ISSUANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FP_CASE_ISSUANCE_ADD_CTZNID, Indexes.IDX_FP_CASE_ISSUANCE_APP_REASON_ID, Indexes.IDX_FP_CASE_ISSUANCE_CATEGORY_ID, Indexes.IDX_FP_CASE_ISSUANCE_COUNTRY_ID, Indexes.IDX_FP_CASE_ISSUANCE_PLACE_ID, Indexes.IDX_FP_CASE_ISSUANCE_SECRET_CONTR, Indexes.IDX_FP_CASE_ISSUANCE_URG_REASON_ID);
    }

    @Override
    public UniqueKey<FpCaseIssuanceRecord> getPrimaryKey() {
        return Keys.PK_FP_CASE_ISSUANCE;
    }

    @Override
    public List<ForeignKey<FpCaseIssuanceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_CASE_ISSUANCE__FK_FP_CASE_ISSUANCE_FP_CASE);
    }

    private transient FpCase _fpCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case</code> table.
     */
    public FpCase fpCase() {
        if (_fpCase == null)
            _fpCase = new FpCase(this, Keys.FP_CASE_ISSUANCE__FK_FP_CASE_ISSUANCE_FP_CASE);

        return _fpCase;
    }

    @Override
    public FpCaseIssuance as(String alias) {
        return new FpCaseIssuance(DSL.name(alias), this);
    }

    @Override
    public FpCaseIssuance as(Name alias) {
        return new FpCaseIssuance(alias, this);
    }

    @Override
    public FpCaseIssuance as(Table<?> alias) {
        return new FpCaseIssuance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseIssuance rename(String name) {
        return new FpCaseIssuance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseIssuance rename(Name name) {
        return new FpCaseIssuance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseIssuance rename(Table<?> name) {
        return new FpCaseIssuance(name.getQualifiedName(), null);
    }
}
