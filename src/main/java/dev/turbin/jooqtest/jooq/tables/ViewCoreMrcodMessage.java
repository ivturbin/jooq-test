/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCoreMrcodMessageRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCoreMrcodMessage extends TableImpl<ViewCoreMrcodMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_mrcod_message</code>
     */
    public static final ViewCoreMrcodMessage VIEW_CORE_MRCOD_MESSAGE = new ViewCoreMrcodMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCoreMrcodMessageRecord> getRecordType() {
        return ViewCoreMrcodMessageRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.mrcod_message_id</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, Long> MRCOD_MESSAGE_ID = createField(DSL.name("mrcod_message_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.mrcod_interaction_id_key</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, String> MRCOD_INTERACTION_ID_KEY = createField(DSL.name("mrcod_interaction_id_key"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.request_id</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, String> REQUEST_ID = createField(DSL.name("request_id"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.core_case_id</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.sender_id</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, Long> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.receiver_id</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, Long> RECEIVER_ID = createField(DSL.name("receiver_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.message_type_name</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, String> MESSAGE_TYPE_NAME = createField(DSL.name("message_type_name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.message_content</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, String> MESSAGE_CONTENT = createField(DSL.name("message_content"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.create_dttm</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.modify_dttm</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_core_mrcod_message.action_ind</code>.
     */
    public final TableField<ViewCoreMrcodMessageRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    private ViewCoreMrcodMessage(Name alias, Table<ViewCoreMrcodMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCoreMrcodMessage(Name alias, Table<ViewCoreMrcodMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_mrcod_message" as  SELECT core_mrcod_message.mrcod_message_id,
         core_mrcod_message.mrcod_interaction_id_key,
         core_mrcod_message.request_id,
         core_mrcod_message.core_case_id,
         core_mrcod_message.sender_id,
         core_mrcod_message.receiver_id,
         core_mrcod_message.message_type_name,
         core_mrcod_message.message_content_desc AS message_content,
         core_mrcod_message.create_dttm,
         core_mrcod_message.modify_dttm,
         core_mrcod_message.action_ind
        FROM core_mrcod_message;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_core_mrcod_message</code> table
     * reference
     */
    public ViewCoreMrcodMessage(String alias) {
        this(DSL.name(alias), VIEW_CORE_MRCOD_MESSAGE);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_core_mrcod_message</code> table
     * reference
     */
    public ViewCoreMrcodMessage(Name alias) {
        this(alias, VIEW_CORE_MRCOD_MESSAGE);
    }

    /**
     * Create a <code>passport_international.view_core_mrcod_message</code>
     * table reference
     */
    public ViewCoreMrcodMessage() {
        this(DSL.name("view_core_mrcod_message"), null);
    }

    public <O extends Record> ViewCoreMrcodMessage(Table<O> child, ForeignKey<O, ViewCoreMrcodMessageRecord> key) {
        super(child, key, VIEW_CORE_MRCOD_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCoreMrcodMessage as(String alias) {
        return new ViewCoreMrcodMessage(DSL.name(alias), this);
    }

    @Override
    public ViewCoreMrcodMessage as(Name alias) {
        return new ViewCoreMrcodMessage(alias, this);
    }

    @Override
    public ViewCoreMrcodMessage as(Table<?> alias) {
        return new ViewCoreMrcodMessage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreMrcodMessage rename(String name) {
        return new ViewCoreMrcodMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreMrcodMessage rename(Name name) {
        return new ViewCoreMrcodMessage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreMrcodMessage rename(Table<?> name) {
        return new ViewCoreMrcodMessage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, Long, Long, Long, String, String, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
