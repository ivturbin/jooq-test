/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.Measurement;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeasurementRecord extends UpdatableRecordImpl<MeasurementRecord> implements Record7<Long, String, Double, Double, LocalDate, Boolean, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>passport_international.measurement.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>passport_international.measurement.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>passport_international.measurement.uri</code>.
     */
    public void setUri(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>passport_international.measurement.uri</code>.
     */
    public String getUri() {
        return (String) get(1);
    }

    /**
     * Setter for <code>passport_international.measurement.count</code>.
     */
    public void setCount(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>passport_international.measurement.count</code>.
     */
    public Double getCount() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>passport_international.measurement.max</code>.
     */
    public void setMax(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>passport_international.measurement.max</code>.
     */
    public Double getMax() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>passport_international.measurement.day</code>.
     */
    public void setDay(LocalDate value) {
        set(4, value);
    }

    /**
     * Getter for <code>passport_international.measurement.day</code>.
     */
    public LocalDate getDay() {
        return (LocalDate) get(4);
    }

    /**
     * Setter for <code>passport_international.measurement.errors</code>.
     */
    public void setErrors(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>passport_international.measurement.errors</code>.
     */
    public Boolean getErrors() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>passport_international.measurement.app_start</code>.
     */
    public void setAppStart(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>passport_international.measurement.app_start</code>.
     */
    public LocalDateTime getAppStart() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Double, Double, LocalDate, Boolean, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, Double, Double, LocalDate, Boolean, LocalDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Measurement.MEASUREMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Measurement.MEASUREMENT.URI;
    }

    @Override
    public Field<Double> field3() {
        return Measurement.MEASUREMENT.COUNT;
    }

    @Override
    public Field<Double> field4() {
        return Measurement.MEASUREMENT.MAX;
    }

    @Override
    public Field<LocalDate> field5() {
        return Measurement.MEASUREMENT.DAY;
    }

    @Override
    public Field<Boolean> field6() {
        return Measurement.MEASUREMENT.ERRORS;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Measurement.MEASUREMENT.APP_START;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUri();
    }

    @Override
    public Double component3() {
        return getCount();
    }

    @Override
    public Double component4() {
        return getMax();
    }

    @Override
    public LocalDate component5() {
        return getDay();
    }

    @Override
    public Boolean component6() {
        return getErrors();
    }

    @Override
    public LocalDateTime component7() {
        return getAppStart();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUri();
    }

    @Override
    public Double value3() {
        return getCount();
    }

    @Override
    public Double value4() {
        return getMax();
    }

    @Override
    public LocalDate value5() {
        return getDay();
    }

    @Override
    public Boolean value6() {
        return getErrors();
    }

    @Override
    public LocalDateTime value7() {
        return getAppStart();
    }

    @Override
    public MeasurementRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public MeasurementRecord value2(String value) {
        setUri(value);
        return this;
    }

    @Override
    public MeasurementRecord value3(Double value) {
        setCount(value);
        return this;
    }

    @Override
    public MeasurementRecord value4(Double value) {
        setMax(value);
        return this;
    }

    @Override
    public MeasurementRecord value5(LocalDate value) {
        setDay(value);
        return this;
    }

    @Override
    public MeasurementRecord value6(Boolean value) {
        setErrors(value);
        return this;
    }

    @Override
    public MeasurementRecord value7(LocalDateTime value) {
        setAppStart(value);
        return this;
    }

    @Override
    public MeasurementRecord values(Long value1, String value2, Double value3, Double value4, LocalDate value5, Boolean value6, LocalDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasurementRecord
     */
    public MeasurementRecord() {
        super(Measurement.MEASUREMENT);
    }

    /**
     * Create a detached, initialised MeasurementRecord
     */
    public MeasurementRecord(Long id, String uri, Double count, Double max, LocalDate day, Boolean errors, LocalDateTime appStart) {
        super(Measurement.MEASUREMENT);

        setId(id);
        setUri(uri);
        setCount(count);
        setMax(max);
        setDay(day);
        setErrors(errors);
        setAppStart(appStart);
        resetChangedOnNotNull();
    }
}
