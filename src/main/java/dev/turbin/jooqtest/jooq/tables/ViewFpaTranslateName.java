/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewFpaTranslateNameRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewFpaTranslateName extends TableImpl<ViewFpaTranslateNameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_fpa_translate_name</code>
     */
    public static final ViewFpaTranslateName VIEW_FPA_TRANSLATE_NAME = new ViewFpaTranslateName();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewFpaTranslateNameRecord> getRecordType() {
        return ViewFpaTranslateNameRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.fpa_translate_name_id</code>.
     */
    public final TableField<ViewFpaTranslateNameRecord, Long> FPA_TRANSLATE_NAME_ID = createField(DSL.name("fpa_translate_name_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.first_name</code>.
     * Обновленное имя
     */
    public final TableField<ViewFpaTranslateNameRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(256), this, "Обновленное имя");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.middle_name</code>.
     * Обновленное отчество
     */
    public final TableField<ViewFpaTranslateNameRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(256), this, "Обновленное отчество");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.last_name</code>.
     * Обновленая фамилия
     */
    public final TableField<ViewFpaTranslateNameRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(256), this, "Обновленая фамилия");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.reason_translate_desc</code>.
     */
    public final TableField<ViewFpaTranslateNameRecord, String> REASON_TRANSLATE_DESC = createField(DSL.name("reason_translate_desc"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.src_id</code>.
     */
    public final TableField<ViewFpaTranslateNameRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.create_dttm</code>.
     */
    public final TableField<ViewFpaTranslateNameRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.modify_dttm</code>.
     */
    public final TableField<ViewFpaTranslateNameRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.exp_dttm</code>.
     */
    public final TableField<ViewFpaTranslateNameRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.eff_dttm</code>.
     */
    public final TableField<ViewFpaTranslateNameRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_translate_name.action_ind</code>.
     */
    public final TableField<ViewFpaTranslateNameRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "");

    private ViewFpaTranslateName(Name alias, Table<ViewFpaTranslateNameRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewFpaTranslateName(Name alias, Table<ViewFpaTranslateNameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_fpa_translate_name" as  SELECT fp_translate_name.translate_name_id AS fpa_translate_name_id,
         fp_translate_name.first_name,
         fp_translate_name.middle_name,
         fp_translate_name.last_name,
         fp_translate_name.reason_translate AS reason_translate_desc,
         fp_translate_name.src_id,
         fp_translate_name.create_dttm,
         fp_translate_name.modify_dttm,
         fp_translate_name.exp_dttm,
         fp_translate_name.eff_dttm,
         fp_translate_name.action_ind
        FROM fp_translate_name;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_translate_name</code> table
     * reference
     */
    public ViewFpaTranslateName(String alias) {
        this(DSL.name(alias), VIEW_FPA_TRANSLATE_NAME);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_translate_name</code> table
     * reference
     */
    public ViewFpaTranslateName(Name alias) {
        this(alias, VIEW_FPA_TRANSLATE_NAME);
    }

    /**
     * Create a <code>passport_international.view_fpa_translate_name</code>
     * table reference
     */
    public ViewFpaTranslateName() {
        this(DSL.name("view_fpa_translate_name"), null);
    }

    public <O extends Record> ViewFpaTranslateName(Table<O> child, ForeignKey<O, ViewFpaTranslateNameRecord> key) {
        super(child, key, VIEW_FPA_TRANSLATE_NAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewFpaTranslateName as(String alias) {
        return new ViewFpaTranslateName(DSL.name(alias), this);
    }

    @Override
    public ViewFpaTranslateName as(Name alias) {
        return new ViewFpaTranslateName(alias, this);
    }

    @Override
    public ViewFpaTranslateName as(Table<?> alias) {
        return new ViewFpaTranslateName(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaTranslateName rename(String name) {
        return new ViewFpaTranslateName(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaTranslateName rename(Name name) {
        return new ViewFpaTranslateName(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaTranslateName rename(Table<?> name) {
        return new ViewFpaTranslateName(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, String, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
