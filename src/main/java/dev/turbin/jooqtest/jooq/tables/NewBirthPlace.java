/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.NewBirthPlaceRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Сведения о новом месте рождения
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewBirthPlace extends TableImpl<NewBirthPlaceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.new_birth_place</code>
     */
    public static final NewBirthPlace NEW_BIRTH_PLACE = new NewBirthPlace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewBirthPlaceRecord> getRecordType() {
        return NewBirthPlaceRecord.class;
    }

    /**
     * The column
     * <code>passport_international.new_birth_place.new_birth_place_id</code>.
     * Идентификатор записи
     */
    public final TableField<NewBirthPlaceRecord, Long> NEW_BIRTH_PLACE_ID = createField(DSL.name("new_birth_place_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор записи");

    /**
     * The column
     * <code>passport_international.new_birth_place.core_case_id</code>.
     * Идентификатор дела
     */
    public final TableField<NewBirthPlaceRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор дела");

    /**
     * The column
     * <code>passport_international.new_birth_place.create_dttm</code>. Дата
     * создания записи
     */
    public final TableField<NewBirthPlaceRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Дата создания записи");

    /**
     * The column
     * <code>passport_international.new_birth_place.new_birth_country_id</code>.
     * Новая страна рождения
     */
    public final TableField<NewBirthPlaceRecord, Long> NEW_BIRTH_COUNTRY_ID = createField(DSL.name("new_birth_country_id"), SQLDataType.BIGINT.nullable(false), this, "Новая страна рождения");

    /**
     * The column
     * <code>passport_international.new_birth_place.new_birth_place_region_desc</code>.
     * Новый регион рождения 
     */
    public final TableField<NewBirthPlaceRecord, String> NEW_BIRTH_PLACE_REGION_DESC = createField(DSL.name("new_birth_place_region_desc"), SQLDataType.CLOB, this, "Новый регион рождения ");

    /**
     * The column
     * <code>passport_international.new_birth_place.create_user</code>.
     * Пользователь создавший запись
     */
    public final TableField<NewBirthPlaceRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "Пользователь создавший запись");

    private NewBirthPlace(Name alias, Table<NewBirthPlaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewBirthPlace(Name alias, Table<NewBirthPlaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Сведения о новом месте рождения"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.new_birth_place</code>
     * table reference
     */
    public NewBirthPlace(String alias) {
        this(DSL.name(alias), NEW_BIRTH_PLACE);
    }

    /**
     * Create an aliased <code>passport_international.new_birth_place</code>
     * table reference
     */
    public NewBirthPlace(Name alias) {
        this(alias, NEW_BIRTH_PLACE);
    }

    /**
     * Create a <code>passport_international.new_birth_place</code> table
     * reference
     */
    public NewBirthPlace() {
        this(DSL.name("new_birth_place"), null);
    }

    public <O extends Record> NewBirthPlace(Table<O> child, ForeignKey<O, NewBirthPlaceRecord> key) {
        super(child, key, NEW_BIRTH_PLACE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<NewBirthPlaceRecord, Long> getIdentity() {
        return (Identity<NewBirthPlaceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NewBirthPlaceRecord> getPrimaryKey() {
        return Keys.NEW_BIRTH_PLACE_PKEY;
    }

    @Override
    public List<ForeignKey<NewBirthPlaceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NEW_BIRTH_PLACE__CORE_CASE_FK);
    }

    private transient CoreCase _coreCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.NEW_BIRTH_PLACE__CORE_CASE_FK);

        return _coreCase;
    }

    @Override
    public NewBirthPlace as(String alias) {
        return new NewBirthPlace(DSL.name(alias), this);
    }

    @Override
    public NewBirthPlace as(Name alias) {
        return new NewBirthPlace(alias, this);
    }

    @Override
    public NewBirthPlace as(Table<?> alias) {
        return new NewBirthPlace(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewBirthPlace rename(String name) {
        return new NewBirthPlace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewBirthPlace rename(Name name) {
        return new NewBirthPlace(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewBirthPlace rename(Table<?> name) {
        return new NewBirthPlace(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, OffsetDateTime, Long, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super OffsetDateTime, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super OffsetDateTime, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
