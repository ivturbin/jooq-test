/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonDocumentExBirthRecordRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица для хранения записей актов о рождении
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePersonDocumentExBirthRecord extends TableImpl<CorePersonDocumentExBirthRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_person_document_ex_birth_record</code>
     */
    public static final CorePersonDocumentExBirthRecord CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD = new CorePersonDocumentExBirthRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorePersonDocumentExBirthRecordRecord> getRecordType() {
        return CorePersonDocumentExBirthRecordRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_person_document_ex_birth_record.core_person_document_id</code>.
     * Личные данные ФЛ
     */
    public final TableField<CorePersonDocumentExBirthRecordRecord, Long> CORE_PERSON_DOCUMENT_ID = createField(DSL.name("core_person_document_id"), SQLDataType.BIGINT.nullable(false), this, "Личные данные ФЛ");

    /**
     * The column
     * <code>passport_international.core_person_document_ex_birth_record.record_number</code>.
     * Номер Записи АГС
     */
    public final TableField<CorePersonDocumentExBirthRecordRecord, String> RECORD_NUMBER = createField(DSL.name("record_number"), SQLDataType.VARCHAR(128), this, "Номер Записи АГС");

    /**
     * The column
     * <code>passport_international.core_person_document_ex_birth_record.record_doc_number</code>.
     * Старый номер записи (до 2018 года)
     */
    public final TableField<CorePersonDocumentExBirthRecordRecord, String> RECORD_DOC_NUMBER = createField(DSL.name("record_doc_number"), SQLDataType.VARCHAR(128), this, "Старый номер записи (до 2018 года)");

    /**
     * The column
     * <code>passport_international.core_person_document_ex_birth_record.registry_name</code>.
     * Наименование органа Записи АГС
     */
    public final TableField<CorePersonDocumentExBirthRecordRecord, String> REGISTRY_NAME = createField(DSL.name("registry_name"), SQLDataType.VARCHAR(256), this, "Наименование органа Записи АГС");

    /**
     * The column
     * <code>passport_international.core_person_document_ex_birth_record.record_date</code>.
     * Дата постановки ЗАГС
     */
    public final TableField<CorePersonDocumentExBirthRecordRecord, LocalDate> RECORD_DATE = createField(DSL.name("record_date"), SQLDataType.LOCALDATE, this, "Дата постановки ЗАГС");

    /**
     * The column
     * <code>passport_international.core_person_document_ex_birth_record.create_dttm</code>.
     * Дата время вставки записи
     */
    public final TableField<CorePersonDocumentExBirthRecordRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи");

    /**
     * The column
     * <code>passport_international.core_person_document_ex_birth_record.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<CorePersonDocumentExBirthRecordRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    private CorePersonDocumentExBirthRecord(Name alias, Table<CorePersonDocumentExBirthRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorePersonDocumentExBirthRecord(Name alias, Table<CorePersonDocumentExBirthRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для хранения записей актов о рождении"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.core_person_document_ex_birth_record</code>
     * table reference
     */
    public CorePersonDocumentExBirthRecord(String alias) {
        this(DSL.name(alias), CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD);
    }

    /**
     * Create an aliased
     * <code>passport_international.core_person_document_ex_birth_record</code>
     * table reference
     */
    public CorePersonDocumentExBirthRecord(Name alias) {
        this(alias, CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD);
    }

    /**
     * Create a
     * <code>passport_international.core_person_document_ex_birth_record</code>
     * table reference
     */
    public CorePersonDocumentExBirthRecord() {
        this(DSL.name("core_person_document_ex_birth_record"), null);
    }

    public <O extends Record> CorePersonDocumentExBirthRecord(Table<O> child, ForeignKey<O, CorePersonDocumentExBirthRecordRecord> key) {
        super(child, key, CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<CorePersonDocumentExBirthRecordRecord> getPrimaryKey() {
        return Keys.CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD_PK;
    }

    @Override
    public List<ForeignKey<CorePersonDocumentExBirthRecordRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD__CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD_FK);
    }

    private transient CorePersonDocument _corePersonDocument;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_person_document</code> table.
     */
    public CorePersonDocument corePersonDocument() {
        if (_corePersonDocument == null)
            _corePersonDocument = new CorePersonDocument(this, Keys.CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD__CORE_PERSON_DOCUMENT_EX_BIRTH_RECORD_FK);

        return _corePersonDocument;
    }

    @Override
    public CorePersonDocumentExBirthRecord as(String alias) {
        return new CorePersonDocumentExBirthRecord(DSL.name(alias), this);
    }

    @Override
    public CorePersonDocumentExBirthRecord as(Name alias) {
        return new CorePersonDocumentExBirthRecord(alias, this);
    }

    @Override
    public CorePersonDocumentExBirthRecord as(Table<?> alias) {
        return new CorePersonDocumentExBirthRecord(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonDocumentExBirthRecord rename(String name) {
        return new CorePersonDocumentExBirthRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonDocumentExBirthRecord rename(Name name) {
        return new CorePersonDocumentExBirthRecord(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonDocumentExBirthRecord rename(Table<?> name) {
        return new CorePersonDocumentExBirthRecord(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, LocalDate, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super String, ? super String, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super String, ? super String, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
