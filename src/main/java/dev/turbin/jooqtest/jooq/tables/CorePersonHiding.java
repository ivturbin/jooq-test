/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CorePersonHidingRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица сокрытых ФЛ
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePersonHiding extends TableImpl<CorePersonHidingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_person_hiding</code>
     */
    public static final CorePersonHiding CORE_PERSON_HIDING = new CorePersonHiding();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorePersonHidingRecord> getRecordType() {
        return CorePersonHidingRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_person_hiding.core_person_hiding_id</code>.
     * Идентификатор ФЛ
     */
    public final TableField<CorePersonHidingRecord, Long> CORE_PERSON_HIDING_ID = createField(DSL.name("core_person_hiding_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор ФЛ");

    /**
     * The column
     * <code>passport_international.core_person_hiding.hidden_status_bool</code>.
     * Статус если ФЛ сокрыт, то "true", иначе – "false"
     */
    public final TableField<CorePersonHidingRecord, Boolean> HIDDEN_STATUS_BOOL = createField(DSL.name("hidden_status_bool"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Статус если ФЛ сокрыт, то \"true\", иначе – \"false\"");

    /**
     * The column
     * <code>passport_international.core_person_hiding.start_dt</code>. Дата
     * начала действия статуса ФЛ
     */
    public final TableField<CorePersonHidingRecord, LocalDate> START_DT = createField(DSL.name("start_dt"), SQLDataType.LOCALDATE, this, "Дата начала действия статуса ФЛ");

    /**
     * The column
     * <code>passport_international.core_person_hiding.create_dttm</code>. Дата
     * время вставки записи
     */
    public final TableField<CorePersonHidingRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи");

    /**
     * The column
     * <code>passport_international.core_person_hiding.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<CorePersonHidingRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.core_person_hiding.action_ind</code>.
     * Индикатор действия
     */
    public final TableField<CorePersonHidingRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор действия");

    private CorePersonHiding(Name alias, Table<CorePersonHidingRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorePersonHiding(Name alias, Table<CorePersonHidingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица сокрытых ФЛ"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_person_hiding</code>
     * table reference
     */
    public CorePersonHiding(String alias) {
        this(DSL.name(alias), CORE_PERSON_HIDING);
    }

    /**
     * Create an aliased <code>passport_international.core_person_hiding</code>
     * table reference
     */
    public CorePersonHiding(Name alias) {
        this(alias, CORE_PERSON_HIDING);
    }

    /**
     * Create a <code>passport_international.core_person_hiding</code> table
     * reference
     */
    public CorePersonHiding() {
        this(DSL.name("core_person_hiding"), null);
    }

    public <O extends Record> CorePersonHiding(Table<O> child, ForeignKey<O, CorePersonHidingRecord> key) {
        super(child, key, CORE_PERSON_HIDING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CORE_PERSON_HIDING_PERSON_ID);
    }

    @Override
    public UniqueKey<CorePersonHidingRecord> getPrimaryKey() {
        return Keys.CORE_PERSON_HIDING_PK;
    }

    @Override
    public CorePersonHiding as(String alias) {
        return new CorePersonHiding(DSL.name(alias), this);
    }

    @Override
    public CorePersonHiding as(Name alias) {
        return new CorePersonHiding(alias, this);
    }

    @Override
    public CorePersonHiding as(Table<?> alias) {
        return new CorePersonHiding(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonHiding rename(String name) {
        return new CorePersonHiding(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonHiding rename(Name name) {
        return new CorePersonHiding(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePersonHiding rename(Table<?> name) {
        return new CorePersonHiding(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Boolean, LocalDate, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Boolean, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Boolean, ? super LocalDate, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
