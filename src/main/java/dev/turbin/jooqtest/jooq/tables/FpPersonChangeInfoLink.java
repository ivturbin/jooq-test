/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonChangeInfoLinkRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Сведения об изменении персональных данных
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpPersonChangeInfoLink extends TableImpl<FpPersonChangeInfoLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_person_change_info_link</code>
     */
    public static final FpPersonChangeInfoLink FP_PERSON_CHANGE_INFO_LINK = new FpPersonChangeInfoLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpPersonChangeInfoLinkRecord> getRecordType() {
        return FpPersonChangeInfoLinkRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_person_change_info_link.person_info_change_link_id</code>.
     * Идентификатор записи
     */
    public final TableField<FpPersonChangeInfoLinkRecord, Long> PERSON_INFO_CHANGE_LINK_ID = createField(DSL.name("person_info_change_link_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор записи");

    /**
     * The column
     * <code>passport_international.fp_person_change_info_link.person_info_change_id</code>.
     * Идентификатор записи об изменении
     */
    public final TableField<FpPersonChangeInfoLinkRecord, Long> PERSON_INFO_CHANGE_ID = createField(DSL.name("person_info_change_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор записи об изменении");

    /**
     * The column
     * <code>passport_international.fp_person_change_info_link.fp_case_issuance_id</code>.
     * Идентификатор дела
     */
    public final TableField<FpPersonChangeInfoLinkRecord, Long> FP_CASE_ISSUANCE_ID = createField(DSL.name("fp_case_issuance_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор дела");

    /**
     * The column
     * <code>passport_international.fp_person_change_info_link.deleted</code>.
     */
    public final TableField<FpPersonChangeInfoLinkRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>passport_international.fp_person_change_info_link.create_dttm</code>.
     */
    public final TableField<FpPersonChangeInfoLinkRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.fp_person_change_info_link.modify_dttm</code>.
     */
    public final TableField<FpPersonChangeInfoLinkRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>passport_international.fp_person_change_info_link.action_ind</code>.
     */
    public final TableField<FpPersonChangeInfoLinkRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    private FpPersonChangeInfoLink(Name alias, Table<FpPersonChangeInfoLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpPersonChangeInfoLink(Name alias, Table<FpPersonChangeInfoLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Сведения об изменении персональных данных"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_person_change_info_link</code> table
     * reference
     */
    public FpPersonChangeInfoLink(String alias) {
        this(DSL.name(alias), FP_PERSON_CHANGE_INFO_LINK);
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_person_change_info_link</code> table
     * reference
     */
    public FpPersonChangeInfoLink(Name alias) {
        this(alias, FP_PERSON_CHANGE_INFO_LINK);
    }

    /**
     * Create a <code>passport_international.fp_person_change_info_link</code>
     * table reference
     */
    public FpPersonChangeInfoLink() {
        this(DSL.name("fp_person_change_info_link"), null);
    }

    public <O extends Record> FpPersonChangeInfoLink(Table<O> child, ForeignKey<O, FpPersonChangeInfoLinkRecord> key) {
        super(child, key, FP_PERSON_CHANGE_INFO_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<FpPersonChangeInfoLinkRecord, Long> getIdentity() {
        return (Identity<FpPersonChangeInfoLinkRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FpPersonChangeInfoLinkRecord> getPrimaryKey() {
        return Keys.FP_PERSON_CHANGE_INFO_LINK_PK;
    }

    @Override
    public List<ForeignKey<FpPersonChangeInfoLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_PERSON_CHANGE_INFO_LINK__FP_PERSON_CHANGE_INFO_LINK_FP_PERSON_CHANGE_INFO_FK, Keys.FP_PERSON_CHANGE_INFO_LINK__FP_PERSON_CHANGE_INFO_LINK_FP_CASE_FK);
    }

    private transient FpPersonChangeInfo _fpPersonChangeInfo;
    private transient FpCaseIssuance _fpCaseIssuance;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_person_change_info</code> table.
     */
    public FpPersonChangeInfo fpPersonChangeInfo() {
        if (_fpPersonChangeInfo == null)
            _fpPersonChangeInfo = new FpPersonChangeInfo(this, Keys.FP_PERSON_CHANGE_INFO_LINK__FP_PERSON_CHANGE_INFO_LINK_FP_PERSON_CHANGE_INFO_FK);

        return _fpPersonChangeInfo;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case_issuance</code> table.
     */
    public FpCaseIssuance fpCaseIssuance() {
        if (_fpCaseIssuance == null)
            _fpCaseIssuance = new FpCaseIssuance(this, Keys.FP_PERSON_CHANGE_INFO_LINK__FP_PERSON_CHANGE_INFO_LINK_FP_CASE_FK);

        return _fpCaseIssuance;
    }

    @Override
    public FpPersonChangeInfoLink as(String alias) {
        return new FpPersonChangeInfoLink(DSL.name(alias), this);
    }

    @Override
    public FpPersonChangeInfoLink as(Name alias) {
        return new FpPersonChangeInfoLink(alias, this);
    }

    @Override
    public FpPersonChangeInfoLink as(Table<?> alias) {
        return new FpPersonChangeInfoLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonChangeInfoLink rename(String name) {
        return new FpPersonChangeInfoLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonChangeInfoLink rename(Name name) {
        return new FpPersonChangeInfoLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonChangeInfoLink rename(Table<?> name) {
        return new FpPersonChangeInfoLink(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Boolean, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super Long, ? super Boolean, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super Long, ? super Boolean, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
