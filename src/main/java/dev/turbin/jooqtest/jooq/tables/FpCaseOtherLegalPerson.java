/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseOtherLegalPersonRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Сведения о другом законном представителе, имеющем право на получение паспорта
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseOtherLegalPerson extends TableImpl<FpCaseOtherLegalPersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_case_other_legal_person</code>
     */
    public static final FpCaseOtherLegalPerson FP_CASE_OTHER_LEGAL_PERSON = new FpCaseOtherLegalPerson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpCaseOtherLegalPersonRecord> getRecordType() {
        return FpCaseOtherLegalPersonRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.fp_case_id</code>.
     * Id базового дела
     */
    public final TableField<FpCaseOtherLegalPersonRecord, Long> FP_CASE_ID = createField(DSL.name("fp_case_id"), SQLDataType.BIGINT.nullable(false), this, "Id базового дела");

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.first_name</code>.
     * Имя
     */
    public final TableField<FpCaseOtherLegalPersonRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(256).nullable(false), this, "Имя");

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.last_name</code>.
     * Фамилия
     */
    public final TableField<FpCaseOtherLegalPersonRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(256).nullable(false), this, "Фамилия");

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.middle_name</code>.
     * Отчество
     */
    public final TableField<FpCaseOtherLegalPersonRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(256), this, "Отчество");

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.birthday_dt</code>.
     * Дата рождения
     */
    public final TableField<FpCaseOtherLegalPersonRecord, LocalDate> BIRTHDAY_DT = createField(DSL.name("birthday_dt"), SQLDataType.LOCALDATE.nullable(false), this, "Дата рождения");

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.gender_id</code>.
     * Пол
     */
    public final TableField<FpCaseOtherLegalPersonRecord, Long> GENDER_ID = createField(DSL.name("gender_id"), SQLDataType.BIGINT.nullable(false), this, "Пол");

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.birth_place_desc</code>.
     * Место рождения
     */
    public final TableField<FpCaseOtherLegalPersonRecord, String> BIRTH_PLACE_DESC = createField(DSL.name("birth_place_desc"), SQLDataType.CLOB.nullable(false), this, "Место рождения");

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.create_dttm</code>.
     * Дата создания записи
     */
    public final TableField<FpCaseOtherLegalPersonRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Дата создания записи");

    /**
     * The column
     * <code>passport_international.fp_case_other_legal_person.create_user</code>.
     * Пользователь создавший запись
     */
    public final TableField<FpCaseOtherLegalPersonRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "Пользователь создавший запись");

    private FpCaseOtherLegalPerson(Name alias, Table<FpCaseOtherLegalPersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpCaseOtherLegalPerson(Name alias, Table<FpCaseOtherLegalPersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Сведения о другом законном представителе, имеющем право на получение паспорта"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_case_other_legal_person</code> table
     * reference
     */
    public FpCaseOtherLegalPerson(String alias) {
        this(DSL.name(alias), FP_CASE_OTHER_LEGAL_PERSON);
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_case_other_legal_person</code> table
     * reference
     */
    public FpCaseOtherLegalPerson(Name alias) {
        this(alias, FP_CASE_OTHER_LEGAL_PERSON);
    }

    /**
     * Create a <code>passport_international.fp_case_other_legal_person</code>
     * table reference
     */
    public FpCaseOtherLegalPerson() {
        this(DSL.name("fp_case_other_legal_person"), null);
    }

    public <O extends Record> FpCaseOtherLegalPerson(Table<O> child, ForeignKey<O, FpCaseOtherLegalPersonRecord> key) {
        super(child, key, FP_CASE_OTHER_LEGAL_PERSON);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<ForeignKey<FpCaseOtherLegalPersonRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_CASE_OTHER_LEGAL_PERSON__CORE_CASE_FK);
    }

    private transient CoreCase _coreCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.FP_CASE_OTHER_LEGAL_PERSON__CORE_CASE_FK);

        return _coreCase;
    }

    @Override
    public FpCaseOtherLegalPerson as(String alias) {
        return new FpCaseOtherLegalPerson(DSL.name(alias), this);
    }

    @Override
    public FpCaseOtherLegalPerson as(Name alias) {
        return new FpCaseOtherLegalPerson(alias, this);
    }

    @Override
    public FpCaseOtherLegalPerson as(Table<?> alias) {
        return new FpCaseOtherLegalPerson(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseOtherLegalPerson rename(String name) {
        return new FpCaseOtherLegalPerson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseOtherLegalPerson rename(Name name) {
        return new FpCaseOtherLegalPerson(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseOtherLegalPerson rename(Table<?> name) {
        return new FpCaseOtherLegalPerson(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, LocalDate, Long, String, OffsetDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super String, ? super LocalDate, ? super Long, ? super String, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super String, ? super LocalDate, ? super Long, ? super String, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
