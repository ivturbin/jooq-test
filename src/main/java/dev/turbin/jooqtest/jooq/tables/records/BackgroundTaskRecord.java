/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.BackgroundTask;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record16;
import org.jooq.Row16;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Фоновая задача
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BackgroundTaskRecord extends UpdatableRecordImpl<BackgroundTaskRecord> implements Record16<Long, String, JSONB, Long, Boolean, Boolean, UUID, UUID, String, Boolean, OffsetDateTime, OffsetDateTime, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.background_task.background_task_id</code>.
     * Внутренний идентификатор
     */
    public void setBackgroundTaskId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.background_task_id</code>.
     * Внутренний идентификатор
     */
    public Long getBackgroundTaskId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>passport_international.background_task.job_code</code>.
     * Код выполняемой задачи
     */
    public void setJobCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>passport_international.background_task.job_code</code>.
     * Код выполняемой задачи
     */
    public String getJobCode() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_parameters_json</code>.
     * Параметры задачи
     */
    public void setJobParametersJson(JSONB value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_parameters_json</code>.
     * Параметры задачи
     */
    public JSONB getJobParametersJson() {
        return (JSONB) get(2);
    }

    /**
     * Setter for <code>passport_international.background_task.job_id</code>.
     * Идентификатор задачи от администрирования
     */
    public void setJobId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>passport_international.background_task.job_id</code>.
     * Идентификатор задачи от администрирования
     */
    public Long getJobId() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_error_bool</code>.
     * Признак ошибки
     */
    public void setJobErrorBool(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_error_bool</code>.
     * Признак ошибки
     */
    public Boolean getJobErrorBool() {
        return (Boolean) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_done_bool</code>.
     * Признак готовности
     */
    public void setJobDoneBool(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_done_bool</code>.
     * Признак готовности
     */
    public Boolean getJobDoneBool() {
        return (Boolean) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_result_uid</code>. UID
     * файла с результатами выполнения
     */
    public void setJobResultUid(UUID value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_result_uid</code>. UID
     * файла с результатами выполнения
     */
    public UUID getJobResultUid() {
        return (UUID) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_error_log_uid</code>.
     * UID файла с логом ошибки
     */
    public void setJobErrorLogUid(UUID value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_error_log_uid</code>.
     * UID файла с логом ошибки
     */
    public UUID getJobErrorLogUid() {
        return (UUID) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_error_log_cval</code>.
     * Лог ошибки на обработке задачи
     */
    public void setJobErrorLogCval(String value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_error_log_cval</code>.
     * Лог ошибки на обработке задачи
     */
    public String getJobErrorLogCval() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_send_bool</code>.
     * Признак отправки задачи
     */
    public void setJobSendBool(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_send_bool</code>.
     * Признак отправки задачи
     */
    public Boolean getJobSendBool() {
        return (Boolean) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.create_dttm</code>.
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.create_dttm</code>.
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.modify_dttm</code>.
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.modify_dttm</code>.
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.action_ind</code>.
     */
    public void setActionInd(String value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.action_ind</code>.
     */
    public String getActionInd() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_result_file</code>.
     * Ссылка на файл результатов в файловом хранилище (fileLink)
     */
    public void setJobResultFile(String value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_result_file</code>.
     * Ссылка на файл результатов в файловом хранилище (fileLink)
     */
    public String getJobResultFile() {
        return (String) get(13);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_error_log_file</code>.
     * Ссылка на файл ошибок в файловом хранилище (fileLink)
     */
    public void setJobErrorLogFile(String value) {
        set(14, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_error_log_file</code>.
     * Ссылка на файл ошибок в файловом хранилище (fileLink)
     */
    public String getJobErrorLogFile() {
        return (String) get(14);
    }

    /**
     * Setter for
     * <code>passport_international.background_task.job_text_result</code>.
     * Описание результата обработки фоновой задачи
     */
    public void setJobTextResult(String value) {
        set(15, value);
    }

    /**
     * Getter for
     * <code>passport_international.background_task.job_text_result</code>.
     * Описание результата обработки фоновой задачи
     */
    public String getJobTextResult() {
        return (String) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record16 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, String, JSONB, Long, Boolean, Boolean, UUID, UUID, String, Boolean, OffsetDateTime, OffsetDateTime, String, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    @Override
    public Row16<Long, String, JSONB, Long, Boolean, Boolean, UUID, UUID, String, Boolean, OffsetDateTime, OffsetDateTime, String, String, String, String> valuesRow() {
        return (Row16) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return BackgroundTask.BACKGROUND_TASK.BACKGROUND_TASK_ID;
    }

    @Override
    public Field<String> field2() {
        return BackgroundTask.BACKGROUND_TASK.JOB_CODE;
    }

    @Override
    public Field<JSONB> field3() {
        return BackgroundTask.BACKGROUND_TASK.JOB_PARAMETERS_JSON;
    }

    @Override
    public Field<Long> field4() {
        return BackgroundTask.BACKGROUND_TASK.JOB_ID;
    }

    @Override
    public Field<Boolean> field5() {
        return BackgroundTask.BACKGROUND_TASK.JOB_ERROR_BOOL;
    }

    @Override
    public Field<Boolean> field6() {
        return BackgroundTask.BACKGROUND_TASK.JOB_DONE_BOOL;
    }

    @Override
    public Field<UUID> field7() {
        return BackgroundTask.BACKGROUND_TASK.JOB_RESULT_UID;
    }

    @Override
    public Field<UUID> field8() {
        return BackgroundTask.BACKGROUND_TASK.JOB_ERROR_LOG_UID;
    }

    @Override
    public Field<String> field9() {
        return BackgroundTask.BACKGROUND_TASK.JOB_ERROR_LOG_CVAL;
    }

    @Override
    public Field<Boolean> field10() {
        return BackgroundTask.BACKGROUND_TASK.JOB_SEND_BOOL;
    }

    @Override
    public Field<OffsetDateTime> field11() {
        return BackgroundTask.BACKGROUND_TASK.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field12() {
        return BackgroundTask.BACKGROUND_TASK.MODIFY_DTTM;
    }

    @Override
    public Field<String> field13() {
        return BackgroundTask.BACKGROUND_TASK.ACTION_IND;
    }

    @Override
    public Field<String> field14() {
        return BackgroundTask.BACKGROUND_TASK.JOB_RESULT_FILE;
    }

    @Override
    public Field<String> field15() {
        return BackgroundTask.BACKGROUND_TASK.JOB_ERROR_LOG_FILE;
    }

    @Override
    public Field<String> field16() {
        return BackgroundTask.BACKGROUND_TASK.JOB_TEXT_RESULT;
    }

    @Override
    public Long component1() {
        return getBackgroundTaskId();
    }

    @Override
    public String component2() {
        return getJobCode();
    }

    @Override
    public JSONB component3() {
        return getJobParametersJson();
    }

    @Override
    public Long component4() {
        return getJobId();
    }

    @Override
    public Boolean component5() {
        return getJobErrorBool();
    }

    @Override
    public Boolean component6() {
        return getJobDoneBool();
    }

    @Override
    public UUID component7() {
        return getJobResultUid();
    }

    @Override
    public UUID component8() {
        return getJobErrorLogUid();
    }

    @Override
    public String component9() {
        return getJobErrorLogCval();
    }

    @Override
    public Boolean component10() {
        return getJobSendBool();
    }

    @Override
    public OffsetDateTime component11() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component12() {
        return getModifyDttm();
    }

    @Override
    public String component13() {
        return getActionInd();
    }

    @Override
    public String component14() {
        return getJobResultFile();
    }

    @Override
    public String component15() {
        return getJobErrorLogFile();
    }

    @Override
    public String component16() {
        return getJobTextResult();
    }

    @Override
    public Long value1() {
        return getBackgroundTaskId();
    }

    @Override
    public String value2() {
        return getJobCode();
    }

    @Override
    public JSONB value3() {
        return getJobParametersJson();
    }

    @Override
    public Long value4() {
        return getJobId();
    }

    @Override
    public Boolean value5() {
        return getJobErrorBool();
    }

    @Override
    public Boolean value6() {
        return getJobDoneBool();
    }

    @Override
    public UUID value7() {
        return getJobResultUid();
    }

    @Override
    public UUID value8() {
        return getJobErrorLogUid();
    }

    @Override
    public String value9() {
        return getJobErrorLogCval();
    }

    @Override
    public Boolean value10() {
        return getJobSendBool();
    }

    @Override
    public OffsetDateTime value11() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value12() {
        return getModifyDttm();
    }

    @Override
    public String value13() {
        return getActionInd();
    }

    @Override
    public String value14() {
        return getJobResultFile();
    }

    @Override
    public String value15() {
        return getJobErrorLogFile();
    }

    @Override
    public String value16() {
        return getJobTextResult();
    }

    @Override
    public BackgroundTaskRecord value1(Long value) {
        setBackgroundTaskId(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value2(String value) {
        setJobCode(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value3(JSONB value) {
        setJobParametersJson(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value4(Long value) {
        setJobId(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value5(Boolean value) {
        setJobErrorBool(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value6(Boolean value) {
        setJobDoneBool(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value7(UUID value) {
        setJobResultUid(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value8(UUID value) {
        setJobErrorLogUid(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value9(String value) {
        setJobErrorLogCval(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value10(Boolean value) {
        setJobSendBool(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value11(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value12(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value13(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value14(String value) {
        setJobResultFile(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value15(String value) {
        setJobErrorLogFile(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord value16(String value) {
        setJobTextResult(value);
        return this;
    }

    @Override
    public BackgroundTaskRecord values(Long value1, String value2, JSONB value3, Long value4, Boolean value5, Boolean value6, UUID value7, UUID value8, String value9, Boolean value10, OffsetDateTime value11, OffsetDateTime value12, String value13, String value14, String value15, String value16) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BackgroundTaskRecord
     */
    public BackgroundTaskRecord() {
        super(BackgroundTask.BACKGROUND_TASK);
    }

    /**
     * Create a detached, initialised BackgroundTaskRecord
     */
    public BackgroundTaskRecord(Long backgroundTaskId, String jobCode, JSONB jobParametersJson, Long jobId, Boolean jobErrorBool, Boolean jobDoneBool, UUID jobResultUid, UUID jobErrorLogUid, String jobErrorLogCval, Boolean jobSendBool, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, String jobResultFile, String jobErrorLogFile, String jobTextResult) {
        super(BackgroundTask.BACKGROUND_TASK);

        setBackgroundTaskId(backgroundTaskId);
        setJobCode(jobCode);
        setJobParametersJson(jobParametersJson);
        setJobId(jobId);
        setJobErrorBool(jobErrorBool);
        setJobDoneBool(jobDoneBool);
        setJobResultUid(jobResultUid);
        setJobErrorLogUid(jobErrorLogUid);
        setJobErrorLogCval(jobErrorLogCval);
        setJobSendBool(jobSendBool);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setJobResultFile(jobResultFile);
        setJobErrorLogFile(jobErrorLogFile);
        setJobTextResult(jobTextResult);
        resetChangedOnNotNull();
    }
}
