/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreCounterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица счётчиков номеров дел
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreCounter extends TableImpl<CoreCounterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_counter</code>
     */
    public static final CoreCounter CORE_COUNTER = new CoreCounter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreCounterRecord> getRecordType() {
        return CoreCounterRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_counter.core_counter_id</code>.
     * Идентификатор счётчика
     */
    public final TableField<CoreCounterRecord, Long> CORE_COUNTER_ID = createField(DSL.name("core_counter_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор счётчика");

    /**
     * The column
     * <code>passport_international.core_counter.department_code</code>. Код
     * департамента
     */
    public final TableField<CoreCounterRecord, String> DEPARTMENT_CODE = createField(DSL.name("department_code"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Код департамента");

    /**
     * The column <code>passport_international.core_counter.region_code</code>.
     * Код региона
     */
    public final TableField<CoreCounterRecord, String> REGION_CODE = createField(DSL.name("region_code"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Код региона");

    /**
     * The column <code>passport_international.core_counter.issue_year</code>.
     * Год
     */
    public final TableField<CoreCounterRecord, Integer> ISSUE_YEAR = createField(DSL.name("issue_year"), SQLDataType.INTEGER.nullable(false), this, "Год");

    /**
     * The column
     * <code>passport_international.core_counter.operation_code</code>. Код
     * операции
     */
    public final TableField<CoreCounterRecord, String> OPERATION_CODE = createField(DSL.name("operation_code"), SQLDataType.VARCHAR(128).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Код операции");

    /**
     * The column
     * <code>passport_international.core_counter.last_serial_num</code>.
     * Значение счётчика
     */
    public final TableField<CoreCounterRecord, Long> LAST_SERIAL_NUM = createField(DSL.name("last_serial_num"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "Значение счётчика");

    /**
     * The column <code>passport_international.core_counter.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<CoreCounterRecord, LocalDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("clock_timestamp()"), SQLDataType.LOCALDATETIME)), this, "Дата время вставки записи в таблицу");

    /**
     * The column <code>passport_international.core_counter.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<CoreCounterRecord, LocalDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("clock_timestamp()"), SQLDataType.LOCALDATETIME)), this, "Дата время последнего изменения записи");

    /**
     * The column <code>passport_international.core_counter.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<CoreCounterRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    private CoreCounter(Name alias, Table<CoreCounterRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreCounter(Name alias, Table<CoreCounterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица счётчиков номеров дел"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_counter</code> table
     * reference
     */
    public CoreCounter(String alias) {
        this(DSL.name(alias), CORE_COUNTER);
    }

    /**
     * Create an aliased <code>passport_international.core_counter</code> table
     * reference
     */
    public CoreCounter(Name alias) {
        this(alias, CORE_COUNTER);
    }

    /**
     * Create a <code>passport_international.core_counter</code> table reference
     */
    public CoreCounter() {
        this(DSL.name("core_counter"), null);
    }

    public <O extends Record> CoreCounter(Table<O> child, ForeignKey<O, CoreCounterRecord> key) {
        super(child, key, CORE_COUNTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_COUNTER_LAST_SERIAL_NUM_IX);
    }

    @Override
    public Identity<CoreCounterRecord, Long> getIdentity() {
        return (Identity<CoreCounterRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreCounterRecord> getPrimaryKey() {
        return Keys.CORE_COUNTER_PK;
    }

    @Override
    public List<UniqueKey<CoreCounterRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CORE_COUNTER_UQ);
    }

    @Override
    public CoreCounter as(String alias) {
        return new CoreCounter(DSL.name(alias), this);
    }

    @Override
    public CoreCounter as(Name alias) {
        return new CoreCounter(alias, this);
    }

    @Override
    public CoreCounter as(Table<?> alias) {
        return new CoreCounter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreCounter rename(String name) {
        return new CoreCounter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreCounter rename(Name name) {
        return new CoreCounter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreCounter rename(Table<?> name) {
        return new CoreCounter(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Integer, String, Long, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super Integer, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super Integer, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
