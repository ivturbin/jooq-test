/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewDestructionActHistoryRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewDestructionActHistory extends TableImpl<ViewDestructionActHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_destruction_act_history</code>
     */
    public static final ViewDestructionActHistory VIEW_DESTRUCTION_ACT_HISTORY = new ViewDestructionActHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewDestructionActHistoryRecord> getRecordType() {
        return ViewDestructionActHistoryRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.destruction_act_history_id</code>.
     */
    public final TableField<ViewDestructionActHistoryRecord, Long> DESTRUCTION_ACT_HISTORY_ID = createField(DSL.name("destruction_act_history_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.core_doc_id</code>.
     */
    public final TableField<ViewDestructionActHistoryRecord, Long> CORE_DOC_ID = createField(DSL.name("core_doc_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<ViewDestructionActHistoryRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<ViewDestructionActHistoryRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<ViewDestructionActHistoryRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<ViewDestructionActHistoryRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<ViewDestructionActHistoryRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<ViewDestructionActHistoryRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.view_destruction_act_history.previous_doc_status_id</code>.
     */
    public final TableField<ViewDestructionActHistoryRecord, Long> PREVIOUS_DOC_STATUS_ID = createField(DSL.name("previous_doc_status_id"), SQLDataType.BIGINT, this, "");

    private ViewDestructionActHistory(Name alias, Table<ViewDestructionActHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewDestructionActHistory(Name alias, Table<ViewDestructionActHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_destruction_act_history" as  SELECT destruction_act_history.destruction_act_id AS destruction_act_history_id,
         destruction_act_history.core_document_id AS core_doc_id,
         destruction_act_history.src_id,
         destruction_act_history.create_dttm,
         destruction_act_history.modify_dttm,
         destruction_act_history.exp_dttm,
         destruction_act_history.eff_dttm,
         destruction_act_history.action_ind,
         destruction_act_history.previous_doc_status_id
        FROM destruction_act_history;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_destruction_act_history</code> table
     * reference
     */
    public ViewDestructionActHistory(String alias) {
        this(DSL.name(alias), VIEW_DESTRUCTION_ACT_HISTORY);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_destruction_act_history</code> table
     * reference
     */
    public ViewDestructionActHistory(Name alias) {
        this(alias, VIEW_DESTRUCTION_ACT_HISTORY);
    }

    /**
     * Create a <code>passport_international.view_destruction_act_history</code>
     * table reference
     */
    public ViewDestructionActHistory() {
        this(DSL.name("view_destruction_act_history"), null);
    }

    public <O extends Record> ViewDestructionActHistory(Table<O> child, ForeignKey<O, ViewDestructionActHistoryRecord> key) {
        super(child, key, VIEW_DESTRUCTION_ACT_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewDestructionActHistory as(String alias) {
        return new ViewDestructionActHistory(DSL.name(alias), this);
    }

    @Override
    public ViewDestructionActHistory as(Name alias) {
        return new ViewDestructionActHistory(alias, this);
    }

    @Override
    public ViewDestructionActHistory as(Table<?> alias) {
        return new ViewDestructionActHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewDestructionActHistory rename(String name) {
        return new ViewDestructionActHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewDestructionActHistory rename(Name name) {
        return new ViewDestructionActHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewDestructionActHistory rename(Table<?> name) {
        return new ViewDestructionActHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
