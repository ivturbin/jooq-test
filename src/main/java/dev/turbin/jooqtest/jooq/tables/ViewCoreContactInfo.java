/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCoreContactInfoRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCoreContactInfo extends TableImpl<ViewCoreContactInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_contact_info</code>
     */
    public static final ViewCoreContactInfo VIEW_CORE_CONTACT_INFO = new ViewCoreContactInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCoreContactInfoRecord> getRecordType() {
        return ViewCoreContactInfoRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_contact_info.core_contact_info_id</code>.
     */
    public final TableField<ViewCoreContactInfoRecord, Long> CORE_CONTACT_INFO_ID = createField(DSL.name("core_contact_info_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.version</code>.
     * реализация оптимистической блокировки
     */
    public final TableField<ViewCoreContactInfoRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "реализация оптимистической блокировки");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.email</code>.
     * Электронная почта
     */
    public final TableField<ViewCoreContactInfoRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "Электронная почта");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.phone_cval</code>.
     * Телефон
     */
    public final TableField<ViewCoreContactInfoRecord, String> PHONE_CVAL = createField(DSL.name("phone_cval"), SQLDataType.CLOB, this, "Телефон");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.fax_cval</code>. Факс
     */
    public final TableField<ViewCoreContactInfoRecord, String> FAX_CVAL = createField(DSL.name("fax_cval"), SQLDataType.CLOB, this, "Факс");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.contact_info_desc</code>.
     * Дополнительная контактная информация
     */
    public final TableField<ViewCoreContactInfoRecord, String> CONTACT_INFO_DESC = createField(DSL.name("contact_info_desc"), SQLDataType.CLOB, this, "Дополнительная контактная информация");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.src_id</code>.
     * Источник
     */
    public final TableField<ViewCoreContactInfoRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "Источник");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.create_dttm</code>.
     * Дата вставки записи
     */
    public final TableField<ViewCoreContactInfoRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата вставки записи");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.modify_dttm</code>.
     * Дата последнего изменения записи
     */
    public final TableField<ViewCoreContactInfoRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата последнего изменения записи");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.action_ind</code>.
     * Индикатор операции
     */
    public final TableField<ViewCoreContactInfoRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "Индикатор операции");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.eff_dttm</code>. Дата
     * начала действия периода
     */
    public final TableField<ViewCoreContactInfoRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата начала действия периода");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.exp_dttm</code>. Дата
     * окончания действия периода
     */
    public final TableField<ViewCoreContactInfoRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата окончания действия периода");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.core_person_doc_id</code>.
     */
    public final TableField<ViewCoreContactInfoRecord, Long> CORE_PERSON_DOC_ID = createField(DSL.name("core_person_doc_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_contact_info.agree_bool</code>.
     */
    public final TableField<ViewCoreContactInfoRecord, Boolean> AGREE_BOOL = createField(DSL.name("agree_bool"), SQLDataType.BOOLEAN, this, "");

    private ViewCoreContactInfo(Name alias, Table<ViewCoreContactInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCoreContactInfo(Name alias, Table<ViewCoreContactInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_contact_info" as  SELECT core_contact_info.contact_info_id AS core_contact_info_id,
         core_contact_info.version,
         core_contact_info.email,
         core_contact_info.phone AS phone_cval,
         core_contact_info.fax_cval,
         core_contact_info.contact_info_desc,
         core_contact_info.src_id,
         core_contact_info.create_dttm,
         core_contact_info.modify_dttm,
         core_contact_info.action_ind,
         core_contact_info.eff_dttm,
         core_contact_info.exp_dttm,
         core_contact_info.core_person_document_id AS core_person_doc_id,
         core_contact_info.agree AS agree_bool
        FROM core_contact_info;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_core_contact_info</code> table
     * reference
     */
    public ViewCoreContactInfo(String alias) {
        this(DSL.name(alias), VIEW_CORE_CONTACT_INFO);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_core_contact_info</code> table
     * reference
     */
    public ViewCoreContactInfo(Name alias) {
        this(alias, VIEW_CORE_CONTACT_INFO);
    }

    /**
     * Create a <code>passport_international.view_core_contact_info</code> table
     * reference
     */
    public ViewCoreContactInfo() {
        this(DSL.name("view_core_contact_info"), null);
    }

    public <O extends Record> ViewCoreContactInfo(Table<O> child, ForeignKey<O, ViewCoreContactInfoRecord> key) {
        super(child, key, VIEW_CORE_CONTACT_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCoreContactInfo as(String alias) {
        return new ViewCoreContactInfo(DSL.name(alias), this);
    }

    @Override
    public ViewCoreContactInfo as(Name alias) {
        return new ViewCoreContactInfo(alias, this);
    }

    @Override
    public ViewCoreContactInfo as(Table<?> alias) {
        return new ViewCoreContactInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreContactInfo rename(String name) {
        return new ViewCoreContactInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreContactInfo rename(Name name) {
        return new ViewCoreContactInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreContactInfo rename(Table<?> name) {
        return new ViewCoreContactInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Integer, String, String, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, Long, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
