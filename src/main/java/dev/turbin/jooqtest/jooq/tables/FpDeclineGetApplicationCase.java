/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpDeclineGetApplicationCaseRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Дело об отказе приеме документов
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpDeclineGetApplicationCase extends TableImpl<FpDeclineGetApplicationCaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_decline_get_application_case</code>
     */
    public static final FpDeclineGetApplicationCase FP_DECLINE_GET_APPLICATION_CASE = new FpDeclineGetApplicationCase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpDeclineGetApplicationCaseRecord> getRecordType() {
        return FpDeclineGetApplicationCaseRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.fp_decline_get_application_case_id</code>.
     * Индефикатор базового дела
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, Long> FP_DECLINE_GET_APPLICATION_CASE_ID = createField(DSL.name("fp_decline_get_application_case_id"), SQLDataType.BIGINT.nullable(false), this, "Индефикатор базового дела");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.reason_id</code>.
     * Причина отказа
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, Long> REASON_ID = createField(DSL.name("reason_id"), SQLDataType.BIGINT, this, "Причина отказа");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.signer_user</code>.
     * Подписывающий сотрудник
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, String> SIGNER_USER = createField(DSL.name("signer_user"), SQLDataType.VARCHAR(255), this, "Подписывающий сотрудник");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.issued_dt</code>.
     * Дата выдачи справки
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, LocalDate> ISSUED_DT = createField(DSL.name("issued_dt"), SQLDataType.LOCALDATE, this, "Дата выдачи справки");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.fp_decline_get_application_case.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<FpDeclineGetApplicationCaseRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    private FpDeclineGetApplicationCase(Name alias, Table<FpDeclineGetApplicationCaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpDeclineGetApplicationCase(Name alias, Table<FpDeclineGetApplicationCaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Дело об отказе приеме документов"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_decline_get_application_case</code> table
     * reference
     */
    public FpDeclineGetApplicationCase(String alias) {
        this(DSL.name(alias), FP_DECLINE_GET_APPLICATION_CASE);
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_decline_get_application_case</code> table
     * reference
     */
    public FpDeclineGetApplicationCase(Name alias) {
        this(alias, FP_DECLINE_GET_APPLICATION_CASE);
    }

    /**
     * Create a
     * <code>passport_international.fp_decline_get_application_case</code> table
     * reference
     */
    public FpDeclineGetApplicationCase() {
        this(DSL.name("fp_decline_get_application_case"), null);
    }

    public <O extends Record> FpDeclineGetApplicationCase(Table<O> child, ForeignKey<O, FpDeclineGetApplicationCaseRecord> key) {
        super(child, key, FP_DECLINE_GET_APPLICATION_CASE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<FpDeclineGetApplicationCaseRecord> getPrimaryKey() {
        return Keys.FP_DECLINE_GET_APPLICATION_CASE_ID_PK;
    }

    @Override
    public List<ForeignKey<FpDeclineGetApplicationCaseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_DECLINE_GET_APPLICATION_CASE__FP_DECLINE_GET_APPLICATION_CASE_FP_CASE_ID);
    }

    private transient FpCase _fpCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case</code> table.
     */
    public FpCase fpCase() {
        if (_fpCase == null)
            _fpCase = new FpCase(this, Keys.FP_DECLINE_GET_APPLICATION_CASE__FP_DECLINE_GET_APPLICATION_CASE_FP_CASE_ID);

        return _fpCase;
    }

    @Override
    public FpDeclineGetApplicationCase as(String alias) {
        return new FpDeclineGetApplicationCase(DSL.name(alias), this);
    }

    @Override
    public FpDeclineGetApplicationCase as(Name alias) {
        return new FpDeclineGetApplicationCase(alias, this);
    }

    @Override
    public FpDeclineGetApplicationCase as(Table<?> alias) {
        return new FpDeclineGetApplicationCase(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpDeclineGetApplicationCase rename(String name) {
        return new FpDeclineGetApplicationCase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpDeclineGetApplicationCase rename(Name name) {
        return new FpDeclineGetApplicationCase(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpDeclineGetApplicationCase rename(Table<?> name) {
        return new FpDeclineGetApplicationCase(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, String, LocalDate, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super String, ? super LocalDate, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super String, ? super LocalDate, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
