/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewFpaPersonChangeInfoRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewFpaPersonChangeInfo extends TableImpl<ViewFpaPersonChangeInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_fpa_person_change_info</code>
     */
    public static final ViewFpaPersonChangeInfo VIEW_FPA_PERSON_CHANGE_INFO = new ViewFpaPersonChangeInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewFpaPersonChangeInfoRecord> getRecordType() {
        return ViewFpaPersonChangeInfoRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.fpa_person_change_info_id</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, Long> FPA_PERSON_CHANGE_INFO_ID = createField(DSL.name("fpa_person_change_info_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.first_name</code>.
     * Имя
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(256), this, "Имя");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.middle_name</code>.
     * Отчество
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(256), this, "Отчество");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.last_name</code>.
     * Фамилия
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(256), this, "Фамилия");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.sex_id</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, Long> SEX_ID = createField(DSL.name("sex_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.change_dt</code>.
     * Дата изменения
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, LocalDate> CHANGE_DT = createField(DSL.name("change_dt"), SQLDataType.LOCALDATE, this, "Дата изменения");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.place_change_desc</code>.
     * Место изменения
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, String> PLACE_CHANGE_DESC = createField(DSL.name("place_change_desc"), SQLDataType.CLOB, this, "Место изменения");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.core_person_id</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, Long> CORE_PERSON_ID = createField(DSL.name("core_person_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.src_id</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.create_dttm</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_change_info.modify_dttm</code>.
     */
    public final TableField<ViewFpaPersonChangeInfoRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private ViewFpaPersonChangeInfo(Name alias, Table<ViewFpaPersonChangeInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewFpaPersonChangeInfo(Name alias, Table<ViewFpaPersonChangeInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_fpa_person_change_info" as  SELECT fp_person_change_info.person_info_change_id AS fpa_person_change_info_id,
         fp_person_change_info.first_name,
         fp_person_change_info.middle_name,
         fp_person_change_info.last_name,
         fp_person_change_info.gender_id AS sex_id,
         fp_person_change_info.change_dt,
         fp_person_change_info.place_change_desc,
         fp_person_change_info.person_id AS core_person_id,
         fp_person_change_info.src_id,
         fp_person_change_info.create_dttm,
         fp_person_change_info.modify_dttm
        FROM fp_person_change_info;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_person_change_info</code> table
     * reference
     */
    public ViewFpaPersonChangeInfo(String alias) {
        this(DSL.name(alias), VIEW_FPA_PERSON_CHANGE_INFO);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_person_change_info</code> table
     * reference
     */
    public ViewFpaPersonChangeInfo(Name alias) {
        this(alias, VIEW_FPA_PERSON_CHANGE_INFO);
    }

    /**
     * Create a <code>passport_international.view_fpa_person_change_info</code>
     * table reference
     */
    public ViewFpaPersonChangeInfo() {
        this(DSL.name("view_fpa_person_change_info"), null);
    }

    public <O extends Record> ViewFpaPersonChangeInfo(Table<O> child, ForeignKey<O, ViewFpaPersonChangeInfoRecord> key) {
        super(child, key, VIEW_FPA_PERSON_CHANGE_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewFpaPersonChangeInfo as(String alias) {
        return new ViewFpaPersonChangeInfo(DSL.name(alias), this);
    }

    @Override
    public ViewFpaPersonChangeInfo as(Name alias) {
        return new ViewFpaPersonChangeInfo(alias, this);
    }

    @Override
    public ViewFpaPersonChangeInfo as(Table<?> alias) {
        return new ViewFpaPersonChangeInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonChangeInfo rename(String name) {
        return new ViewFpaPersonChangeInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonChangeInfo rename(Name name) {
        return new ViewFpaPersonChangeInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonChangeInfo rename(Table<?> name) {
        return new ViewFpaPersonChangeInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, Long, LocalDate, String, Long, Long, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super LocalDate, ? super String, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super LocalDate, ? super String, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
