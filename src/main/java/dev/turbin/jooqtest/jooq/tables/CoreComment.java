/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreCommentRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Комментарии к делу
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreComment extends TableImpl<CoreCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_comment</code>
     */
    public static final CoreComment CORE_COMMENT = new CoreComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreCommentRecord> getRecordType() {
        return CoreCommentRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_comment.core_comment_id</code>.
     * Идентификатор сообщения
     */
    public final TableField<CoreCommentRecord, Long> CORE_COMMENT_ID = createField(DSL.name("core_comment_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор сообщения");

    /**
     * The column <code>passport_international.core_comment.core_case_id</code>.
     * id базового объекта учета - дела или заявления
     */
    public final TableField<CoreCommentRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT.nullable(false), this, "id базового объекта учета - дела или заявления");

    /**
     * The column <code>passport_international.core_comment.create_user</code>.
     * Автор сообщения (для входящих - N/D, для исходящих - оператор, ответивший
     * на сообщение)
     */
    public final TableField<CoreCommentRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Автор сообщения (для входящих - N/D, для исходящих - оператор, ответивший на сообщение)");

    /**
     * The column <code>passport_international.core_comment.comment_desc</code>.
     * Текст сообщения
     */
    public final TableField<CoreCommentRecord, String> COMMENT_DESC = createField(DSL.name("comment_desc"), SQLDataType.CLOB.nullable(false), this, "Текст сообщения");

    /**
     * The column <code>passport_international.core_comment.create_dttm</code>.
     * Дата и время создания записи
     */
    public final TableField<CoreCommentRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата и время создания записи");

    /**
     * The column <code>passport_international.core_comment.modify_dttm</code>.
     * Дата и время изменения записи
     */
    public final TableField<CoreCommentRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата и время изменения записи");

    /**
     * The column <code>passport_international.core_comment.action_ind</code>.
     */
    public final TableField<CoreCommentRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>passport_international.core_comment.supplier_category_id</code>.
     * Идентификатор поставщика, в системе которого сформирован комментарий,
     * справочник НСИ providerType ЕПГУ - 2562679063982380817 МВД -
     * 2562679063185463055
     */
    public final TableField<CoreCommentRecord, Long> SUPPLIER_CATEGORY_ID = createField(DSL.name("supplier_category_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор поставщика, в системе которого сформирован комментарий, справочник НСИ providerType ЕПГУ - 2562679063982380817 МВД - 2562679063185463055");

    /**
     * The column
     * <code>passport_international.core_comment.comment_type_id</code>.
     * Входящее без ответа - 1 Входящее с ответом - 2 Исходящее - 3 Комментарий
     * - 4
     */
    public final TableField<CoreCommentRecord, Long> COMMENT_TYPE_ID = createField(DSL.name("comment_type_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Входящее без ответа - 1 Входящее с ответом - 2 Исходящее - 3 Комментарий - 4");

    private CoreComment(Name alias, Table<CoreCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreComment(Name alias, Table<CoreCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Комментарии к делу"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_comment</code> table
     * reference
     */
    public CoreComment(String alias) {
        this(DSL.name(alias), CORE_COMMENT);
    }

    /**
     * Create an aliased <code>passport_international.core_comment</code> table
     * reference
     */
    public CoreComment(Name alias) {
        this(alias, CORE_COMMENT);
    }

    /**
     * Create a <code>passport_international.core_comment</code> table reference
     */
    public CoreComment() {
        this(DSL.name("core_comment"), null);
    }

    public <O extends Record> CoreComment(Table<O> child, ForeignKey<O, CoreCommentRecord> key) {
        super(child, key, CORE_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_COMMENT_CORE_CASE_IX, Indexes.CORE_COMMENT_CREATE_DTTM_IX);
    }

    @Override
    public Identity<CoreCommentRecord, Long> getIdentity() {
        return (Identity<CoreCommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreCommentRecord> getPrimaryKey() {
        return Keys.CORE_COMMENT_PK;
    }

    @Override
    public CoreComment as(String alias) {
        return new CoreComment(DSL.name(alias), this);
    }

    @Override
    public CoreComment as(Name alias) {
        return new CoreComment(alias, this);
    }

    @Override
    public CoreComment as(Table<?> alias) {
        return new CoreComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreComment rename(String name) {
        return new CoreComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreComment rename(Name name) {
        return new CoreComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreComment rename(Table<?> name) {
        return new CoreComment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, String, String, OffsetDateTime, OffsetDateTime, String, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
