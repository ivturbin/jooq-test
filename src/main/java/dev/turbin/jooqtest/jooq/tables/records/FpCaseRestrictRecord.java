/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.FpCaseRestrict;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Сведения о накладываемом ограничении выезда
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseRestrictRecord extends UpdatableRecordImpl<FpCaseRestrictRecord> implements Record14<Long, LocalDate, LocalDate, LocalDate, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.restrict_id</code>.
     * Идентификатор дела
     */
    public void setRestrictId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.restrict_id</code>.
     * Идентификатор дела
     */
    public Long getRestrictId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.fpr_doc_issue_dt</code>.
     * Дата выдачи документа, подтверждающего права в отношении
     * несовершеннолетнего лица
     */
    public void setFprDocIssueDt(LocalDate value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.fpr_doc_issue_dt</code>.
     * Дата выдачи документа, подтверждающего права в отношении
     * несовершеннолетнего лица
     */
    public LocalDate getFprDocIssueDt() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.fpr_start_dt</code>. Дата
     * начала ограничения
     */
    public void setFprStartDt(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.fpr_start_dt</code>. Дата
     * начала ограничения
     */
    public LocalDate getFprStartDt() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.fpr_end_dt</code>. Дата
     * окончания ограничения
     */
    public void setFprEndDt(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.fpr_end_dt</code>. Дата
     * окончания ограничения
     */
    public LocalDate getFprEndDt() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.fpr_doc_no</code>. Номер
     * документа, подтверждающего права в отношении несовершеннолетнего лица
     */
    public void setFprDocNo(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.fpr_doc_no</code>. Номер
     * документа, подтверждающего права в отношении несовершеннолетнего лица
     */
    public String getFprDocNo() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.fpr_doc_type</code>. Тип
     * документа, подтверждающего права в отношении несовершеннолетнего лица
     */
    public void setFprDocType(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.fpr_doc_type</code>. Тип
     * документа, подтверждающего права в отношении несовершеннолетнего лица
     */
    public String getFprDocType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>passport_international.fp_case_restrict.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public void setSrcId(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_restrict.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public Long getSrcId() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public void setActionInd(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public String getActionInd() {
        return (String) get(9);
    }

    /**
     * Setter for <code>passport_international.fp_case_restrict.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public void setEffDttm(OffsetDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_restrict.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(10);
    }

    /**
     * Setter for <code>passport_international.fp_case_restrict.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public void setExpDttm(OffsetDateTime value) {
        set(11, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_restrict.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(11);
    }

    /**
     * Setter for <code>passport_international.fp_case_restrict.comment</code>.
     * Комментарий
     */
    public void setComment(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>passport_international.fp_case_restrict.comment</code>.
     * Комментарий
     */
    public String getComment() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_restrict.restrict_status</code>.
     * Статус сигнала
     */
    public void setRestrictStatus(Long value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_restrict.restrict_status</code>.
     * Статус сигнала
     */
    public Long getRestrictStatus() {
        return (Long) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, LocalDate, LocalDate, LocalDate, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, String, Long> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Long, LocalDate, LocalDate, LocalDate, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, String, Long> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FpCaseRestrict.FP_CASE_RESTRICT.RESTRICT_ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return FpCaseRestrict.FP_CASE_RESTRICT.FPR_DOC_ISSUE_DT;
    }

    @Override
    public Field<LocalDate> field3() {
        return FpCaseRestrict.FP_CASE_RESTRICT.FPR_START_DT;
    }

    @Override
    public Field<LocalDate> field4() {
        return FpCaseRestrict.FP_CASE_RESTRICT.FPR_END_DT;
    }

    @Override
    public Field<String> field5() {
        return FpCaseRestrict.FP_CASE_RESTRICT.FPR_DOC_NO;
    }

    @Override
    public Field<String> field6() {
        return FpCaseRestrict.FP_CASE_RESTRICT.FPR_DOC_TYPE;
    }

    @Override
    public Field<Long> field7() {
        return FpCaseRestrict.FP_CASE_RESTRICT.SRC_ID;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return FpCaseRestrict.FP_CASE_RESTRICT.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field9() {
        return FpCaseRestrict.FP_CASE_RESTRICT.MODIFY_DTTM;
    }

    @Override
    public Field<String> field10() {
        return FpCaseRestrict.FP_CASE_RESTRICT.ACTION_IND;
    }

    @Override
    public Field<OffsetDateTime> field11() {
        return FpCaseRestrict.FP_CASE_RESTRICT.EFF_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field12() {
        return FpCaseRestrict.FP_CASE_RESTRICT.EXP_DTTM;
    }

    @Override
    public Field<String> field13() {
        return FpCaseRestrict.FP_CASE_RESTRICT.COMMENT;
    }

    @Override
    public Field<Long> field14() {
        return FpCaseRestrict.FP_CASE_RESTRICT.RESTRICT_STATUS;
    }

    @Override
    public Long component1() {
        return getRestrictId();
    }

    @Override
    public LocalDate component2() {
        return getFprDocIssueDt();
    }

    @Override
    public LocalDate component3() {
        return getFprStartDt();
    }

    @Override
    public LocalDate component4() {
        return getFprEndDt();
    }

    @Override
    public String component5() {
        return getFprDocNo();
    }

    @Override
    public String component6() {
        return getFprDocType();
    }

    @Override
    public Long component7() {
        return getSrcId();
    }

    @Override
    public OffsetDateTime component8() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component9() {
        return getModifyDttm();
    }

    @Override
    public String component10() {
        return getActionInd();
    }

    @Override
    public OffsetDateTime component11() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime component12() {
        return getExpDttm();
    }

    @Override
    public String component13() {
        return getComment();
    }

    @Override
    public Long component14() {
        return getRestrictStatus();
    }

    @Override
    public Long value1() {
        return getRestrictId();
    }

    @Override
    public LocalDate value2() {
        return getFprDocIssueDt();
    }

    @Override
    public LocalDate value3() {
        return getFprStartDt();
    }

    @Override
    public LocalDate value4() {
        return getFprEndDt();
    }

    @Override
    public String value5() {
        return getFprDocNo();
    }

    @Override
    public String value6() {
        return getFprDocType();
    }

    @Override
    public Long value7() {
        return getSrcId();
    }

    @Override
    public OffsetDateTime value8() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value9() {
        return getModifyDttm();
    }

    @Override
    public String value10() {
        return getActionInd();
    }

    @Override
    public OffsetDateTime value11() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime value12() {
        return getExpDttm();
    }

    @Override
    public String value13() {
        return getComment();
    }

    @Override
    public Long value14() {
        return getRestrictStatus();
    }

    @Override
    public FpCaseRestrictRecord value1(Long value) {
        setRestrictId(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value2(LocalDate value) {
        setFprDocIssueDt(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value3(LocalDate value) {
        setFprStartDt(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value4(LocalDate value) {
        setFprEndDt(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value5(String value) {
        setFprDocNo(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value6(String value) {
        setFprDocType(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value7(Long value) {
        setSrcId(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value8(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value9(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value10(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value11(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value12(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value13(String value) {
        setComment(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord value14(Long value) {
        setRestrictStatus(value);
        return this;
    }

    @Override
    public FpCaseRestrictRecord values(Long value1, LocalDate value2, LocalDate value3, LocalDate value4, String value5, String value6, Long value7, OffsetDateTime value8, OffsetDateTime value9, String value10, OffsetDateTime value11, OffsetDateTime value12, String value13, Long value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FpCaseRestrictRecord
     */
    public FpCaseRestrictRecord() {
        super(FpCaseRestrict.FP_CASE_RESTRICT);
    }

    /**
     * Create a detached, initialised FpCaseRestrictRecord
     */
    public FpCaseRestrictRecord(Long restrictId, LocalDate fprDocIssueDt, LocalDate fprStartDt, LocalDate fprEndDt, String fprDocNo, String fprDocType, Long srcId, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, OffsetDateTime effDttm, OffsetDateTime expDttm, String comment, Long restrictStatus) {
        super(FpCaseRestrict.FP_CASE_RESTRICT);

        setRestrictId(restrictId);
        setFprDocIssueDt(fprDocIssueDt);
        setFprStartDt(fprStartDt);
        setFprEndDt(fprEndDt);
        setFprDocNo(fprDocNo);
        setFprDocType(fprDocType);
        setSrcId(srcId);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setEffDttm(effDttm);
        setExpDttm(expDttm);
        setComment(comment);
        setRestrictStatus(restrictStatus);
        resetChangedOnNotNull();
    }
}
