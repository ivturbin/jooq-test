/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpPersonAddressRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Адресс ФЛ в модуле заграна
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpPersonAddress extends TableImpl<FpPersonAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_person_address</code>
     */
    public static final FpPersonAddress FP_PERSON_ADDRESS = new FpPersonAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpPersonAddressRecord> getRecordType() {
        return FpPersonAddressRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_person_address.fp_person_address_id</code>.
     */
    public final TableField<FpPersonAddressRecord, Long> FP_PERSON_ADDRESS_ID = createField(DSL.name("fp_person_address_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>passport_international.fp_person_address.core_person_address_id</code>.
     * Индефиктаор адресса в модуле Рег.учета
     */
    public final TableField<FpPersonAddressRecord, Long> CORE_PERSON_ADDRESS_ID = createField(DSL.name("core_person_address_id"), SQLDataType.BIGINT.nullable(false), this, "Индефиктаор адресса в модуле Рег.учета");

    /**
     * The column
     * <code>passport_international.fp_person_address.address_type_id</code>.
     * Тип адреса
     */
    public final TableField<FpPersonAddressRecord, Long> ADDRESS_TYPE_ID = createField(DSL.name("address_type_id"), SQLDataType.BIGINT.nullable(false), this, "Тип адреса");

    /**
     * The column
     * <code>passport_international.fp_person_address.person_document_id</code>.
     * Индефикатор ДУЛ ФЛ
     */
    public final TableField<FpPersonAddressRecord, Long> PERSON_DOCUMENT_ID = createField(DSL.name("person_document_id"), SQLDataType.BIGINT, this, "Индефикатор ДУЛ ФЛ");

    /**
     * The column <code>passport_international.fp_person_address.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<FpPersonAddressRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.fp_person_address.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public final TableField<FpPersonAddressRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.fp_person_address.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<FpPersonAddressRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.fp_person_address.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<FpPersonAddressRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.fp_person_address.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<FpPersonAddressRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.fp_person_address.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<FpPersonAddressRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    private FpPersonAddress(Name alias, Table<FpPersonAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpPersonAddress(Name alias, Table<FpPersonAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Адресс ФЛ в модуле заграна"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.fp_person_address</code>
     * table reference
     */
    public FpPersonAddress(String alias) {
        this(DSL.name(alias), FP_PERSON_ADDRESS);
    }

    /**
     * Create an aliased <code>passport_international.fp_person_address</code>
     * table reference
     */
    public FpPersonAddress(Name alias) {
        this(alias, FP_PERSON_ADDRESS);
    }

    /**
     * Create a <code>passport_international.fp_person_address</code> table
     * reference
     */
    public FpPersonAddress() {
        this(DSL.name("fp_person_address"), null);
    }

    public <O extends Record> FpPersonAddress(Table<O> child, ForeignKey<O, FpPersonAddressRecord> key) {
        super(child, key, FP_PERSON_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<FpPersonAddressRecord, Long> getIdentity() {
        return (Identity<FpPersonAddressRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FpPersonAddressRecord> getPrimaryKey() {
        return Keys.FP_PERSON_ADDRESS_PKEY;
    }

    @Override
    public List<ForeignKey<FpPersonAddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_PERSON_ADDRESS__FP_PERSON_ADDRESS_CORE_PERSON_DOCUMENT_FK);
    }

    private transient CorePersonDocument _corePersonDocument;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_person_document</code> table.
     */
    public CorePersonDocument corePersonDocument() {
        if (_corePersonDocument == null)
            _corePersonDocument = new CorePersonDocument(this, Keys.FP_PERSON_ADDRESS__FP_PERSON_ADDRESS_CORE_PERSON_DOCUMENT_FK);

        return _corePersonDocument;
    }

    @Override
    public FpPersonAddress as(String alias) {
        return new FpPersonAddress(DSL.name(alias), this);
    }

    @Override
    public FpPersonAddress as(Name alias) {
        return new FpPersonAddress(alias, this);
    }

    @Override
    public FpPersonAddress as(Table<?> alias) {
        return new FpPersonAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonAddress rename(String name) {
        return new FpPersonAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonAddress rename(Name name) {
        return new FpPersonAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpPersonAddress rename(Table<?> name) {
        return new FpPersonAddress(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
