/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewFpaPersonDocRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewFpaPersonDoc extends TableImpl<ViewFpaPersonDocRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_fpa_person_doc</code>
     */
    public static final ViewFpaPersonDoc VIEW_FPA_PERSON_DOC = new ViewFpaPersonDoc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewFpaPersonDocRecord> getRecordType() {
        return ViewFpaPersonDocRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.fpa_person_doc_id</code>.
     */
    public final TableField<ViewFpaPersonDocRecord, Long> FPA_PERSON_DOC_ID = createField(DSL.name("fpa_person_doc_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.first_name_en</code>.
     */
    public final TableField<ViewFpaPersonDocRecord, String> FIRST_NAME_EN = createField(DSL.name("first_name_en"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.last_name_en</code>.
     */
    public final TableField<ViewFpaPersonDocRecord, String> LAST_NAME_EN = createField(DSL.name("last_name_en"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.middle_name_en</code>.
     */
    public final TableField<ViewFpaPersonDocRecord, String> MIDDLE_NAME_EN = createField(DSL.name("middle_name_en"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<ViewFpaPersonDocRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.create_dttm</code>. Дата
     * время вставки записи в таблицу
     */
    public final TableField<ViewFpaPersonDocRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<ViewFpaPersonDocRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<ViewFpaPersonDocRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<ViewFpaPersonDocRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_fpa_person_doc.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<ViewFpaPersonDocRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    private ViewFpaPersonDoc(Name alias, Table<ViewFpaPersonDocRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewFpaPersonDoc(Name alias, Table<ViewFpaPersonDocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_fpa_person_doc" as  SELECT fp_person_document.fpa_person_document_id AS fpa_person_doc_id,
         fp_person_document.first_name_lat AS first_name_en,
         fp_person_document.last_name_lat AS last_name_en,
         fp_person_document.middle_name_lat AS middle_name_en,
         fp_person_document.src_id,
         fp_person_document.create_dttm,
         fp_person_document.modify_dttm,
         fp_person_document.exp_dttm,
         fp_person_document.eff_dttm,
         fp_person_document.action_ind
        FROM fp_person_document;
        """));
    }

    /**
     * Create an aliased <code>passport_international.view_fpa_person_doc</code>
     * table reference
     */
    public ViewFpaPersonDoc(String alias) {
        this(DSL.name(alias), VIEW_FPA_PERSON_DOC);
    }

    /**
     * Create an aliased <code>passport_international.view_fpa_person_doc</code>
     * table reference
     */
    public ViewFpaPersonDoc(Name alias) {
        this(alias, VIEW_FPA_PERSON_DOC);
    }

    /**
     * Create a <code>passport_international.view_fpa_person_doc</code> table
     * reference
     */
    public ViewFpaPersonDoc() {
        this(DSL.name("view_fpa_person_doc"), null);
    }

    public <O extends Record> ViewFpaPersonDoc(Table<O> child, ForeignKey<O, ViewFpaPersonDocRecord> key) {
        super(child, key, VIEW_FPA_PERSON_DOC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewFpaPersonDoc as(String alias) {
        return new ViewFpaPersonDoc(DSL.name(alias), this);
    }

    @Override
    public ViewFpaPersonDoc as(Name alias) {
        return new ViewFpaPersonDoc(alias, this);
    }

    @Override
    public ViewFpaPersonDoc as(Table<?> alias) {
        return new ViewFpaPersonDoc(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonDoc rename(String name) {
        return new ViewFpaPersonDoc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonDoc rename(Name name) {
        return new ViewFpaPersonDoc(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaPersonDoc rename(Table<?> name) {
        return new ViewFpaPersonDoc(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
