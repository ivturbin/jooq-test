/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.CoreUploadedApplication;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Загруженные заявления
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreUploadedApplicationRecord extends UpdatableRecordImpl<CoreUploadedApplicationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.core_uploaded_application_id</code>.
     * Идентификатор загруженного заявления
     */
    public void setCoreUploadedApplicationId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.core_uploaded_application_id</code>.
     * Идентификатор загруженного заявления
     */
    public Long getCoreUploadedApplicationId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.application_no</code>.
     * Номер заявления
     */
    public void setApplicationNo(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.application_no</code>.
     * Номер заявления
     */
    public String getApplicationNo() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.case_type_id</code>.
     * Тип дела
     */
    public void setCaseTypeId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.case_type_id</code>.
     * Тип дела
     */
    public Long getCaseTypeId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.reception_dt</code>.
     * Дата заявления
     */
    public void setReceptionDt(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.reception_dt</code>.
     * Дата заявления
     */
    public LocalDate getReceptionDt() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.last_name</code>.
     * Фамилия заявителя
     */
    public void setLastName(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.last_name</code>.
     * Фамилия заявителя
     */
    public String getLastName() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.first_name</code>.
     * Имя заявителя
     */
    public void setFirstName(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.first_name</code>.
     * Имя заявителя
     */
    public String getFirstName() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.middle_name</code>.
     * Отчество заявителя
     */
    public void setMiddleName(String value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.middle_name</code>.
     * Отчество заявителя
     */
    public String getMiddleName() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.series_code</code>.
     * Серия ДУЛ заявителя
     */
    public void setSeriesCode(String value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.series_code</code>.
     * Серия ДУЛ заявителя
     */
    public String getSeriesCode() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.doc_no</code>.
     * Номер ДУЛ заявителя
     */
    public void setDocNo(String value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.doc_no</code>.
     * Номер ДУЛ заявителя
     */
    public String getDocNo() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.supplier_category_id</code>.
     * Категория поставщика
     */
    public void setSupplierCategoryId(Long value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.supplier_category_id</code>.
     * Категория поставщика
     */
    public Long getSupplierCategoryId() {
        return (Long) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.supplier_id</code>.
     * Поставщик
     */
    public void setSupplierId(Long value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.supplier_id</code>.
     * Поставщик
     */
    public Long getSupplierId() {
        return (Long) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.department_id</code>.
     * Подразделение
     */
    public void setDepartmentId(Long value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.department_id</code>.
     * Подразделение
     */
    public Long getDepartmentId() {
        return (Long) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.application_cval</code>.
     * Данные заявления
     */
    public void setApplicationCval(String value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.application_cval</code>.
     * Данные заявления
     */
    public String getApplicationCval() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.application_status_id</code>.
     * Статус обработки заявления
     */
    public void setApplicationStatusId(Long value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.application_status_id</code>.
     * Статус обработки заявления
     */
    public Long getApplicationStatusId() {
        return (Long) get(13);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.processed_user</code>.
     * Пользователь, обработавший заявление
     */
    public void setProcessedUser(String value) {
        set(14, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.processed_user</code>.
     * Пользователь, обработавший заявление
     */
    public String getProcessedUser() {
        return (String) get(14);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.core_case_id</code>.
     * Связь с созданным делом после обработки
     */
    public void setCoreCaseId(Long value) {
        set(15, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.core_case_id</code>.
     * Связь с созданным делом после обработки
     */
    public Long getCoreCaseId() {
        return (Long) get(15);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.create_dttm</code>.
     * Дата и время загрузки заявления
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(16, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.create_dttm</code>.
     * Дата и время загрузки заявления
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(16);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.modify_dttm</code>.
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(17, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.modify_dttm</code>.
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(17);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.action_ind</code>.
     */
    public void setActionInd(String value) {
        set(18, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.action_ind</code>.
     */
    public String getActionInd() {
        return (String) get(18);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.rejection_reason_desc</code>.
     * Причина отказа
     */
    public void setRejectionReasonDesc(String value) {
        set(19, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.rejection_reason_desc</code>.
     * Причина отказа
     */
    public String getRejectionReasonDesc() {
        return (String) get(19);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.reserved_case_id</code>.
     * Зарезервированный идентификатор дела
     */
    public void setReservedCaseId(Long value) {
        set(20, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.reserved_case_id</code>.
     * Зарезервированный идентификатор дела
     */
    public Long getReservedCaseId() {
        return (Long) get(20);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.precase_json</code>.
     * Данные заявления, обогащенные НСИ
     */
    public void setPrecaseJson(JSONB value) {
        set(21, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.precase_json</code>.
     * Данные заявления, обогащенные НСИ
     */
    public JSONB getPrecaseJson() {
        return (JSONB) get(21);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.external_supplier_id</code>.
     */
    public void setExternalSupplierId(Long value) {
        set(22, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.external_supplier_id</code>.
     */
    public Long getExternalSupplierId() {
        return (Long) get(22);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.external_case_id</code>.
     */
    public void setExternalCaseId(Long value) {
        set(23, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.external_case_id</code>.
     */
    public Long getExternalCaseId() {
        return (Long) get(23);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.core_smev_request_id</code>.
     * Идентификатор запроса от smev
     */
    public void setCoreSmevRequestId(Long value) {
        set(24, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.core_smev_request_id</code>.
     * Идентификатор запроса от smev
     */
    public Long getCoreSmevRequestId() {
        return (Long) get(24);
    }

    /**
     * Setter for
     * <code>passport_international.core_uploaded_application.region_id</code>.
     * Регион
     */
    public void setRegionId(Long value) {
        set(25, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_uploaded_application.region_id</code>.
     * Регион
     */
    public Long getRegionId() {
        return (Long) get(25);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreUploadedApplicationRecord
     */
    public CoreUploadedApplicationRecord() {
        super(CoreUploadedApplication.CORE_UPLOADED_APPLICATION);
    }

    /**
     * Create a detached, initialised CoreUploadedApplicationRecord
     */
    public CoreUploadedApplicationRecord(Long coreUploadedApplicationId, String applicationNo, Long caseTypeId, LocalDate receptionDt, String lastName, String firstName, String middleName, String seriesCode, String docNo, Long supplierCategoryId, Long supplierId, Long departmentId, String applicationCval, Long applicationStatusId, String processedUser, Long coreCaseId, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, String rejectionReasonDesc, Long reservedCaseId, JSONB precaseJson, Long externalSupplierId, Long externalCaseId, Long coreSmevRequestId, Long regionId) {
        super(CoreUploadedApplication.CORE_UPLOADED_APPLICATION);

        setCoreUploadedApplicationId(coreUploadedApplicationId);
        setApplicationNo(applicationNo);
        setCaseTypeId(caseTypeId);
        setReceptionDt(receptionDt);
        setLastName(lastName);
        setFirstName(firstName);
        setMiddleName(middleName);
        setSeriesCode(seriesCode);
        setDocNo(docNo);
        setSupplierCategoryId(supplierCategoryId);
        setSupplierId(supplierId);
        setDepartmentId(departmentId);
        setApplicationCval(applicationCval);
        setApplicationStatusId(applicationStatusId);
        setProcessedUser(processedUser);
        setCoreCaseId(coreCaseId);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setRejectionReasonDesc(rejectionReasonDesc);
        setReservedCaseId(reservedCaseId);
        setPrecaseJson(precaseJson);
        setExternalSupplierId(externalSupplierId);
        setExternalCaseId(externalCaseId);
        setCoreSmevRequestId(coreSmevRequestId);
        setRegionId(regionId);
        resetChangedOnNotNull();
    }
}
