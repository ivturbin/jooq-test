/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewDestructionActRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewDestructionAct extends TableImpl<ViewDestructionActRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_destruction_act</code>
     */
    public static final ViewDestructionAct VIEW_DESTRUCTION_ACT = new ViewDestructionAct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewDestructionActRecord> getRecordType() {
        return ViewDestructionActRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_destruction_act.destruction_act_id</code>.
     * Индификатор акта
     */
    public final TableField<ViewDestructionActRecord, Long> DESTRUCTION_ACT_ID = createField(DSL.name("destruction_act_id"), SQLDataType.BIGINT, this, "Индификатор акта");

    /**
     * The column
     * <code>passport_international.view_destruction_act.number_act_no</code>.
     */
    public final TableField<ViewDestructionActRecord, String> NUMBER_ACT_NO = createField(DSL.name("number_act_no"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>passport_international.view_destruction_act.create_dt</code>. Дата
     * создания акта
     */
    public final TableField<ViewDestructionActRecord, LocalDate> CREATE_DT = createField(DSL.name("create_dt"), SQLDataType.LOCALDATE, this, "Дата создания акта");

    /**
     * The column
     * <code>passport_international.view_destruction_act.fill_dt</code>.
     */
    public final TableField<ViewDestructionActRecord, LocalDate> FILL_DT = createField(DSL.name("fill_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_destruction_act.status_id</code>. В
     * каком статусе находится акт
     */
    public final TableField<ViewDestructionActRecord, Long> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.BIGINT, this, "В каком статусе находится акт");

    /**
     * The column
     * <code>passport_international.view_destruction_act.department_code</code>.
     * Код подразделения
     */
    public final TableField<ViewDestructionActRecord, String> DEPARTMENT_CODE = createField(DSL.name("department_code"), SQLDataType.VARCHAR(128), this, "Код подразделения");

    /**
     * The column
     * <code>passport_international.view_destruction_act.region_id</code>.
     */
    public final TableField<ViewDestructionActRecord, Long> REGION_ID = createField(DSL.name("region_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_destruction_act.head_organization_name</code>.
     */
    public final TableField<ViewDestructionActRecord, String> HEAD_ORGANIZATION_NAME = createField(DSL.name("head_organization_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>passport_international.view_destruction_act.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<ViewDestructionActRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.view_destruction_act.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<ViewDestructionActRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.view_destruction_act.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<ViewDestructionActRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.view_destruction_act.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<ViewDestructionActRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_destruction_act.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<ViewDestructionActRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_destruction_act.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<ViewDestructionActRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    private ViewDestructionAct(Name alias, Table<ViewDestructionActRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewDestructionAct(Name alias, Table<ViewDestructionActRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_destruction_act" as  SELECT destruction_act.destruction_act_id,
         destruction_act.number_act AS number_act_no,
         destruction_act.create_dt,
         destruction_act.make_dt AS fill_dt,
         destruction_act.status_id,
         destruction_act.department_code,
         destruction_act.region_id,
         destruction_act.head_organization AS head_organization_name,
         destruction_act.src_id,
         destruction_act.create_dttm,
         destruction_act.modify_dttm,
         destruction_act.eff_dttm,
         destruction_act.exp_dttm,
         destruction_act.action_ind
        FROM destruction_act;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_destruction_act</code> table reference
     */
    public ViewDestructionAct(String alias) {
        this(DSL.name(alias), VIEW_DESTRUCTION_ACT);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_destruction_act</code> table reference
     */
    public ViewDestructionAct(Name alias) {
        this(alias, VIEW_DESTRUCTION_ACT);
    }

    /**
     * Create a <code>passport_international.view_destruction_act</code> table
     * reference
     */
    public ViewDestructionAct() {
        this(DSL.name("view_destruction_act"), null);
    }

    public <O extends Record> ViewDestructionAct(Table<O> child, ForeignKey<O, ViewDestructionActRecord> key) {
        super(child, key, VIEW_DESTRUCTION_ACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewDestructionAct as(String alias) {
        return new ViewDestructionAct(DSL.name(alias), this);
    }

    @Override
    public ViewDestructionAct as(Name alias) {
        return new ViewDestructionAct(alias, this);
    }

    @Override
    public ViewDestructionAct as(Table<?> alias) {
        return new ViewDestructionAct(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewDestructionAct rename(String name) {
        return new ViewDestructionAct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewDestructionAct rename(Name name) {
        return new ViewDestructionAct(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewDestructionAct rename(Table<?> name) {
        return new ViewDestructionAct(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, LocalDate, LocalDate, Long, String, Long, String, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super String, ? super LocalDate, ? super LocalDate, ? super Long, ? super String, ? super Long, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super String, ? super LocalDate, ? super LocalDate, ? super Long, ? super String, ? super Long, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
