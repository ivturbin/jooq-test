/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.FpBaseRestrictAudit;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Таблица версионирования fp_base_restrict
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpBaseRestrictAuditRecord extends UpdatableRecordImpl<FpBaseRestrictAuditRecord> implements Record12<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, Long, Long, String, LocalDate, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>passport_international.fp_base_restrict_audit.id</code>.
     * Идентификатор "fp_base_restrict_audit" с данными коррекции
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>passport_international.fp_base_restrict_audit.id</code>.
     * Идентификатор "fp_base_restrict_audit" с данными коррекции
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.record_id</code>.
     * Внешний ключ на запись в таблице-мастере
     */
    public void setRecordId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.record_id</code>.
     * Внешний ключ на запись в таблице-мастере
     */
    public Long getRecordId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public void setCorrectionLogId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public Long getCorrectionLogId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.update_user</code>.
     * Пользователь, скорректировавший дело
     */
    public void setUpdateUser(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.update_user</code>.
     * Пользователь, скорректировавший дело
     */
    public String getUpdateUser() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.eff_dttm</code>. Дата
     * начала действия версии
     */
    public void setEffDttm(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.eff_dttm</code>. Дата
     * начала действия версии
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.exp_dttm</code>. Дата
     * окончания действия версии
     */
    public void setExpDttm(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.exp_dttm</code>. Дата
     * окончания действия версии
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.category_id</code>.
     */
    public void setCategoryId(Long value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.category_id</code>.
     */
    public Long getCategoryId() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.status_basis_id</code>.
     */
    public void setStatusBasisId(Long value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.status_basis_id</code>.
     */
    public Long getStatusBasisId() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.court_name_id</code>.
     */
    public void setCourtNameId(Long value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.court_name_id</code>.
     */
    public Long getCourtNameId() {
        return (Long) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.court_decision_no</code>.
     */
    public void setCourtDecisionNo(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.court_decision_no</code>.
     */
    public String getCourtDecisionNo() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.court_decision_dt</code>.
     */
    public void setCourtDecisionDt(LocalDate value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.court_decision_dt</code>.
     */
    public LocalDate getCourtDecisionDt() {
        return (LocalDate) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.fp_base_restrict_audit.comment</code>.
     */
    public void setComment(String value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_base_restrict_audit.comment</code>.
     */
    public String getComment() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, Long, Long, String, LocalDate, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, Long, Long, String, LocalDate, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.ID;
    }

    @Override
    public Field<Long> field2() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.RECORD_ID;
    }

    @Override
    public Field<Long> field3() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.CORRECTION_LOG_ID;
    }

    @Override
    public Field<String> field4() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.UPDATE_USER;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.EFF_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.EXP_DTTM;
    }

    @Override
    public Field<Long> field7() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.CATEGORY_ID;
    }

    @Override
    public Field<Long> field8() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.STATUS_BASIS_ID;
    }

    @Override
    public Field<Long> field9() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.COURT_NAME_ID;
    }

    @Override
    public Field<String> field10() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.COURT_DECISION_NO;
    }

    @Override
    public Field<LocalDate> field11() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.COURT_DECISION_DT;
    }

    @Override
    public Field<String> field12() {
        return FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT.COMMENT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getRecordId();
    }

    @Override
    public Long component3() {
        return getCorrectionLogId();
    }

    @Override
    public String component4() {
        return getUpdateUser();
    }

    @Override
    public OffsetDateTime component5() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime component6() {
        return getExpDttm();
    }

    @Override
    public Long component7() {
        return getCategoryId();
    }

    @Override
    public Long component8() {
        return getStatusBasisId();
    }

    @Override
    public Long component9() {
        return getCourtNameId();
    }

    @Override
    public String component10() {
        return getCourtDecisionNo();
    }

    @Override
    public LocalDate component11() {
        return getCourtDecisionDt();
    }

    @Override
    public String component12() {
        return getComment();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getRecordId();
    }

    @Override
    public Long value3() {
        return getCorrectionLogId();
    }

    @Override
    public String value4() {
        return getUpdateUser();
    }

    @Override
    public OffsetDateTime value5() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime value6() {
        return getExpDttm();
    }

    @Override
    public Long value7() {
        return getCategoryId();
    }

    @Override
    public Long value8() {
        return getStatusBasisId();
    }

    @Override
    public Long value9() {
        return getCourtNameId();
    }

    @Override
    public String value10() {
        return getCourtDecisionNo();
    }

    @Override
    public LocalDate value11() {
        return getCourtDecisionDt();
    }

    @Override
    public String value12() {
        return getComment();
    }

    @Override
    public FpBaseRestrictAuditRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value2(Long value) {
        setRecordId(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value3(Long value) {
        setCorrectionLogId(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value4(String value) {
        setUpdateUser(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value5(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value6(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value7(Long value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value8(Long value) {
        setStatusBasisId(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value9(Long value) {
        setCourtNameId(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value10(String value) {
        setCourtDecisionNo(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value11(LocalDate value) {
        setCourtDecisionDt(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord value12(String value) {
        setComment(value);
        return this;
    }

    @Override
    public FpBaseRestrictAuditRecord values(Long value1, Long value2, Long value3, String value4, OffsetDateTime value5, OffsetDateTime value6, Long value7, Long value8, Long value9, String value10, LocalDate value11, String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FpBaseRestrictAuditRecord
     */
    public FpBaseRestrictAuditRecord() {
        super(FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT);
    }

    /**
     * Create a detached, initialised FpBaseRestrictAuditRecord
     */
    public FpBaseRestrictAuditRecord(Long id, Long recordId, Long correctionLogId, String updateUser, OffsetDateTime effDttm, OffsetDateTime expDttm, Long categoryId, Long statusBasisId, Long courtNameId, String courtDecisionNo, LocalDate courtDecisionDt, String comment) {
        super(FpBaseRestrictAudit.FP_BASE_RESTRICT_AUDIT);

        setId(id);
        setRecordId(recordId);
        setCorrectionLogId(correctionLogId);
        setUpdateUser(updateUser);
        setEffDttm(effDttm);
        setExpDttm(expDttm);
        setCategoryId(categoryId);
        setStatusBasisId(statusBasisId);
        setCourtNameId(courtNameId);
        setCourtDecisionNo(courtDecisionNo);
        setCourtDecisionDt(courtDecisionDt);
        setComment(comment);
        resetChangedOnNotNull();
    }
}
