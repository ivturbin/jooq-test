/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewFpaCaseRestrictRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewFpaCaseRestrict extends TableImpl<ViewFpaCaseRestrictRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_fpa_case_restrict</code>
     */
    public static final ViewFpaCaseRestrict VIEW_FPA_CASE_RESTRICT = new ViewFpaCaseRestrict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewFpaCaseRestrictRecord> getRecordType() {
        return ViewFpaCaseRestrictRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.fpa_case_restrict_id</code>.
     */
    public final TableField<ViewFpaCaseRestrictRecord, Long> FPA_CASE_RESTRICT_ID = createField(DSL.name("fpa_case_restrict_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.restrict_doc_issue_dt</code>.
     */
    public final TableField<ViewFpaCaseRestrictRecord, LocalDate> RESTRICT_DOC_ISSUE_DT = createField(DSL.name("restrict_doc_issue_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.restrict_start_dt</code>.
     */
    public final TableField<ViewFpaCaseRestrictRecord, LocalDate> RESTRICT_START_DT = createField(DSL.name("restrict_start_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.restrict_end_dt</code>.
     */
    public final TableField<ViewFpaCaseRestrictRecord, LocalDate> RESTRICT_END_DT = createField(DSL.name("restrict_end_dt"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.restrict_doc_no</code>.
     */
    public final TableField<ViewFpaCaseRestrictRecord, String> RESTRICT_DOC_NO = createField(DSL.name("restrict_doc_no"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.restrict_doc_type_cval</code>.
     */
    public final TableField<ViewFpaCaseRestrictRecord, String> RESTRICT_DOC_TYPE_CVAL = createField(DSL.name("restrict_doc_type_cval"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<ViewFpaCaseRestrictRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<ViewFpaCaseRestrictRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<ViewFpaCaseRestrictRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<ViewFpaCaseRestrictRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<ViewFpaCaseRestrictRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<ViewFpaCaseRestrictRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.view_fpa_case_restrict.comment_desc</code>.
     */
    public final TableField<ViewFpaCaseRestrictRecord, String> COMMENT_DESC = createField(DSL.name("comment_desc"), SQLDataType.VARCHAR(512), this, "");

    private ViewFpaCaseRestrict(Name alias, Table<ViewFpaCaseRestrictRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewFpaCaseRestrict(Name alias, Table<ViewFpaCaseRestrictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_fpa_case_restrict" as  SELECT fp_case_restrict.restrict_id AS fpa_case_restrict_id,
         fp_case_restrict.fpr_doc_issue_dt AS restrict_doc_issue_dt,
         fp_case_restrict.fpr_start_dt AS restrict_start_dt,
         fp_case_restrict.fpr_end_dt AS restrict_end_dt,
         fp_case_restrict.fpr_doc_no AS restrict_doc_no,
         fp_case_restrict.fpr_doc_type AS restrict_doc_type_cval,
         fp_case_restrict.src_id,
         fp_case_restrict.create_dttm,
         fp_case_restrict.modify_dttm,
         fp_case_restrict.exp_dttm,
         fp_case_restrict.eff_dttm,
         fp_case_restrict.action_ind,
         fp_case_restrict.comment AS comment_desc
        FROM fp_case_restrict;
        """));
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_case_restrict</code> table
     * reference
     */
    public ViewFpaCaseRestrict(String alias) {
        this(DSL.name(alias), VIEW_FPA_CASE_RESTRICT);
    }

    /**
     * Create an aliased
     * <code>passport_international.view_fpa_case_restrict</code> table
     * reference
     */
    public ViewFpaCaseRestrict(Name alias) {
        this(alias, VIEW_FPA_CASE_RESTRICT);
    }

    /**
     * Create a <code>passport_international.view_fpa_case_restrict</code> table
     * reference
     */
    public ViewFpaCaseRestrict() {
        this(DSL.name("view_fpa_case_restrict"), null);
    }

    public <O extends Record> ViewFpaCaseRestrict(Table<O> child, ForeignKey<O, ViewFpaCaseRestrictRecord> key) {
        super(child, key, VIEW_FPA_CASE_RESTRICT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewFpaCaseRestrict as(String alias) {
        return new ViewFpaCaseRestrict(DSL.name(alias), this);
    }

    @Override
    public ViewFpaCaseRestrict as(Name alias) {
        return new ViewFpaCaseRestrict(alias, this);
    }

    @Override
    public ViewFpaCaseRestrict as(Table<?> alias) {
        return new ViewFpaCaseRestrict(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaCaseRestrict rename(String name) {
        return new ViewFpaCaseRestrict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaCaseRestrict rename(Name name) {
        return new ViewFpaCaseRestrict(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewFpaCaseRestrict rename(Table<?> name) {
        return new ViewFpaCaseRestrict(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, LocalDate, LocalDate, LocalDate, String, String, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super LocalDate, ? super LocalDate, ? super LocalDate, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super LocalDate, ? super LocalDate, ? super LocalDate, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
