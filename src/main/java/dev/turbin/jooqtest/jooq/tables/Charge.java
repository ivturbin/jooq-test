/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ChargeRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Начисление
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Charge extends TableImpl<ChargeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>passport_international.charge</code>
     */
    public static final Charge CHARGE = new Charge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChargeRecord> getRecordType() {
        return ChargeRecord.class;
    }

    /**
     * The column <code>passport_international.charge.charge_id</code>.
     * Иднетификатор записи
     */
    public final TableField<ChargeRecord, Long> CHARGE_ID = createField(DSL.name("charge_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Иднетификатор записи");

    /**
     * The column <code>passport_international.charge.case_id</code>.
     * Идентификатор к которому относится начисление
     */
    public final TableField<ChargeRecord, Long> CASE_ID = createField(DSL.name("case_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор к которому относится начисление");

    /**
     * The column <code>passport_international.charge.supplier_bill_uin</code>.
     * Уникальный идентификатор начисления (УИН)
     */
    public final TableField<ChargeRecord, String> SUPPLIER_BILL_UIN = createField(DSL.name("supplier_bill_uin"), SQLDataType.VARCHAR(25).defaultValue(DSL.field(DSL.raw("'N/A'::character varying"), SQLDataType.VARCHAR)), this, "Уникальный идентификатор начисления (УИН)");

    /**
     * The column <code>passport_international.charge.status_code</code>. Статус
     * начисления
     */
    public final TableField<ChargeRecord, String> STATUS_CODE = createField(DSL.name("status_code"), SQLDataType.VARCHAR(128).nullable(false), this, "Статус начисления");

    /**
     * The column <code>passport_international.charge.amount_rub_coin</code>.
     * Рассчтанаая сумма начисления в копейках
     */
    public final TableField<ChargeRecord, Long> AMOUNT_RUB_COIN = createField(DSL.name("amount_rub_coin"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "Рассчтанаая сумма начисления в копейках");

    /**
     * The column <code>passport_international.charge.balance_rub_coin</code>.
     * Оставшаяся сумма к оплате в копейках
     */
    public final TableField<ChargeRecord, Long> BALANCE_RUB_COIN = createField(DSL.name("balance_rub_coin"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "Оставшаяся сумма к оплате в копейках");

    /**
     * The column <code>passport_international.charge.create_dttm</code>. Дата
     * время вставки записи
     */
    public final TableField<ChargeRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи");

    /**
     * The column <code>passport_international.charge.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public final TableField<ChargeRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column <code>passport_international.charge.action_ind</code>.
     * Индикатор действия
     */
    public final TableField<ChargeRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор действия");

    /**
     * The column <code>passport_international.charge.version</code>.
     */
    public final TableField<ChargeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>passport_international.charge.payment_document_file</code>.
     * Идентификатор-ссылка на файл платежного документа(квитанции) в файловом
     * хранилище
     */
    public final TableField<ChargeRecord, String> PAYMENT_DOCUMENT_FILE = createField(DSL.name("payment_document_file"), SQLDataType.VARCHAR(256), this, "Идентификатор-ссылка на файл платежного документа(квитанции) в файловом хранилище");

    /**
     * The column
     * <code>passport_international.charge.correlation_id_code</code>.
     * идентификатор запроса создания начисления
     */
    public final TableField<ChargeRecord, String> CORRELATION_ID_CODE = createField(DSL.name("correlation_id_code"), SQLDataType.VARCHAR(128), this, "идентификатор запроса создания начисления");

    /**
     * The column <code>passport_international.charge.payer_kind_code</code>.
     * Тип плательщика. Возможные значения:
     *         PERSON - физическое лицо
     *         BUSINESSMAN - индивидуальный предприниматель (ИП)
     *         RF_ORGANIZATION - юридическое лицо из Российской Федерации
     *         FOREIGN_ORGANIZATION - иностранное юридическое лицо
     */
    public final TableField<ChargeRecord, String> PAYER_KIND_CODE = createField(DSL.name("payer_kind_code"), SQLDataType.VARCHAR(128), this, "Тип плательщика. Возможные значения:\n        PERSON - физическое лицо\n        BUSINESSMAN - индивидуальный предприниматель (ИП)\n        RF_ORGANIZATION - юридическое лицо из Российской Федерации\n        FOREIGN_ORGANIZATION - иностранное юридическое лицо");

    /**
     * The column <code>passport_international.charge.payer_person_id</code>.
     * Идентификатор плательщика в случае физ лица
     */
    public final TableField<ChargeRecord, Long> PAYER_PERSON_ID = createField(DSL.name("payer_person_id"), SQLDataType.BIGINT, this, "Идентификатор плательщика в случае физ лица");

    /**
     * The column <code>passport_international.charge.payer_full_name</code>.
     * ФИО физ лица или наименование организации
     */
    public final TableField<ChargeRecord, String> PAYER_FULL_NAME = createField(DSL.name("payer_full_name"), SQLDataType.VARCHAR(256), this, "ФИО физ лица или наименование организации");

    /**
     * The column
     * <code>passport_international.charge.payer_doc_type_code</code>. Код типа
     * документа удостоверяющего личность плательщика в системе ГИС ГМП
     */
    public final TableField<ChargeRecord, String> PAYER_DOC_TYPE_CODE = createField(DSL.name("payer_doc_type_code"), SQLDataType.VARCHAR(128), this, "Код типа документа удостоверяющего личность плательщика в системе ГИС ГМП");

    /**
     * The column
     * <code>passport_international.charge.payer_doc_series_code</code>. Серия
     * документа удостоверяющего личность плательщика
     */
    public final TableField<ChargeRecord, String> PAYER_DOC_SERIES_CODE = createField(DSL.name("payer_doc_series_code"), SQLDataType.VARCHAR(128), this, "Серия документа удостоверяющего личность плательщика");

    /**
     * The column <code>passport_international.charge.payer_doc_no</code>. Номер
     * документа, удостоверяющего личность плательщика
     */
    public final TableField<ChargeRecord, String> PAYER_DOC_NO = createField(DSL.name("payer_doc_no"), SQLDataType.VARCHAR(128), this, "Номер документа, удостоверяющего личность плательщика");

    /**
     * The column <code>passport_international.charge.payer_account_no</code>.
     * Номер банковского счета плательщика
     */
    public final TableField<ChargeRecord, String> PAYER_ACCOUNT_NO = createField(DSL.name("payer_account_no"), SQLDataType.VARCHAR(128), this, "Номер банковского счета плательщика");

    /**
     * The column <code>passport_international.charge.payer_bank_name</code>.
     * Наименование банка плательщика
     */
    public final TableField<ChargeRecord, String> PAYER_BANK_NAME = createField(DSL.name("payer_bank_name"), SQLDataType.VARCHAR(256), this, "Наименование банка плательщика");

    /**
     * The column <code>passport_international.charge.payer_bank_bik</code>.
     * Банковский идентификационный код (БИК) банка плательщика
     */
    public final TableField<ChargeRecord, String> PAYER_BANK_BIK = createField(DSL.name("payer_bank_bik"), SQLDataType.VARCHAR(9), this, "Банковский идентификационный код (БИК) банка плательщика");

    /**
     * The column <code>passport_international.charge.payer_doc_type_id</code>.
     * Идентификатор типа документа удостоверяющего личность плательщика (НСИ)
     */
    public final TableField<ChargeRecord, Long> PAYER_DOC_TYPE_ID = createField(DSL.name("payer_doc_type_id"), SQLDataType.BIGINT, this, "Идентификатор типа документа удостоверяющего личность плательщика (НСИ)");

    /**
     * The column <code>passport_international.charge.purpose_name</code>.
     * Назначение платежа
     */
    public final TableField<ChargeRecord, String> PURPOSE_NAME = createField(DSL.name("purpose_name"), SQLDataType.CLOB, this, "Назначение платежа");

    /**
     * The column <code>passport_international.charge.kbk</code>. Код бюджетной
     * классификации (КБK)
     */
    public final TableField<ChargeRecord, String> KBK = createField(DSL.name("kbk"), SQLDataType.VARCHAR(20), this, "Код бюджетной классификации (КБK)");

    /**
     * The column
     * <code>passport_international.charge.payer_identifier_key</code>.
     * Уникальный идентификатор плательщика
     */
    public final TableField<ChargeRecord, String> PAYER_IDENTIFIER_KEY = createField(DSL.name("payer_identifier_key"), SQLDataType.VARCHAR(50), this, "Уникальный идентификатор плательщика");

    /**
     * The column <code>passport_international.charge.type_cval</code>. Тип
     * начисления
     */
    public final TableField<ChargeRecord, String> TYPE_CVAL = createField(DSL.name("type_cval"), SQLDataType.CLOB, this, "Тип начисления");

    private Charge(Name alias, Table<ChargeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Charge(Name alias, Table<ChargeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Начисление"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.charge</code> table
     * reference
     */
    public Charge(String alias) {
        this(DSL.name(alias), CHARGE);
    }

    /**
     * Create an aliased <code>passport_international.charge</code> table
     * reference
     */
    public Charge(Name alias) {
        this(alias, CHARGE);
    }

    /**
     * Create a <code>passport_international.charge</code> table reference
     */
    public Charge() {
        this(DSL.name("charge"), null);
    }

    public <O extends Record> Charge(Table<O> child, ForeignKey<O, ChargeRecord> key) {
        super(child, key, CHARGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CHARGE_CORRELATION_ID_CODE_IX, Indexes.CHARGE_SUPPLIER_BILL_UIN_IX);
    }

    @Override
    public Identity<ChargeRecord, Long> getIdentity() {
        return (Identity<ChargeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChargeRecord> getPrimaryKey() {
        return Keys.CHARGE_PK;
    }

    @Override
    public List<ForeignKey<ChargeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHARGE__CHARGE_CASE_ID_FK);
    }

    private transient CoreCase _coreCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.CHARGE__CHARGE_CASE_ID_FK);

        return _coreCase;
    }

    @Override
    public Charge as(String alias) {
        return new Charge(DSL.name(alias), this);
    }

    @Override
    public Charge as(Name alias) {
        return new Charge(alias, this);
    }

    @Override
    public Charge as(Table<?> alias) {
        return new Charge(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Charge rename(String name) {
        return new Charge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Charge rename(Name name) {
        return new Charge(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Charge rename(Table<?> name) {
        return new Charge(name.getQualifiedName(), null);
    }
}
