/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreContactInfoRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Контактная информация заявителя
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreContactInfo extends TableImpl<CoreContactInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_contact_info</code>
     */
    public static final CoreContactInfo CORE_CONTACT_INFO = new CoreContactInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreContactInfoRecord> getRecordType() {
        return CoreContactInfoRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_contact_info.contact_info_id</code>.
     * Идентификатор
     */
    public final TableField<CoreContactInfoRecord, Long> CONTACT_INFO_ID = createField(DSL.name("contact_info_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор");

    /**
     * The column <code>passport_international.core_contact_info.version</code>.
     * реализация оптимистической блокировки
     */
    public final TableField<CoreContactInfoRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "реализация оптимистической блокировки");

    /**
     * The column <code>passport_international.core_contact_info.email</code>.
     * Электронная почта
     */
    public final TableField<CoreContactInfoRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "Электронная почта");

    /**
     * The column <code>passport_international.core_contact_info.phone</code>.
     * Телефон
     */
    public final TableField<CoreContactInfoRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CLOB, this, "Телефон");

    /**
     * The column
     * <code>passport_international.core_contact_info.fax_cval</code>. Факс
     */
    public final TableField<CoreContactInfoRecord, String> FAX_CVAL = createField(DSL.name("fax_cval"), SQLDataType.CLOB, this, "Факс");

    /**
     * The column
     * <code>passport_international.core_contact_info.contact_info_desc</code>.
     * Дополнительная контактная информация
     */
    public final TableField<CoreContactInfoRecord, String> CONTACT_INFO_DESC = createField(DSL.name("contact_info_desc"), SQLDataType.CLOB, this, "Дополнительная контактная информация");

    /**
     * The column <code>passport_international.core_contact_info.src_id</code>.
     * Источник
     */
    public final TableField<CoreContactInfoRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::bigint"), SQLDataType.BIGINT)), this, "Источник");

    /**
     * The column
     * <code>passport_international.core_contact_info.create_dttm</code>. Дата
     * вставки записи
     */
    public final TableField<CoreContactInfoRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата вставки записи");

    /**
     * The column
     * <code>passport_international.core_contact_info.modify_dttm</code>. Дата
     * последнего изменения записи
     */
    public final TableField<CoreContactInfoRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата последнего изменения записи");

    /**
     * The column
     * <code>passport_international.core_contact_info.action_ind</code>.
     * Индикатор операции
     */
    public final TableField<CoreContactInfoRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции");

    /**
     * The column
     * <code>passport_international.core_contact_info.eff_dttm</code>. Дата
     * начала действия периода
     */
    public final TableField<CoreContactInfoRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("'1899-12-31 23:30:17+02:30:17'::timestamp with time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата начала действия периода");

    /**
     * The column
     * <code>passport_international.core_contact_info.exp_dttm</code>. Дата
     * окончания действия периода
     */
    public final TableField<CoreContactInfoRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("'9999-12-31 00:00:00+03'::timestamp with time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата окончания действия периода");

    /**
     * The column
     * <code>passport_international.core_contact_info.core_person_document_id</code>.
     */
    public final TableField<CoreContactInfoRecord, Long> CORE_PERSON_DOCUMENT_ID = createField(DSL.name("core_person_document_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>passport_international.core_contact_info.agree</code>.
     * Согласен на участие в опросе
     */
    public final TableField<CoreContactInfoRecord, Boolean> AGREE = createField(DSL.name("agree"), SQLDataType.BOOLEAN, this, "Согласен на участие в опросе");

    /**
     * The column
     * <code>passport_international.core_contact_info.survey_agreement_bool</code>.
     * Признак согласия гражданина на участие в опросе
     */
    public final TableField<CoreContactInfoRecord, Boolean> SURVEY_AGREEMENT_BOOL = createField(DSL.name("survey_agreement_bool"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Признак согласия гражданина на участие в опросе");

    private CoreContactInfo(Name alias, Table<CoreContactInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreContactInfo(Name alias, Table<CoreContactInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Контактная информация заявителя"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_contact_info</code>
     * table reference
     */
    public CoreContactInfo(String alias) {
        this(DSL.name(alias), CORE_CONTACT_INFO);
    }

    /**
     * Create an aliased <code>passport_international.core_contact_info</code>
     * table reference
     */
    public CoreContactInfo(Name alias) {
        this(alias, CORE_CONTACT_INFO);
    }

    /**
     * Create a <code>passport_international.core_contact_info</code> table
     * reference
     */
    public CoreContactInfo() {
        this(DSL.name("core_contact_info"), null);
    }

    public <O extends Record> CoreContactInfo(Table<O> child, ForeignKey<O, CoreContactInfoRecord> key) {
        super(child, key, CORE_CONTACT_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<CoreContactInfoRecord, Long> getIdentity() {
        return (Identity<CoreContactInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreContactInfoRecord> getPrimaryKey() {
        return Keys.CORE_CONTACT_INFO_PK;
    }

    @Override
    public List<ForeignKey<CoreContactInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_CONTACT_INFO__CORE_CONTACT_INFO_CORE_PERSON_DOCUMENT_ID_FK);
    }

    private transient CorePersonDocument _corePersonDocument;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_person_document</code> table.
     */
    public CorePersonDocument corePersonDocument() {
        if (_corePersonDocument == null)
            _corePersonDocument = new CorePersonDocument(this, Keys.CORE_CONTACT_INFO__CORE_CONTACT_INFO_CORE_PERSON_DOCUMENT_ID_FK);

        return _corePersonDocument;
    }

    @Override
    public CoreContactInfo as(String alias) {
        return new CoreContactInfo(DSL.name(alias), this);
    }

    @Override
    public CoreContactInfo as(Name alias) {
        return new CoreContactInfo(alias, this);
    }

    @Override
    public CoreContactInfo as(Table<?> alias) {
        return new CoreContactInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreContactInfo rename(String name) {
        return new CoreContactInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreContactInfo rename(Name name) {
        return new CoreContactInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreContactInfo rename(Table<?> name) {
        return new CoreContactInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Integer, String, String, String, String, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, Long, Boolean, Boolean> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
