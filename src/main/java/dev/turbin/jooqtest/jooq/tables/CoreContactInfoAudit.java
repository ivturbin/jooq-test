/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreContactInfoAuditRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица версионирования core_contact_info
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreContactInfoAudit extends TableImpl<CoreContactInfoAuditRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_contact_info_audit</code>
     */
    public static final CoreContactInfoAudit CORE_CONTACT_INFO_AUDIT = new CoreContactInfoAudit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreContactInfoAuditRecord> getRecordType() {
        return CoreContactInfoAuditRecord.class;
    }

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.id</code>.
     * Идентификатор
     */
    public final TableField<CoreContactInfoAuditRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.record_id</code>.
     * Иденитификатор версионируемой записи
     */
    public final TableField<CoreContactInfoAuditRecord, Long> RECORD_ID = createField(DSL.name("record_id"), SQLDataType.BIGINT.nullable(false), this, "Иденитификатор версионируемой записи");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public final TableField<CoreContactInfoAuditRecord, Long> CORRECTION_LOG_ID = createField(DSL.name("correction_log_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор лога коррекции дела");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.update_user</code>.
     * Пользователь создавший версию
     */
    public final TableField<CoreContactInfoAuditRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR.nullable(false), this, "Пользователь создавший версию");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.eff_dttm</code>.
     * Время начала действия версии effective from
     */
    public final TableField<CoreContactInfoAuditRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-12-31 00:00:00'::timestamp without time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Время начала действия версии effective from");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.exp_dttm</code>.
     * Время окончания действия версии expired
     */
    public final TableField<CoreContactInfoAuditRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("(now())::timestamp without time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Время окончания действия версии expired");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.version</code>.
     */
    public final TableField<CoreContactInfoAuditRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.email</code>.
     */
    public final TableField<CoreContactInfoAuditRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.phone</code>.
     */
    public final TableField<CoreContactInfoAuditRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.fax_cval</code>.
     */
    public final TableField<CoreContactInfoAuditRecord, String> FAX_CVAL = createField(DSL.name("fax_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.contact_info_desc</code>.
     */
    public final TableField<CoreContactInfoAuditRecord, String> CONTACT_INFO_DESC = createField(DSL.name("contact_info_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.survey_agreement_bool</code>.
     */
    public final TableField<CoreContactInfoAuditRecord, Boolean> SURVEY_AGREEMENT_BOOL = createField(DSL.name("survey_agreement_bool"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.core_person_document_id</code>.
     */
    public final TableField<CoreContactInfoAuditRecord, Long> CORE_PERSON_DOCUMENT_ID = createField(DSL.name("core_person_document_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.core_contact_info_audit.agree</code>.
     */
    public final TableField<CoreContactInfoAuditRecord, Boolean> AGREE = createField(DSL.name("agree"), SQLDataType.BOOLEAN, this, "");

    private CoreContactInfoAudit(Name alias, Table<CoreContactInfoAuditRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreContactInfoAudit(Name alias, Table<CoreContactInfoAuditRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица версионирования core_contact_info"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.core_contact_info_audit</code> table
     * reference
     */
    public CoreContactInfoAudit(String alias) {
        this(DSL.name(alias), CORE_CONTACT_INFO_AUDIT);
    }

    /**
     * Create an aliased
     * <code>passport_international.core_contact_info_audit</code> table
     * reference
     */
    public CoreContactInfoAudit(Name alias) {
        this(alias, CORE_CONTACT_INFO_AUDIT);
    }

    /**
     * Create a <code>passport_international.core_contact_info_audit</code>
     * table reference
     */
    public CoreContactInfoAudit() {
        this(DSL.name("core_contact_info_audit"), null);
    }

    public <O extends Record> CoreContactInfoAudit(Table<O> child, ForeignKey<O, CoreContactInfoAuditRecord> key) {
        super(child, key, CORE_CONTACT_INFO_AUDIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_CONTACT_INFO_AUDIT_CORRECTION_LOG_IX, Indexes.CORE_CONTACT_INFO_AUDIT_EFF_DTTM_IX, Indexes.CORE_CONTACT_INFO_AUDIT_EXP_DTTM_IX, Indexes.CORE_CONTACT_INFO_AUDIT_RECORD_ID_IX);
    }

    @Override
    public Identity<CoreContactInfoAuditRecord, Long> getIdentity() {
        return (Identity<CoreContactInfoAuditRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreContactInfoAuditRecord> getPrimaryKey() {
        return Keys.CORE_CONTACT_INFO_AUDIT_PK;
    }

    @Override
    public List<ForeignKey<CoreContactInfoAuditRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CORE_CONTACT_INFO_AUDIT__CORE_CONTACT_INFO_AUDIT_FK, Keys.CORE_CONTACT_INFO_AUDIT__CORE_CONTACT_INFO_AUDIT_CORRECTION_LOG_FK);
    }

    private transient CoreContactInfo _coreContactInfo;
    private transient CorrectionLog _correctionLog;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_contact_info</code> table.
     */
    public CoreContactInfo coreContactInfo() {
        if (_coreContactInfo == null)
            _coreContactInfo = new CoreContactInfo(this, Keys.CORE_CONTACT_INFO_AUDIT__CORE_CONTACT_INFO_AUDIT_FK);

        return _coreContactInfo;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.correction_log</code> table.
     */
    public CorrectionLog correctionLog() {
        if (_correctionLog == null)
            _correctionLog = new CorrectionLog(this, Keys.CORE_CONTACT_INFO_AUDIT__CORE_CONTACT_INFO_AUDIT_CORRECTION_LOG_FK);

        return _correctionLog;
    }

    @Override
    public CoreContactInfoAudit as(String alias) {
        return new CoreContactInfoAudit(DSL.name(alias), this);
    }

    @Override
    public CoreContactInfoAudit as(Name alias) {
        return new CoreContactInfoAudit(alias, this);
    }

    @Override
    public CoreContactInfoAudit as(Table<?> alias) {
        return new CoreContactInfoAudit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreContactInfoAudit rename(String name) {
        return new CoreContactInfoAudit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreContactInfoAudit rename(Name name) {
        return new CoreContactInfoAudit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreContactInfoAudit rename(Table<?> name) {
        return new CoreContactInfoAudit(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Integer, String, String, String, String, Boolean, Long, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
