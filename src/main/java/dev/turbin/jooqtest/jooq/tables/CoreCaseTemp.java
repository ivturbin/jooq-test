/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.CoreCaseTempRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Записи о предделах/черновиках дел
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreCaseTemp extends TableImpl<CoreCaseTempRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.core_case_temp</code>
     */
    public static final CoreCaseTemp CORE_CASE_TEMP = new CoreCaseTemp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreCaseTempRecord> getRecordType() {
        return CoreCaseTempRecord.class;
    }

    /**
     * The column <code>passport_international.core_case_temp.id</code>.
     * Идентификатор записи
     */
    public final TableField<CoreCaseTempRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор записи");

    /**
     * The column
     * <code>passport_international.core_case_temp.core_case_id</code>.
     * Идентификатор преддела или черновика
     */
    public final TableField<CoreCaseTempRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор преддела или черновика");

    /**
     * The column
     * <code>passport_international.core_case_temp.create_user</code>. Логин
     * пользователя, создавшего преддело или черновик
     */
    public final TableField<CoreCaseTempRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255), this, "Логин пользователя, создавшего преддело или черновик");

    /**
     * The column
     * <code>passport_international.core_case_temp.create_dttm</code>. Дата и
     * время вставки данных в таблицу
     */
    public final TableField<CoreCaseTempRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата и время вставки данных в таблицу");

    /**
     * The column <code>passport_international.core_case_temp.source_id</code>.
     * Идентификатор системы-источника
     */
    public final TableField<CoreCaseTempRecord, Long> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.BIGINT, this, "Идентификатор системы-источника");

    private CoreCaseTemp(Name alias, Table<CoreCaseTempRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreCaseTemp(Name alias, Table<CoreCaseTempRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Записи о предделах/черновиках дел"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.core_case_temp</code>
     * table reference
     */
    public CoreCaseTemp(String alias) {
        this(DSL.name(alias), CORE_CASE_TEMP);
    }

    /**
     * Create an aliased <code>passport_international.core_case_temp</code>
     * table reference
     */
    public CoreCaseTemp(Name alias) {
        this(alias, CORE_CASE_TEMP);
    }

    /**
     * Create a <code>passport_international.core_case_temp</code> table
     * reference
     */
    public CoreCaseTemp() {
        this(DSL.name("core_case_temp"), null);
    }

    public <O extends Record> CoreCaseTemp(Table<O> child, ForeignKey<O, CoreCaseTempRecord> key) {
        super(child, key, CORE_CASE_TEMP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<CoreCaseTempRecord, Long> getIdentity() {
        return (Identity<CoreCaseTempRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreCaseTempRecord> getPrimaryKey() {
        return Keys.CORE_CASE_TEMP_PK;
    }

    @Override
    public CoreCaseTemp as(String alias) {
        return new CoreCaseTemp(DSL.name(alias), this);
    }

    @Override
    public CoreCaseTemp as(Name alias) {
        return new CoreCaseTemp(alias, this);
    }

    @Override
    public CoreCaseTemp as(Table<?> alias) {
        return new CoreCaseTemp(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreCaseTemp rename(String name) {
        return new CoreCaseTemp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreCaseTemp rename(Name name) {
        return new CoreCaseTemp(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreCaseTemp rename(Table<?> name) {
        return new CoreCaseTemp(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, OffsetDateTime, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super String, ? super OffsetDateTime, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
