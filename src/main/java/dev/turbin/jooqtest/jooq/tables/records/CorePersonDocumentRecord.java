/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.CorePersonDocument;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Установочные данные ФЛ и ДУЛ для дела.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePersonDocumentRecord extends UpdatableRecordImpl<CorePersonDocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.core_person_document.core_person_document_id</code>.
     * Идентификатор
     */
    public void setCorePersonDocumentId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.core_person_document_id</code>.
     * Идентификатор
     */
    public Long getCorePersonDocumentId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.type_id</code>. Тип ДУЛ
     * (НСИ)
     */
    public void setTypeId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.type_id</code>. Тип ДУЛ
     * (НСИ)
     */
    public Long getTypeId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.src_id</code>. Источник
     */
    public void setSrcId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.src_id</code>. Источник
     */
    public Long getSrcId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.doc_no</code>. Номер
     * ДУЛ.
     */
    public void setDocNo(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.doc_no</code>. Номер
     * ДУЛ.
     */
    public String getDocNo() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.series_code</code>.
     * Серия ДУЛ
     */
    public void setSeriesCode(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.series_code</code>.
     * Серия ДУЛ
     */
    public String getSeriesCode() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.first_name</code>. Имя
     * заявителя.
     */
    public void setFirstName(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.first_name</code>. Имя
     * заявителя.
     */
    public String getFirstName() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.last_name</code>.
     * Фамилия заявителя.
     */
    public void setLastName(String value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.last_name</code>.
     * Фамилия заявителя.
     */
    public String getLastName() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.middle_name</code>.
     * Отчество заявителя.
     */
    public void setMiddleName(String value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.middle_name</code>.
     * Отчество заявителя.
     */
    public String getMiddleName() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.birthday_dt</code>.
     * Дата рождения заявителя.
     */
    public void setBirthdayDt(LocalDate value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.birthday_dt</code>.
     * Дата рождения заявителя.
     */
    public LocalDate getBirthdayDt() {
        return (LocalDate) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.create_dttm</code>.
     * Дата время вставки записи
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.create_dttm</code>.
     * Дата время вставки записи
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.action_ind</code>.
     * Индикатор операции dml(i-insert,d-delete,u-update)
     */
    public void setActionInd(String value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.action_ind</code>.
     * Индикатор операции dml(i-insert,d-delete,u-update)
     */
    public String getActionInd() {
        return (String) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.citizenship_id</code>.
     * Гражданство
     */
    public void setCitizenshipId(Long value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.citizenship_id</code>.
     * Гражданство
     */
    public Long getCitizenshipId() {
        return (Long) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.gender_id</code>. Пол
     */
    public void setGenderId(Long value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.gender_id</code>. Пол
     */
    public Long getGenderId() {
        return (Long) get(13);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.person_id</code>.
     * Ссылка на идентификатор в ЕСФЛ
     */
    public void setPersonId(Long value) {
        set(14, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.person_id</code>.
     * Ссылка на идентификатор в ЕСФЛ
     */
    public Long getPersonId() {
        return (Long) get(14);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.issue_dt</code>. Дата
     * выдачи ДУЛ
     */
    public void setIssueDt(LocalDate value) {
        set(15, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.issue_dt</code>. Дата
     * выдачи ДУЛ
     */
    public LocalDate getIssueDt() {
        return (LocalDate) get(15);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.issue_place_desc</code>.
     * Кем выдан ДУЛ
     */
    public void setIssuePlaceDesc(String value) {
        set(16, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.issue_place_desc</code>.
     * Кем выдан ДУЛ
     */
    public String getIssuePlaceDesc() {
        return (String) get(16);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.birth_place_desc</code>.
     * Место рождения
     */
    public void setBirthPlaceDesc(String value) {
        set(17, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.birth_place_desc</code>.
     * Место рождения
     */
    public String getBirthPlaceDesc() {
        return (String) get(17);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.birth_date_integrity</code>.
     */
    public void setBirthDateIntegrity(Integer value) {
        set(18, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.birth_date_integrity</code>.
     */
    public Integer getBirthDateIntegrity() {
        return (Integer) get(18);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.last_name_lat</code>.
     * Фамилия заявителя, латиница.
     */
    public void setLastNameLat(String value) {
        set(19, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.last_name_lat</code>.
     * Фамилия заявителя, латиница.
     */
    public String getLastNameLat() {
        return (String) get(19);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.first_name_lat</code>.
     * Имя заявителя, латиница.
     */
    public void setFirstNameLat(String value) {
        set(20, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.first_name_lat</code>.
     * Имя заявителя, латиница.
     */
    public String getFirstNameLat() {
        return (String) get(20);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.middle_name_lat</code>.
     * Отчество заявителя, латиница.
     */
    public void setMiddleNameLat(String value) {
        set(21, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.middle_name_lat</code>.
     * Отчество заявителя, латиница.
     */
    public String getMiddleNameLat() {
        return (String) get(21);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.birth_country_id</code>.
     * Идентификатор страны рождения (НСИ)
     */
    public void setBirthCountryId(Long value) {
        set(22, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.birth_country_id</code>.
     * Идентификатор страны рождения (НСИ)
     */
    public Long getBirthCountryId() {
        return (Long) get(22);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.snils_code</code>.
     * СНИЛС физ лица
     */
    public void setSnilsCode(String value) {
        set(23, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.snils_code</code>.
     * СНИЛС физ лица
     */
    public String getSnilsCode() {
        return (String) get(23);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.birth_place_region_desc</code>.
     * Место рождения: регион
     */
    public void setBirthPlaceRegionDesc(String value) {
        set(24, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.birth_place_region_desc</code>.
     * Место рождения: регион
     */
    public String getBirthPlaceRegionDesc() {
        return (String) get(24);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.birth_place_area_desc</code>.
     * Место рождения: район
     */
    public void setBirthPlaceAreaDesc(String value) {
        set(25, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.birth_place_area_desc</code>.
     * Место рождения: район
     */
    public String getBirthPlaceAreaDesc() {
        return (String) get(25);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.birth_place_city_desc</code>.
     * Место рождения: город
     */
    public void setBirthPlaceCityDesc(String value) {
        set(26, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.birth_place_city_desc</code>.
     * Место рождения: город
     */
    public String getBirthPlaceCityDesc() {
        return (String) get(26);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.birth_place_locality_desc</code>.
     * Место рождения: населённый пункт
     */
    public void setBirthPlaceLocalityDesc(String value) {
        set(27, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.birth_place_locality_desc</code>.
     * Место рождения: населённый пункт
     */
    public String getBirthPlaceLocalityDesc() {
        return (String) get(27);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.authority_code</code>.
     * Код подразделения, выдавшего документ
     */
    public void setAuthorityCode(String value) {
        set(28, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.authority_code</code>.
     * Код подразделения, выдавшего документ
     */
    public String getAuthorityCode() {
        return (String) get(28);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.valid_to_dt</code>.
     * Дата окончания действия ДУЛ
     */
    public void setValidToDt(LocalDate value) {
        set(29, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.valid_to_dt</code>.
     * Дата окончания действия ДУЛ
     */
    public LocalDate getValidToDt() {
        return (LocalDate) get(29);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.extended_to_dt</code>.
     * Продлен по
     */
    public void setExtendedToDt(LocalDate value) {
        set(30, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.extended_to_dt</code>.
     * Продлен по
     */
    public LocalDate getExtendedToDt() {
        return (LocalDate) get(30);
    }

    /**
     * Setter for
     * <code>passport_international.core_person_document.version</code>.
     * Реализация оптимистической блокировки
     */
    public void setVersion(Integer value) {
        set(31, value);
    }

    /**
     * Getter for
     * <code>passport_international.core_person_document.version</code>.
     * Реализация оптимистической блокировки
     */
    public Integer getVersion() {
        return (Integer) get(31);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CorePersonDocumentRecord
     */
    public CorePersonDocumentRecord() {
        super(CorePersonDocument.CORE_PERSON_DOCUMENT);
    }

    /**
     * Create a detached, initialised CorePersonDocumentRecord
     */
    public CorePersonDocumentRecord(Long corePersonDocumentId, Long typeId, Long srcId, String docNo, String seriesCode, String firstName, String lastName, String middleName, LocalDate birthdayDt, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, Long citizenshipId, Long genderId, Long personId, LocalDate issueDt, String issuePlaceDesc, String birthPlaceDesc, Integer birthDateIntegrity, String lastNameLat, String firstNameLat, String middleNameLat, Long birthCountryId, String snilsCode, String birthPlaceRegionDesc, String birthPlaceAreaDesc, String birthPlaceCityDesc, String birthPlaceLocalityDesc, String authorityCode, LocalDate validToDt, LocalDate extendedToDt, Integer version) {
        super(CorePersonDocument.CORE_PERSON_DOCUMENT);

        setCorePersonDocumentId(corePersonDocumentId);
        setTypeId(typeId);
        setSrcId(srcId);
        setDocNo(docNo);
        setSeriesCode(seriesCode);
        setFirstName(firstName);
        setLastName(lastName);
        setMiddleName(middleName);
        setBirthdayDt(birthdayDt);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setCitizenshipId(citizenshipId);
        setGenderId(genderId);
        setPersonId(personId);
        setIssueDt(issueDt);
        setIssuePlaceDesc(issuePlaceDesc);
        setBirthPlaceDesc(birthPlaceDesc);
        setBirthDateIntegrity(birthDateIntegrity);
        setLastNameLat(lastNameLat);
        setFirstNameLat(firstNameLat);
        setMiddleNameLat(middleNameLat);
        setBirthCountryId(birthCountryId);
        setSnilsCode(snilsCode);
        setBirthPlaceRegionDesc(birthPlaceRegionDesc);
        setBirthPlaceAreaDesc(birthPlaceAreaDesc);
        setBirthPlaceCityDesc(birthPlaceCityDesc);
        setBirthPlaceLocalityDesc(birthPlaceLocalityDesc);
        setAuthorityCode(authorityCode);
        setValidToDt(validToDt);
        setExtendedToDt(extendedToDt);
        setVersion(version);
        resetChangedOnNotNull();
    }
}
