/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.FpCaseLegalPersonAudit;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Таблица версионирования fp_case_legal_person
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseLegalPersonAuditRecord extends UpdatableRecordImpl<FpCaseLegalPersonAuditRecord> implements Record14<Long, Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, String, String, String, LocalDate, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.id</code>.
     * Идентификатор "fp_case_legal_person_audit" с данными коррекции
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.id</code>.
     * Идентификатор "fp_case_legal_person_audit" с данными коррекции
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.record_fp_case_id</code>.
     * Часть внешнего ключа на запись в таблице-мастере (fp_case_id)
     */
    public void setRecordFpCaseId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.record_fp_case_id</code>.
     * Часть внешнего ключа на запись в таблице-мастере (fp_case_id)
     */
    public Long getRecordFpCaseId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.record_core_person_document_id</code>.
     * Часть внешнего ключа на запись в таблице-мастере
     * (core_person_document_id)
     */
    public void setRecordCorePersonDocumentId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.record_core_person_document_id</code>.
     * Часть внешнего ключа на запись в таблице-мастере
     * (core_person_document_id)
     */
    public Long getRecordCorePersonDocumentId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public void setCorrectionLogId(Long value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.correction_log_id</code>.
     * Идентификатор лога коррекции дела
     */
    public Long getCorrectionLogId() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.update_user</code>.
     * Пользователь, скорректировавший дело
     */
    public void setUpdateUser(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.update_user</code>.
     * Пользователь, скорректировавший дело
     */
    public String getUpdateUser() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.eff_dttm</code>.
     * Дата начала действия версии
     */
    public void setEffDttm(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.eff_dttm</code>.
     * Дата начала действия версии
     */
    public OffsetDateTime getEffDttm() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.exp_dttm</code>.
     * Дата окончания действия версии
     */
    public void setExpDttm(OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.exp_dttm</code>.
     * Дата окончания действия версии
     */
    public OffsetDateTime getExpDttm() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.relation_type</code>.
     */
    public void setRelationType(Long value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.relation_type</code>.
     */
    public Long getRelationType() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.type_doc</code>.
     */
    public void setTypeDoc(String value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.type_doc</code>.
     */
    public String getTypeDoc() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.series</code>.
     */
    public void setSeries(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.series</code>.
     */
    public String getSeries() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.doc_no</code>.
     */
    public void setDocNo(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.doc_no</code>.
     */
    public String getDocNo() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.issue_dt</code>.
     */
    public void setIssueDt(LocalDate value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.issue_dt</code>.
     */
    public LocalDate getIssueDt() {
        return (LocalDate) get(11);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.given_by</code>.
     */
    public void setGivenBy(String value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.given_by</code>.
     */
    public String getGivenBy() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>passport_international.fp_case_legal_person_audit.is_main_bool</code>.
     */
    public void setIsMainBool(Boolean value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>passport_international.fp_case_legal_person_audit.is_main_bool</code>.
     */
    public Boolean getIsMainBool() {
        return (Boolean) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, String, String, String, LocalDate, String, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Long, Long, Long, Long, String, OffsetDateTime, OffsetDateTime, Long, String, String, String, LocalDate, String, Boolean> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.ID;
    }

    @Override
    public Field<Long> field2() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.RECORD_FP_CASE_ID;
    }

    @Override
    public Field<Long> field3() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.RECORD_CORE_PERSON_DOCUMENT_ID;
    }

    @Override
    public Field<Long> field4() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.CORRECTION_LOG_ID;
    }

    @Override
    public Field<String> field5() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.UPDATE_USER;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.EFF_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.EXP_DTTM;
    }

    @Override
    public Field<Long> field8() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.RELATION_TYPE;
    }

    @Override
    public Field<String> field9() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.TYPE_DOC;
    }

    @Override
    public Field<String> field10() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.SERIES;
    }

    @Override
    public Field<String> field11() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.DOC_NO;
    }

    @Override
    public Field<LocalDate> field12() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.ISSUE_DT;
    }

    @Override
    public Field<String> field13() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.GIVEN_BY;
    }

    @Override
    public Field<Boolean> field14() {
        return FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT.IS_MAIN_BOOL;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getRecordFpCaseId();
    }

    @Override
    public Long component3() {
        return getRecordCorePersonDocumentId();
    }

    @Override
    public Long component4() {
        return getCorrectionLogId();
    }

    @Override
    public String component5() {
        return getUpdateUser();
    }

    @Override
    public OffsetDateTime component6() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime component7() {
        return getExpDttm();
    }

    @Override
    public Long component8() {
        return getRelationType();
    }

    @Override
    public String component9() {
        return getTypeDoc();
    }

    @Override
    public String component10() {
        return getSeries();
    }

    @Override
    public String component11() {
        return getDocNo();
    }

    @Override
    public LocalDate component12() {
        return getIssueDt();
    }

    @Override
    public String component13() {
        return getGivenBy();
    }

    @Override
    public Boolean component14() {
        return getIsMainBool();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getRecordFpCaseId();
    }

    @Override
    public Long value3() {
        return getRecordCorePersonDocumentId();
    }

    @Override
    public Long value4() {
        return getCorrectionLogId();
    }

    @Override
    public String value5() {
        return getUpdateUser();
    }

    @Override
    public OffsetDateTime value6() {
        return getEffDttm();
    }

    @Override
    public OffsetDateTime value7() {
        return getExpDttm();
    }

    @Override
    public Long value8() {
        return getRelationType();
    }

    @Override
    public String value9() {
        return getTypeDoc();
    }

    @Override
    public String value10() {
        return getSeries();
    }

    @Override
    public String value11() {
        return getDocNo();
    }

    @Override
    public LocalDate value12() {
        return getIssueDt();
    }

    @Override
    public String value13() {
        return getGivenBy();
    }

    @Override
    public Boolean value14() {
        return getIsMainBool();
    }

    @Override
    public FpCaseLegalPersonAuditRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value2(Long value) {
        setRecordFpCaseId(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value3(Long value) {
        setRecordCorePersonDocumentId(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value4(Long value) {
        setCorrectionLogId(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value5(String value) {
        setUpdateUser(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value6(OffsetDateTime value) {
        setEffDttm(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value7(OffsetDateTime value) {
        setExpDttm(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value8(Long value) {
        setRelationType(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value9(String value) {
        setTypeDoc(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value10(String value) {
        setSeries(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value11(String value) {
        setDocNo(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value12(LocalDate value) {
        setIssueDt(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value13(String value) {
        setGivenBy(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord value14(Boolean value) {
        setIsMainBool(value);
        return this;
    }

    @Override
    public FpCaseLegalPersonAuditRecord values(Long value1, Long value2, Long value3, Long value4, String value5, OffsetDateTime value6, OffsetDateTime value7, Long value8, String value9, String value10, String value11, LocalDate value12, String value13, Boolean value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FpCaseLegalPersonAuditRecord
     */
    public FpCaseLegalPersonAuditRecord() {
        super(FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT);
    }

    /**
     * Create a detached, initialised FpCaseLegalPersonAuditRecord
     */
    public FpCaseLegalPersonAuditRecord(Long id, Long recordFpCaseId, Long recordCorePersonDocumentId, Long correctionLogId, String updateUser, OffsetDateTime effDttm, OffsetDateTime expDttm, Long relationType, String typeDoc, String series, String docNo, LocalDate issueDt, String givenBy, Boolean isMainBool) {
        super(FpCaseLegalPersonAudit.FP_CASE_LEGAL_PERSON_AUDIT);

        setId(id);
        setRecordFpCaseId(recordFpCaseId);
        setRecordCorePersonDocumentId(recordCorePersonDocumentId);
        setCorrectionLogId(correctionLogId);
        setUpdateUser(updateUser);
        setEffDttm(effDttm);
        setExpDttm(expDttm);
        setRelationType(relationType);
        setTypeDoc(typeDoc);
        setSeries(series);
        setDocNo(docNo);
        setIssueDt(issueDt);
        setGivenBy(givenBy);
        setIsMainBool(isMainBool);
        resetChangedOnNotNull();
    }
}
