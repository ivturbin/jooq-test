/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ViewCoreDocRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCoreDoc extends TableImpl<ViewCoreDocRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.view_core_doc</code>
     */
    public static final ViewCoreDoc VIEW_CORE_DOC = new ViewCoreDoc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCoreDocRecord> getRecordType() {
        return ViewCoreDocRecord.class;
    }

    /**
     * The column
     * <code>passport_international.view_core_doc.core_case_id</code>.
     */
    public final TableField<ViewCoreDocRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>passport_international.view_core_doc.core_doc_id</code>.
     */
    public final TableField<ViewCoreDocRecord, Long> CORE_DOC_ID = createField(DSL.name("core_doc_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>passport_international.view_core_doc.version</code>.
     * Реализация оптимистической блокировки
     */
    public final TableField<ViewCoreDocRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "Реализация оптимистической блокировки");

    /**
     * The column
     * <code>passport_international.view_core_doc.invalid_bool</code>.
     */
    public final TableField<ViewCoreDocRecord, Boolean> INVALID_BOOL = createField(DSL.name("invalid_bool"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>passport_international.view_core_doc.type_id</code>. Тип
     * документа
     */
    public final TableField<ViewCoreDocRecord, Long> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.BIGINT, this, "Тип документа");

    /**
     * The column <code>passport_international.view_core_doc.status_id</code>.
     * Статус документа
     */
    public final TableField<ViewCoreDocRecord, Long> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.BIGINT, this, "Статус документа");

    /**
     * The column <code>passport_international.view_core_doc.change_dt</code>.
     * Дата изменений
     */
    public final TableField<ViewCoreDocRecord, LocalDate> CHANGE_DT = createField(DSL.name("change_dt"), SQLDataType.LOCALDATE, this, "Дата изменений");

    /**
     * The column <code>passport_international.view_core_doc.doc_no</code>.
     * Номер документа
     */
    public final TableField<ViewCoreDocRecord, String> DOC_NO = createField(DSL.name("doc_no"), SQLDataType.VARCHAR(128), this, "Номер документа");

    /**
     * The column <code>passport_international.view_core_doc.series_code</code>.
     * Серия документа
     */
    public final TableField<ViewCoreDocRecord, String> SERIES_CODE = createField(DSL.name("series_code"), SQLDataType.VARCHAR(128), this, "Серия документа");

    /**
     * The column <code>passport_international.view_core_doc.issued_dt</code>.
     * Дата выдачи
     */
    public final TableField<ViewCoreDocRecord, LocalDate> ISSUED_DT = createField(DSL.name("issued_dt"), SQLDataType.LOCALDATE, this, "Дата выдачи");

    /**
     * The column
     * <code>passport_international.view_core_doc.extend_to_dt</code>. Продлен
     * до
     */
    public final TableField<ViewCoreDocRecord, LocalDate> EXTEND_TO_DT = createField(DSL.name("extend_to_dt"), SQLDataType.LOCALDATE, this, "Продлен до");

    /**
     * The column
     * <code>passport_international.view_core_doc.valid_from_dt</code>.
     * Действителен с
     */
    public final TableField<ViewCoreDocRecord, LocalDate> VALID_FROM_DT = createField(DSL.name("valid_from_dt"), SQLDataType.LOCALDATE, this, "Действителен с");

    /**
     * The column <code>passport_international.view_core_doc.valid_to_dt</code>.
     * Действителен по
     */
    public final TableField<ViewCoreDocRecord, LocalDate> VALID_TO_DT = createField(DSL.name("valid_to_dt"), SQLDataType.LOCALDATE, this, "Действителен по");

    /**
     * The column
     * <code>passport_international.view_core_doc.destruction_dt</code>. Дата
     * уничтожения документа
     */
    public final TableField<ViewCoreDocRecord, LocalDate> DESTRUCTION_DT = createField(DSL.name("destruction_dt"), SQLDataType.LOCALDATE, this, "Дата уничтожения документа");

    /**
     * The column <code>passport_international.view_core_doc.invalid_dt</code>.
     * Дата инвалидации записи
     */
    public final TableField<ViewCoreDocRecord, LocalDate> INVALID_DT = createField(DSL.name("invalid_dt"), SQLDataType.LOCALDATE, this, "Дата инвалидации записи");

    /**
     * The column
     * <code>passport_international.view_core_doc.invalid_user</code>.
     * Пользователь, инвалидировавший запись
     */
    public final TableField<ViewCoreDocRecord, String> INVALID_USER = createField(DSL.name("invalid_user"), SQLDataType.VARCHAR(255), this, "Пользователь, инвалидировавший запись");

    /**
     * The column
     * <code>passport_international.view_core_doc.authority_organ_id</code>.
     * Орган, выдавший документ
     */
    public final TableField<ViewCoreDocRecord, Long> AUTHORITY_ORGAN_ID = createField(DSL.name("authority_organ_id"), SQLDataType.BIGINT, this, "Орган, выдавший документ");

    /**
     * The column
     * <code>passport_international.view_core_doc.new_core_doc_id</code>.
     */
    public final TableField<ViewCoreDocRecord, Long> NEW_CORE_DOC_ID = createField(DSL.name("new_core_doc_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_doc.blank_series_code</code>.
     * Серия бланка
     */
    public final TableField<ViewCoreDocRecord, String> BLANK_SERIES_CODE = createField(DSL.name("blank_series_code"), SQLDataType.VARCHAR(128), this, "Серия бланка");

    /**
     * The column
     * <code>passport_international.view_core_doc.blank_number_code</code>.
     * Номер бланка
     */
    public final TableField<ViewCoreDocRecord, String> BLANK_NUMBER_CODE = createField(DSL.name("blank_number_code"), SQLDataType.VARCHAR(128), this, "Номер бланка");

    /**
     * The column
     * <code>passport_international.view_core_doc.authority_code</code>. Код
     * подразделения, выдавшего документ
     */
    public final TableField<ViewCoreDocRecord, String> AUTHORITY_CODE = createField(DSL.name("authority_code"), SQLDataType.VARCHAR(128), this, "Код подразделения, выдавшего документ");

    /**
     * The column
     * <code>passport_international.view_core_doc.series_doc_no_hash_cval</code>.
     * Хэш серии и номера документа
     */
    public final TableField<ViewCoreDocRecord, String> SERIES_DOC_NO_HASH_CVAL = createField(DSL.name("series_doc_no_hash_cval"), SQLDataType.CLOB, this, "Хэш серии и номера документа");

    /**
     * The column
     * <code>passport_international.view_core_doc.series_doc_no_hash_strict_cval</code>.
     * Строгий хэш серии и номера документа
     */
    public final TableField<ViewCoreDocRecord, String> SERIES_DOC_NO_HASH_STRICT_CVAL = createField(DSL.name("series_doc_no_hash_strict_cval"), SQLDataType.CLOB, this, "Строгий хэш серии и номера документа");

    /**
     * The column
     * <code>passport_international.view_core_doc.doc_birth_place_desc</code>.
     * Место рождения, как указано в документе
     */
    public final TableField<ViewCoreDocRecord, String> DOC_BIRTH_PLACE_DESC = createField(DSL.name("doc_birth_place_desc"), SQLDataType.CLOB, this, "Место рождения, как указано в документе");

    /**
     * The column
     * <code>passport_international.view_core_doc.authority_desc</code>. Кем
     * выдан документ
     */
    public final TableField<ViewCoreDocRecord, String> AUTHORITY_DESC = createField(DSL.name("authority_desc"), SQLDataType.CLOB, this, "Кем выдан документ");

    /**
     * The column
     * <code>passport_international.view_core_doc.authorized_officer_cval</code>.
     * Должностное лицо, уполномоченное выдавать документ
     */
    public final TableField<ViewCoreDocRecord, String> AUTHORIZED_OFFICER_CVAL = createField(DSL.name("authorized_officer_cval"), SQLDataType.CLOB, this, "Должностное лицо, уполномоченное выдавать документ");

    /**
     * The column
     * <code>passport_international.view_core_doc.parent_authority_organ_id</code>.
     * Головное подразделение органа, выдавшего документ
     */
    public final TableField<ViewCoreDocRecord, Long> PARENT_AUTHORITY_ORGAN_ID = createField(DSL.name("parent_authority_organ_id"), SQLDataType.BIGINT, this, "Головное подразделение органа, выдавшего документ");

    /**
     * The column <code>passport_international.view_core_doc.person_id</code>.
     * Связь физического лица и документа
     */
    public final TableField<ViewCoreDocRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT, this, "Связь физического лица и документа");

    /**
     * The column <code>passport_international.view_core_doc.src_id</code>.
     * Источник
     */
    public final TableField<ViewCoreDocRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT, this, "Источник");

    /**
     * The column <code>passport_international.view_core_doc.create_dttm</code>.
     * Дата время вставки записи
     */
    public final TableField<ViewCoreDocRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время вставки записи");

    /**
     * The column <code>passport_international.view_core_doc.modify_dttm</code>.
     * Дата время последнего иземения записи
     */
    public final TableField<ViewCoreDocRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата время последнего иземения записи");

    /**
     * The column <code>passport_international.view_core_doc.action_ind</code>.
     * Индикатор действия
     */
    public final TableField<ViewCoreDocRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1), this, "Индикатор действия");

    /**
     * The column <code>passport_international.view_core_doc.eff_dttm</code>.
     * Дата начала действия периода
     */
    public final TableField<ViewCoreDocRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата начала действия периода");

    /**
     * The column <code>passport_international.view_core_doc.exp_dttm</code>.
     * Дата окончания действия периода
     */
    public final TableField<ViewCoreDocRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата окончания действия периода");

    /**
     * The column <code>passport_international.view_core_doc.create_user</code>.
     * Пользователь, создавший запись
     */
    public final TableField<ViewCoreDocRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255), this, "Пользователь, создавший запись");

    /**
     * The column <code>passport_international.view_core_doc.update_user</code>.
     * Пользователь, сделавший изменение
     */
    public final TableField<ViewCoreDocRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255), this, "Пользователь, сделавший изменение");

    /**
     * The column
     * <code>passport_international.view_core_doc.correction_reason_cval</code>.
     * Причина коррекции
     */
    public final TableField<ViewCoreDocRecord, String> CORRECTION_REASON_CVAL = createField(DSL.name("correction_reason_cval"), SQLDataType.CLOB, this, "Причина коррекции");

    /**
     * The column <code>passport_international.view_core_doc.sex_cval</code>.
     */
    public final TableField<ViewCoreDocRecord, String> SEX_CVAL = createField(DSL.name("sex_cval"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>passport_international.view_core_doc.birth_dt</code>.
     * Дата рождения
     */
    public final TableField<ViewCoreDocRecord, LocalDate> BIRTH_DT = createField(DSL.name("birth_dt"), SQLDataType.LOCALDATE, this, "Дата рождения");

    /**
     * The column
     * <code>passport_international.view_core_doc.destruction_act_id</code>.
     * Индефикатор акта об уничтожении
     */
    public final TableField<ViewCoreDocRecord, Long> DESTRUCTION_ACT_ID = createField(DSL.name("destruction_act_id"), SQLDataType.BIGINT, this, "Индефикатор акта об уничтожении");

    /**
     * The column
     * <code>passport_international.view_core_doc.core_person_doc_id</code>.
     */
    public final TableField<ViewCoreDocRecord, Long> CORE_PERSON_DOC_ID = createField(DSL.name("core_person_doc_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>passport_international.view_core_doc.invalid_case_id</code>.
     * Идентификатор дела о недействительности
     */
    public final TableField<ViewCoreDocRecord, Long> INVALID_CASE_ID = createField(DSL.name("invalid_case_id"), SQLDataType.BIGINT, this, "Идентификатор дела о недействительности");

    private ViewCoreDoc(Name alias, Table<ViewCoreDocRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCoreDoc(Name alias, Table<ViewCoreDocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "view_core_doc" as  SELECT core_document.core_case_id,
         core_document.core_document_id AS core_doc_id,
         core_document.version,
         core_document.invalid_bool,
         core_document.type_id,
         core_document.status_id,
         core_document.change_dt,
         core_document.doc_no,
         core_document.series_code,
         core_document.issued_dt,
         core_document.extend_to_dt,
         core_document.valid_from_dt,
         core_document.valid_to_dt,
         core_document.destruction_dt,
         core_document.invalid_dt,
         core_document.invalid_user,
         core_document.authority_organ_id,
         core_document.new_document_id AS new_core_doc_id,
         core_document.blank_series_code,
         core_document.blank_number_code,
         core_document.authority_code,
         core_document.series_doc_no_hash_cval,
         core_document.series_doc_no_hash_strict_cval,
         core_document.doc_birth_place_desc,
         core_document.authority_desc,
         core_document.authorized_officer_cval,
         core_document.parent_authority_organ_id,
         core_document.person_id,
         core_document.src_id,
         core_document.create_dttm,
         core_document.modify_dttm,
         core_document.action_ind,
         core_document.eff_dttm,
         core_document.exp_dttm,
         core_document.create_user,
         core_document.update_user,
         core_document.correction_reason_cval,
         core_document.gender_cval AS sex_cval,
         core_document.birth_dt,
         core_document.destruction_act_id,
         core_document.core_person_document_id AS core_person_doc_id,
         core_document.invalid_case_id
        FROM core_document;
        """));
    }

    /**
     * Create an aliased <code>passport_international.view_core_doc</code> table
     * reference
     */
    public ViewCoreDoc(String alias) {
        this(DSL.name(alias), VIEW_CORE_DOC);
    }

    /**
     * Create an aliased <code>passport_international.view_core_doc</code> table
     * reference
     */
    public ViewCoreDoc(Name alias) {
        this(alias, VIEW_CORE_DOC);
    }

    /**
     * Create a <code>passport_international.view_core_doc</code> table
     * reference
     */
    public ViewCoreDoc() {
        this(DSL.name("view_core_doc"), null);
    }

    public <O extends Record> ViewCoreDoc(Table<O> child, ForeignKey<O, ViewCoreDocRecord> key) {
        super(child, key, VIEW_CORE_DOC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public ViewCoreDoc as(String alias) {
        return new ViewCoreDoc(DSL.name(alias), this);
    }

    @Override
    public ViewCoreDoc as(Name alias) {
        return new ViewCoreDoc(alias, this);
    }

    @Override
    public ViewCoreDoc as(Table<?> alias) {
        return new ViewCoreDoc(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreDoc rename(String name) {
        return new ViewCoreDoc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreDoc rename(Name name) {
        return new ViewCoreDoc(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCoreDoc rename(Table<?> name) {
        return new ViewCoreDoc(name.getQualifiedName(), null);
    }
}
