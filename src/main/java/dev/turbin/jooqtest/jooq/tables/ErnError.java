/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.ErnErrorRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Сведения об ошибках, пришедших от ЕРН
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ErnError extends TableImpl<ErnErrorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>passport_international.ern_error</code>
     */
    public static final ErnError ERN_ERROR = new ErnError();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ErnErrorRecord> getRecordType() {
        return ErnErrorRecord.class;
    }

    /**
     * The column <code>passport_international.ern_error.ern_error_id</code>.
     * Первичный ключ
     */
    public final TableField<ErnErrorRecord, Long> ERN_ERROR_ID = createField(DSL.name("ern_error_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Первичный ключ");

    /**
     * The column <code>passport_international.ern_error.core_case_id</code>.
     * Идентификатор дела
     */
    public final TableField<ErnErrorRecord, Long> CORE_CASE_ID = createField(DSL.name("core_case_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор дела");

    /**
     * The column <code>passport_international.ern_error.status_code</code>. Код
     * ЕРН
     */
    public final TableField<ErnErrorRecord, String> STATUS_CODE = createField(DSL.name("status_code"), SQLDataType.VARCHAR(128).nullable(false), this, "Код ЕРН");

    /**
     * The column <code>passport_international.ern_error.status_desc</code>.
     * Описание ошибки
     */
    public final TableField<ErnErrorRecord, String> STATUS_DESC = createField(DSL.name("status_desc"), SQLDataType.VARCHAR(256), this, "Описание ошибки");

    /**
     * The column <code>passport_international.ern_error.action_ind</code>.
     * Индикатор операции dml(i-insert,d-delete,u-update)
     */
    public final TableField<ErnErrorRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции dml(i-insert,d-delete,u-update)");

    /**
     * The column <code>passport_international.ern_error.create_dttm</code>.
     * Дата создания записи
     */
    public final TableField<ErnErrorRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата создания записи");

    /**
     * The column <code>passport_international.ern_error.modify_dttm</code>.
     * Дата изменения записи
     */
    public final TableField<ErnErrorRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата изменения записи");

    /**
     * The column <code>passport_international.ern_error.region_id</code>.
     * Регион
     */
    public final TableField<ErnErrorRecord, Long> REGION_ID = createField(DSL.name("region_id"), SQLDataType.BIGINT, this, "Регион");

    /**
     * The column <code>passport_international.ern_error.department_id</code>.
     * Подразделение в котором заводили дело
     */
    public final TableField<ErnErrorRecord, Long> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.BIGINT, this, "Подразделение в котором заводили дело");

    /**
     * The column <code>passport_international.ern_error.check_desk</code>. Код
     * ошибки
     */
    public final TableField<ErnErrorRecord, String> CHECK_DESK = createField(DSL.name("check_desk"), SQLDataType.VARCHAR(64), this, "Код ошибки");

    /**
     * The column <code>passport_international.ern_error.source_code</code>.
     * Категория ошибки
     */
    public final TableField<ErnErrorRecord, String> SOURCE_CODE = createField(DSL.name("source_code"), SQLDataType.VARCHAR(16), this, "Категория ошибки");

    /**
     * The column <code>passport_international.ern_error.check_desk_code</code>.
     * Код ошибки НСИ
     */
    public final TableField<ErnErrorRecord, Long> CHECK_DESK_CODE = createField(DSL.name("check_desk_code"), SQLDataType.BIGINT, this, "Код ошибки НСИ");

    /**
     * The column
     * <code>passport_international.ern_error.correction_status</code>. Статус
     * коррекции
     */
    public final TableField<ErnErrorRecord, String> CORRECTION_STATUS = createField(DSL.name("correction_status"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'NOT_PROCESSED'::character varying"), SQLDataType.VARCHAR)), this, "Статус коррекции");

    private ErnError(Name alias, Table<ErnErrorRecord> aliased) {
        this(alias, aliased, null);
    }

    private ErnError(Name alias, Table<ErnErrorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Сведения об ошибках, пришедших от ЕРН"), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.ern_error</code> table
     * reference
     */
    public ErnError(String alias) {
        this(DSL.name(alias), ERN_ERROR);
    }

    /**
     * Create an aliased <code>passport_international.ern_error</code> table
     * reference
     */
    public ErnError(Name alias) {
        this(alias, ERN_ERROR);
    }

    /**
     * Create a <code>passport_international.ern_error</code> table reference
     */
    public ErnError() {
        this(DSL.name("ern_error"), null);
    }

    public <O extends Record> ErnError(Table<O> child, ForeignKey<O, ErnErrorRecord> key) {
        super(child, key, ERN_ERROR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public Identity<ErnErrorRecord, Long> getIdentity() {
        return (Identity<ErnErrorRecord, Long>) super.getIdentity();
    }

    @Override
    public List<ForeignKey<ErnErrorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ERN_ERROR__ERN_ERROR_CORE_CASE_FK);
    }

    private transient CoreCase _coreCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_case</code> table.
     */
    public CoreCase coreCase() {
        if (_coreCase == null)
            _coreCase = new CoreCase(this, Keys.ERN_ERROR__ERN_ERROR_CORE_CASE_FK);

        return _coreCase;
    }

    @Override
    public ErnError as(String alias) {
        return new ErnError(DSL.name(alias), this);
    }

    @Override
    public ErnError as(Name alias) {
        return new ErnError(alias, this);
    }

    @Override
    public ErnError as(Table<?> alias) {
        return new ErnError(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ErnError rename(String name) {
        return new ErnError(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ErnError rename(Name name) {
        return new ErnError(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ErnError rename(Table<?> name) {
        return new ErnError(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, String, String, String, OffsetDateTime, OffsetDateTime, Long, Long, String, String, Long, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Long, ? super String, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Long, ? super String, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
