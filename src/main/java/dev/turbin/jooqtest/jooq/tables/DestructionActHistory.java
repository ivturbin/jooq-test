/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.DestructionActHistoryRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * История актов уничтожения бланков заграна
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DestructionActHistory extends TableImpl<DestructionActHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.destruction_act_history</code>
     */
    public static final DestructionActHistory DESTRUCTION_ACT_HISTORY = new DestructionActHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DestructionActHistoryRecord> getRecordType() {
        return DestructionActHistoryRecord.class;
    }

    /**
     * The column
     * <code>passport_international.destruction_act_history.destruction_act_id</code>.
     * Индификатор акта
     */
    public final TableField<DestructionActHistoryRecord, Long> DESTRUCTION_ACT_ID = createField(DSL.name("destruction_act_id"), SQLDataType.BIGINT.nullable(false), this, "Индификатор акта");

    /**
     * The column
     * <code>passport_international.destruction_act_history.core_document_id</code>.
     * Индификатор документа
     */
    public final TableField<DestructionActHistoryRecord, Long> CORE_DOCUMENT_ID = createField(DSL.name("core_document_id"), SQLDataType.BIGINT.nullable(false), this, "Индификатор документа");

    /**
     * The column
     * <code>passport_international.destruction_act_history.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<DestructionActHistoryRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.destruction_act_history.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<DestructionActHistoryRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.destruction_act_history.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<DestructionActHistoryRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.destruction_act_history.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<DestructionActHistoryRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.destruction_act_history.eff_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<DestructionActHistoryRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.destruction_act_history.exp_dttm</code>.
     * Поля отображения периода действия технической истории
     */
    public final TableField<DestructionActHistoryRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.destruction_act_history.previous_doc_status_id</code>.
     * Предыдущий статус документа
     */
    public final TableField<DestructionActHistoryRecord, Long> PREVIOUS_DOC_STATUS_ID = createField(DSL.name("previous_doc_status_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Предыдущий статус документа");

    private DestructionActHistory(Name alias, Table<DestructionActHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private DestructionActHistory(Name alias, Table<DestructionActHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("История актов уничтожения бланков заграна"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.destruction_act_history</code> table
     * reference
     */
    public DestructionActHistory(String alias) {
        this(DSL.name(alias), DESTRUCTION_ACT_HISTORY);
    }

    /**
     * Create an aliased
     * <code>passport_international.destruction_act_history</code> table
     * reference
     */
    public DestructionActHistory(Name alias) {
        this(alias, DESTRUCTION_ACT_HISTORY);
    }

    /**
     * Create a <code>passport_international.destruction_act_history</code>
     * table reference
     */
    public DestructionActHistory() {
        this(DSL.name("destruction_act_history"), null);
    }

    public <O extends Record> DestructionActHistory(Table<O> child, ForeignKey<O, DestructionActHistoryRecord> key) {
        super(child, key, DESTRUCTION_ACT_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DESTRUC_ACT_HISTORY_CORE_DOC_UK);
    }

    @Override
    public UniqueKey<DestructionActHistoryRecord> getPrimaryKey() {
        return Keys.DESTRUCTION_ACT_HISTORY_PK;
    }

    @Override
    public List<ForeignKey<DestructionActHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DESTRUCTION_ACT_HISTORY__DESTRUCTION_ACT_HISTORY_DESTRUCTION_ACT_FK, Keys.DESTRUCTION_ACT_HISTORY__DESTRUCTION_ACT_HISTORY_CORE_DOCUMENT);
    }

    private transient DestructionAct _destructionAct;
    private transient CoreDocument _coreDocument;

    /**
     * Get the implicit join path to the
     * <code>passport_international.destruction_act</code> table.
     */
    public DestructionAct destructionAct() {
        if (_destructionAct == null)
            _destructionAct = new DestructionAct(this, Keys.DESTRUCTION_ACT_HISTORY__DESTRUCTION_ACT_HISTORY_DESTRUCTION_ACT_FK);

        return _destructionAct;
    }

    /**
     * Get the implicit join path to the
     * <code>passport_international.core_document</code> table.
     */
    public CoreDocument coreDocument() {
        if (_coreDocument == null)
            _coreDocument = new CoreDocument(this, Keys.DESTRUCTION_ACT_HISTORY__DESTRUCTION_ACT_HISTORY_CORE_DOCUMENT);

        return _coreDocument;
    }

    @Override
    public DestructionActHistory as(String alias) {
        return new DestructionActHistory(DSL.name(alias), this);
    }

    @Override
    public DestructionActHistory as(Name alias) {
        return new DestructionActHistory(alias, this);
    }

    @Override
    public DestructionActHistory as(Table<?> alias) {
        return new DestructionActHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DestructionActHistory rename(String name) {
        return new DestructionActHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DestructionActHistory rename(Name name) {
        return new DestructionActHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DestructionActHistory rename(Table<?> name) {
        return new DestructionActHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
