/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.MeasurementRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measurement extends TableImpl<MeasurementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>passport_international.measurement</code>
     */
    public static final Measurement MEASUREMENT = new Measurement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasurementRecord> getRecordType() {
        return MeasurementRecord.class;
    }

    /**
     * The column <code>passport_international.measurement.id</code>.
     */
    public final TableField<MeasurementRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>passport_international.measurement.uri</code>.
     */
    public final TableField<MeasurementRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>passport_international.measurement.count</code>.
     */
    public final TableField<MeasurementRecord, Double> COUNT = createField(DSL.name("count"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>passport_international.measurement.max</code>.
     */
    public final TableField<MeasurementRecord, Double> MAX = createField(DSL.name("max"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>passport_international.measurement.day</code>.
     */
    public final TableField<MeasurementRecord, LocalDate> DAY = createField(DSL.name("day"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>passport_international.measurement.errors</code>.
     */
    public final TableField<MeasurementRecord, Boolean> ERRORS = createField(DSL.name("errors"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>passport_international.measurement.app_start</code>.
     */
    public final TableField<MeasurementRecord, LocalDateTime> APP_START = createField(DSL.name("app_start"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Measurement(Name alias, Table<MeasurementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Measurement(Name alias, Table<MeasurementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.measurement</code> table
     * reference
     */
    public Measurement(String alias) {
        this(DSL.name(alias), MEASUREMENT);
    }

    /**
     * Create an aliased <code>passport_international.measurement</code> table
     * reference
     */
    public Measurement(Name alias) {
        this(alias, MEASUREMENT);
    }

    /**
     * Create a <code>passport_international.measurement</code> table reference
     */
    public Measurement() {
        this(DSL.name("measurement"), null);
    }

    public <O extends Record> Measurement(Table<O> child, ForeignKey<O, MeasurementRecord> key) {
        super(child, key, MEASUREMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MEASUREMENT_ID_UINDEX);
    }

    @Override
    public Identity<MeasurementRecord, Long> getIdentity() {
        return (Identity<MeasurementRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeasurementRecord> getPrimaryKey() {
        return Keys.MEASUREMENT_PK;
    }

    @Override
    public Measurement as(String alias) {
        return new Measurement(DSL.name(alias), this);
    }

    @Override
    public Measurement as(Name alias) {
        return new Measurement(alias, this);
    }

    @Override
    public Measurement as(Table<?> alias) {
        return new Measurement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(String name) {
        return new Measurement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(Name name) {
        return new Measurement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(Table<?> name) {
        return new Measurement(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Double, Double, LocalDate, Boolean, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super Double, ? super Double, ? super LocalDate, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super Double, ? super Double, ? super LocalDate, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
