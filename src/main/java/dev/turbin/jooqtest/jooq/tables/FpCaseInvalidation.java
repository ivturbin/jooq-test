/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Indexes;
import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.FpCaseInvalidationRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Дело об объявлении загранпаспорта недействительным
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FpCaseInvalidation extends TableImpl<FpCaseInvalidationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>passport_international.fp_case_invalidation</code>
     */
    public static final FpCaseInvalidation FP_CASE_INVALIDATION = new FpCaseInvalidation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FpCaseInvalidationRecord> getRecordType() {
        return FpCaseInvalidationRecord.class;
    }

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.inv_id</code>.
     * Идентификатор
     */
    public final TableField<FpCaseInvalidationRecord, Long> INV_ID = createField(DSL.name("inv_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.inv_reason_id</code>.
     * Причина объявления загранпаспорта недействительным
     */
    public final TableField<FpCaseInvalidationRecord, Long> INV_REASON_ID = createField(DSL.name("inv_reason_id"), SQLDataType.BIGINT.nullable(false), this, "Причина объявления загранпаспорта недействительным");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.inv_evidence_type_id</code>.
     * Тип документа-основания
     */
    public final TableField<FpCaseInvalidationRecord, Long> INV_EVIDENCE_TYPE_ID = createField(DSL.name("inv_evidence_type_id"), SQLDataType.BIGINT, this, "Тип документа-основания");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.inv_evidence_number</code>.
     * Номер документа-основания
     */
    public final TableField<FpCaseInvalidationRecord, String> INV_EVIDENCE_NUMBER = createField(DSL.name("inv_evidence_number"), SQLDataType.VARCHAR(128), this, "Номер документа-основания");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.inv_evidence_dt</code>.
     * Дата документа-основания
     */
    public final TableField<FpCaseInvalidationRecord, LocalDate> INV_EVIDENCE_DT = createField(DSL.name("inv_evidence_dt"), SQLDataType.LOCALDATE, this, "Дата документа-основания");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.src_id</code>.
     * Идентификатор источника с которого получены информация
     */
    public final TableField<FpCaseInvalidationRecord, Long> SRC_ID = createField(DSL.name("src_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.BIGINT)), this, "Идентификатор источника с которого получены информация");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.create_dttm</code>.
     * Дата время вставки записи в таблицу
     */
    public final TableField<FpCaseInvalidationRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время вставки записи в таблицу");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.modify_dttm</code>.
     * Дата время последнего изменения записи
     */
    public final TableField<FpCaseInvalidationRecord, OffsetDateTime> MODIFY_DTTM = createField(DSL.name("modify_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Дата время последнего изменения записи");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.action_ind</code>.
     * Индикатор операции DML(I-insert,D-delete,U-update)
     */
    public final TableField<FpCaseInvalidationRecord, String> ACTION_IND = createField(DSL.name("action_ind"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'I'::character varying"), SQLDataType.VARCHAR)), this, "Индикатор операции DML(I-insert,D-delete,U-update)");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.eff_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<FpCaseInvalidationRecord, OffsetDateTime> EFF_DTTM = createField(DSL.name("eff_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1900-01-01'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.exp_dttm</code>. Поля
     * отображения периода действия технической истории
     */
    public final TableField<FpCaseInvalidationRecord, OffsetDateTime> EXP_DTTM = createField(DSL.name("exp_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2999-12-31'::date"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Поля отображения периода действия технической истории");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.date_invalidation</code>.
     * Дата объявления заграна недействительным
     */
    public final TableField<FpCaseInvalidationRecord, LocalDate> DATE_INVALIDATION = createField(DSL.name("date_invalidation"), SQLDataType.LOCALDATE, this, "Дата объявления заграна недействительным");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.signer_id</code>.
     * Подписывающий сотрудник
     */
    public final TableField<FpCaseInvalidationRecord, Long> SIGNER_ID = createField(DSL.name("signer_id"), SQLDataType.BIGINT, this, "Подписывающий сотрудник");

    /**
     * The column
     * <code>passport_international.fp_case_invalidation.comment</code>.
     * Комментарий
     */
    public final TableField<FpCaseInvalidationRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(512), this, "Комментарий");

    private FpCaseInvalidation(Name alias, Table<FpCaseInvalidationRecord> aliased) {
        this(alias, aliased, null);
    }

    private FpCaseInvalidation(Name alias, Table<FpCaseInvalidationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Дело об объявлении загранпаспорта недействительным"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_case_invalidation</code> table reference
     */
    public FpCaseInvalidation(String alias) {
        this(DSL.name(alias), FP_CASE_INVALIDATION);
    }

    /**
     * Create an aliased
     * <code>passport_international.fp_case_invalidation</code> table reference
     */
    public FpCaseInvalidation(Name alias) {
        this(alias, FP_CASE_INVALIDATION);
    }

    /**
     * Create a <code>passport_international.fp_case_invalidation</code> table
     * reference
     */
    public FpCaseInvalidation() {
        this(DSL.name("fp_case_invalidation"), null);
    }

    public <O extends Record> FpCaseInvalidation(Table<O> child, ForeignKey<O, FpCaseInvalidationRecord> key) {
        super(child, key, FP_CASE_INVALIDATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FP_CASE_INV_REASON_TYPE);
    }

    @Override
    public UniqueKey<FpCaseInvalidationRecord> getPrimaryKey() {
        return Keys.PK_FP_CASE_INV;
    }

    @Override
    public List<ForeignKey<FpCaseInvalidationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FP_CASE_INVALIDATION__FK_FP_CASE_INV_FP_CASE);
    }

    private transient FpCase _fpCase;

    /**
     * Get the implicit join path to the
     * <code>passport_international.fp_case</code> table.
     */
    public FpCase fpCase() {
        if (_fpCase == null)
            _fpCase = new FpCase(this, Keys.FP_CASE_INVALIDATION__FK_FP_CASE_INV_FP_CASE);

        return _fpCase;
    }

    @Override
    public FpCaseInvalidation as(String alias) {
        return new FpCaseInvalidation(DSL.name(alias), this);
    }

    @Override
    public FpCaseInvalidation as(Name alias) {
        return new FpCaseInvalidation(alias, this);
    }

    @Override
    public FpCaseInvalidation as(Table<?> alias) {
        return new FpCaseInvalidation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseInvalidation rename(String name) {
        return new FpCaseInvalidation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseInvalidation rename(Name name) {
        return new FpCaseInvalidation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FpCaseInvalidation rename(Table<?> name) {
        return new FpCaseInvalidation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, String, LocalDate, Long, OffsetDateTime, OffsetDateTime, String, OffsetDateTime, OffsetDateTime, LocalDate, Long, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super Long, ? super Long, ? super String, ? super LocalDate, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super LocalDate, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super Long, ? super Long, ? super String, ? super LocalDate, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super LocalDate, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
