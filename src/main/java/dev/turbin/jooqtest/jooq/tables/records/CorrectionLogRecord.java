/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables.records;


import dev.turbin.jooqtest.jooq.tables.CorrectionLog;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Базовая таблица коррекции
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorrectionLogRecord extends UpdatableRecordImpl<CorrectionLogRecord> implements Record9<Long, Long, Long, String, String, OffsetDateTime, OffsetDateTime, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>passport_international.correction_log.correction_log_id</code>.
     * Идентификатор записи
     */
    public void setCorrectionLogId(Long value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>passport_international.correction_log.correction_log_id</code>.
     * Идентификатор записи
     */
    public Long getCorrectionLogId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>passport_international.correction_log.core_case_id</code>. Привязка
     * к делу
     */
    public void setCoreCaseId(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>passport_international.correction_log.core_case_id</code>. Привязка
     * к делу
     */
    public Long getCoreCaseId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>passport_international.correction_log.core_document_id</code>.
     * Ссылка на базовый документ
     */
    public void setCoreDocumentId(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>passport_international.correction_log.core_document_id</code>.
     * Ссылка на базовый документ
     */
    public Long getCoreDocumentId() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>passport_international.correction_log.correction_reason_desc</code>.
     * Причина изменяемого атрибута
     */
    public void setCorrectionReasonDesc(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>passport_international.correction_log.correction_reason_desc</code>.
     * Причина изменяемого атрибута
     */
    public String getCorrectionReasonDesc() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>passport_international.correction_log.changed_user</code>. Автор
     * внесения корректировок
     */
    public void setChangedUser(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>passport_international.correction_log.changed_user</code>. Автор
     * внесения корректировок
     */
    public String getChangedUser() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>passport_international.correction_log.create_dttm</code>. Дата
     * время вставки записи
     */
    public void setCreateDttm(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>passport_international.correction_log.create_dttm</code>. Дата
     * время вставки записи
     */
    public OffsetDateTime getCreateDttm() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for
     * <code>passport_international.correction_log.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public void setModifyDttm(OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>passport_international.correction_log.modify_dttm</code>. Дата
     * время последнего изменения записи
     */
    public OffsetDateTime getModifyDttm() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>passport_international.correction_log.action_ind</code>.
     * Индикатор действия
     */
    public void setActionInd(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>passport_international.correction_log.action_ind</code>.
     * Индикатор действия
     */
    public String getActionInd() {
        return (String) get(7);
    }

    /**
     * Setter for <code>passport_international.correction_log.version</code>.
     * Версия изменения в деле
     */
    public void setVersion(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>passport_international.correction_log.version</code>.
     * Версия изменения в деле
     */
    public Integer getVersion() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, String, String, OffsetDateTime, OffsetDateTime, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Long, Long, String, String, OffsetDateTime, OffsetDateTime, String, Integer> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return CorrectionLog.CORRECTION_LOG.CORRECTION_LOG_ID;
    }

    @Override
    public Field<Long> field2() {
        return CorrectionLog.CORRECTION_LOG.CORE_CASE_ID;
    }

    @Override
    public Field<Long> field3() {
        return CorrectionLog.CORRECTION_LOG.CORE_DOCUMENT_ID;
    }

    @Override
    public Field<String> field4() {
        return CorrectionLog.CORRECTION_LOG.CORRECTION_REASON_DESC;
    }

    @Override
    public Field<String> field5() {
        return CorrectionLog.CORRECTION_LOG.CHANGED_USER;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return CorrectionLog.CORRECTION_LOG.CREATE_DTTM;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return CorrectionLog.CORRECTION_LOG.MODIFY_DTTM;
    }

    @Override
    public Field<String> field8() {
        return CorrectionLog.CORRECTION_LOG.ACTION_IND;
    }

    @Override
    public Field<Integer> field9() {
        return CorrectionLog.CORRECTION_LOG.VERSION;
    }

    @Override
    public Long component1() {
        return getCorrectionLogId();
    }

    @Override
    public Long component2() {
        return getCoreCaseId();
    }

    @Override
    public Long component3() {
        return getCoreDocumentId();
    }

    @Override
    public String component4() {
        return getCorrectionReasonDesc();
    }

    @Override
    public String component5() {
        return getChangedUser();
    }

    @Override
    public OffsetDateTime component6() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime component7() {
        return getModifyDttm();
    }

    @Override
    public String component8() {
        return getActionInd();
    }

    @Override
    public Integer component9() {
        return getVersion();
    }

    @Override
    public Long value1() {
        return getCorrectionLogId();
    }

    @Override
    public Long value2() {
        return getCoreCaseId();
    }

    @Override
    public Long value3() {
        return getCoreDocumentId();
    }

    @Override
    public String value4() {
        return getCorrectionReasonDesc();
    }

    @Override
    public String value5() {
        return getChangedUser();
    }

    @Override
    public OffsetDateTime value6() {
        return getCreateDttm();
    }

    @Override
    public OffsetDateTime value7() {
        return getModifyDttm();
    }

    @Override
    public String value8() {
        return getActionInd();
    }

    @Override
    public Integer value9() {
        return getVersion();
    }

    @Override
    public CorrectionLogRecord value1(Long value) {
        setCorrectionLogId(value);
        return this;
    }

    @Override
    public CorrectionLogRecord value2(Long value) {
        setCoreCaseId(value);
        return this;
    }

    @Override
    public CorrectionLogRecord value3(Long value) {
        setCoreDocumentId(value);
        return this;
    }

    @Override
    public CorrectionLogRecord value4(String value) {
        setCorrectionReasonDesc(value);
        return this;
    }

    @Override
    public CorrectionLogRecord value5(String value) {
        setChangedUser(value);
        return this;
    }

    @Override
    public CorrectionLogRecord value6(OffsetDateTime value) {
        setCreateDttm(value);
        return this;
    }

    @Override
    public CorrectionLogRecord value7(OffsetDateTime value) {
        setModifyDttm(value);
        return this;
    }

    @Override
    public CorrectionLogRecord value8(String value) {
        setActionInd(value);
        return this;
    }

    @Override
    public CorrectionLogRecord value9(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public CorrectionLogRecord values(Long value1, Long value2, Long value3, String value4, String value5, OffsetDateTime value6, OffsetDateTime value7, String value8, Integer value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CorrectionLogRecord
     */
    public CorrectionLogRecord() {
        super(CorrectionLog.CORRECTION_LOG);
    }

    /**
     * Create a detached, initialised CorrectionLogRecord
     */
    public CorrectionLogRecord(Long correctionLogId, Long coreCaseId, Long coreDocumentId, String correctionReasonDesc, String changedUser, OffsetDateTime createDttm, OffsetDateTime modifyDttm, String actionInd, Integer version) {
        super(CorrectionLog.CORRECTION_LOG);

        setCorrectionLogId(correctionLogId);
        setCoreCaseId(coreCaseId);
        setCoreDocumentId(coreDocumentId);
        setCorrectionReasonDesc(correctionReasonDesc);
        setChangedUser(changedUser);
        setCreateDttm(createDttm);
        setModifyDttm(modifyDttm);
        setActionInd(actionInd);
        setVersion(version);
        resetChangedOnNotNull();
    }
}
