/*
 * This file is generated by jOOQ.
 */
package dev.turbin.jooqtest.jooq.tables;


import dev.turbin.jooqtest.jooq.Keys;
import dev.turbin.jooqtest.jooq.PassportInternational;
import dev.turbin.jooqtest.jooq.tables.records.UserTaskRecord;

import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTask extends TableImpl<UserTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>passport_international.user_task</code>
     */
    public static final UserTask USER_TASK = new UserTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTaskRecord> getRecordType() {
        return UserTaskRecord.class;
    }

    /**
     * The column <code>passport_international.user_task.task_uid</code>.
     */
    public final TableField<UserTaskRecord, UUID> TASK_UID = createField(DSL.name("task_uid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>passport_international.user_task.responsible_user_id</code>.
     */
    public final TableField<UserTaskRecord, String> RESPONSIBLE_USER_ID = createField(DSL.name("responsible_user_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>passport_international.user_task.form_key</code>.
     */
    public final TableField<UserTaskRecord, String> FORM_KEY = createField(DSL.name("form_key"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>passport_international.user_task.create_dttm</code>.
     */
    public final TableField<UserTaskRecord, OffsetDateTime> CREATE_DTTM = createField(DSL.name("create_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>passport_international.user_task.complete_dttm</code>.
     */
    public final TableField<UserTaskRecord, OffsetDateTime> COMPLETE_DTTM = createField(DSL.name("complete_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>passport_international.user_task.due_dttm</code>.
     */
    public final TableField<UserTaskRecord, OffsetDateTime> DUE_DTTM = createField(DSL.name("due_dttm"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>passport_international.user_task.reply_to</code>.
     */
    public final TableField<UserTaskRecord, String> REPLY_TO = createField(DSL.name("reply_to"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>passport_international.user_task.system_code</code>.
     */
    public final TableField<UserTaskRecord, String> SYSTEM_CODE = createField(DSL.name("system_code"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>passport_international.user_task.department_code</code>.
     */
    public final TableField<UserTaskRecord, String> DEPARTMENT_CODE = createField(DSL.name("department_code"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>passport_international.user_task.system_case_id</code>.
     */
    public final TableField<UserTaskRecord, Long> SYSTEM_CASE_ID = createField(DSL.name("system_case_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>passport_international.user_task.task_type</code>. Тип
     * задачи
     */
    public final TableField<UserTaskRecord, String> TASK_TYPE = createField(DSL.name("task_type"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'U'::character varying"), SQLDataType.VARCHAR)), this, "Тип задачи");

    /**
     * The column <code>passport_international.user_task.activity_id</code>. ИД
     * шага в описании процесса
     */
    public final TableField<UserTaskRecord, String> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.field(DSL.raw("'no_set'::character varying"), SQLDataType.VARCHAR)), this, "ИД шага в описании процесса");

    /**
     * The column
     * <code>passport_international.user_task.process_definition_key</code>. Код
     * бизнес-процесса, к которому принадлежит текущая задача
     */
    public final TableField<UserTaskRecord, String> PROCESS_DEFINITION_KEY = createField(DSL.name("process_definition_key"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'N/D'::character varying"), SQLDataType.VARCHAR)), this, "Код бизнес-процесса, к которому принадлежит текущая задача");

    /**
     * The column <code>passport_international.user_task.variables</code>.
     * Переменные на шаге процесса
     */
    public final TableField<UserTaskRecord, String> VARIABLES = createField(DSL.name("variables"), SQLDataType.CLOB, this, "Переменные на шаге процесса");

    private UserTask(Name alias, Table<UserTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTask(Name alias, Table<UserTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>passport_international.user_task</code> table
     * reference
     */
    public UserTask(String alias) {
        this(DSL.name(alias), USER_TASK);
    }

    /**
     * Create an aliased <code>passport_international.user_task</code> table
     * reference
     */
    public UserTask(Name alias) {
        this(alias, USER_TASK);
    }

    /**
     * Create a <code>passport_international.user_task</code> table reference
     */
    public UserTask() {
        this(DSL.name("user_task"), null);
    }

    public <O extends Record> UserTask(Table<O> child, ForeignKey<O, UserTaskRecord> key) {
        super(child, key, USER_TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PassportInternational.PASSPORT_INTERNATIONAL;
    }

    @Override
    public UniqueKey<UserTaskRecord> getPrimaryKey() {
        return Keys.PK_USER_TASK;
    }

    @Override
    public UserTask as(String alias) {
        return new UserTask(DSL.name(alias), this);
    }

    @Override
    public UserTask as(Name alias) {
        return new UserTask(alias, this);
    }

    @Override
    public UserTask as(Table<?> alias) {
        return new UserTask(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTask rename(String name) {
        return new UserTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTask rename(Name name) {
        return new UserTask(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTask rename(Table<?> name) {
        return new UserTask(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String, String, Long, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
